Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARRAY
    AT_SIGN
    BEGIN
    BREAK
    CLASS
    DOLLAR_SIGN
    ENSURE
    FOR
    IN
    LINE_COMMENT
    LOGIC_NOT
    NEXT
    NOT
    RETRY
    RW_ARROW
    SELF
    SEMICOLON
    SUPER
    TILDE
    UNDERSCORE
    UNTIL
    VERTICAL_BAR

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statement -> assignment
Rule 3     statement -> function
Rule 4     statement -> control
Rule 5     statement -> arithmetic
Rule 6     statements -> statement
Rule 7     statements -> statement statements
Rule 8     ids -> ID
Rule 9     ids -> ID COMMA ids
Rule 10    literal -> STRING
Rule 11    literal -> ID
Rule 12    literal -> boolean
Rule 13    literal -> numeric
Rule 14    literal -> range
Rule 15    literals -> literal
Rule 16    literals -> literal COMMA literals
Rule 17    boolean -> TRUE
Rule 18    boolean -> FALSE
Rule 19    numeric -> COMPLEX
Rule 20    numeric -> RATIONAL
Rule 21    numeric -> FLOAT
Rule 22    numeric -> INTEGER
Rule 23    value -> numeric
Rule 24    value -> ID
Rule 25    arithmetic -> value PLUS value
Rule 26    arithmetic -> value PLUS arithmetic
Rule 27    arithmetic -> value MINUS value
Rule 28    arithmetic -> value MINUS arithmetic
Rule 29    arithmetic -> value EXPO value
Rule 30    arithmetic -> value EXPO arithmetic
Rule 31    arithmetic -> value MULT value
Rule 32    arithmetic -> value MULT arithmetic
Rule 33    arithmetic -> value DIV value
Rule 34    arithmetic -> value DIV arithmetic
Rule 35    arithmetic -> value MODULO value
Rule 36    arithmetic -> value MODULO arithmetic
Rule 37    comparation -> literal EQUAL literal
Rule 38    comparation -> ID EQUAL literal
Rule 39    comparation -> literal EQUAL ID
Rule 40    comparation -> ID EQUAL ID
Rule 41    comparation -> literal NOT_EQ literal
Rule 42    comparation -> ID NOT_EQ literal
Rule 43    comparation -> literal NOT_EQ ID
Rule 44    comparation -> ID NOT_EQ ID
Rule 45    comparation -> literal LT_OR_EQ literal
Rule 46    comparation -> ID LT_OR_EQ literal
Rule 47    comparation -> literal LT_OR_EQ ID
Rule 48    comparation -> ID LT_OR_EQ ID
Rule 49    comparation -> literal GT_OR_EQ literal
Rule 50    comparation -> ID GT_OR_EQ literal
Rule 51    comparation -> literal GT_OR_EQ ID
Rule 52    comparation -> ID GT_OR_EQ ID
Rule 53    comparation -> literal LESS_THAN literal
Rule 54    comparation -> ID LESS_THAN literal
Rule 55    comparation -> literal LESS_THAN ID
Rule 56    comparation -> ID LESS_THAN ID
Rule 57    comparation -> literal GREATER_THAN literal
Rule 58    comparation -> ID GREATER_THAN literal
Rule 59    comparation -> literal GREATER_THAN ID
Rule 60    comparation -> ID GREATER_THAN ID
Rule 61    comparations -> comparation AND comparation
Rule 62    comparations -> comparation LOGIC_AND comparation
Rule 63    comparations -> comparation AND comparations
Rule 64    comparations -> comparation LOGIC_AND comparations
Rule 65    comparations -> comparation OR comparation
Rule 66    comparations -> comparation LOGIC_OR comparation
Rule 67    comparations -> comparation OR comparations
Rule 68    comparations -> comparation LOGIC_OR comparations
Rule 69    comparations -> boolean AND boolean
Rule 70    comparations -> boolean LOGIC_AND boolean
Rule 71    comparations -> boolean OR boolean
Rule 72    comparations -> boolean LOGIC_OR boolean
Rule 73    assignment -> ID ASSIGN ID
Rule 74    assignment -> ID ASSIGN NIL
Rule 75    assignment -> ID ASSIGN struc
Rule 76    assignment -> ID ASSIGN literal
Rule 77    assignment -> ID ASSIGN arithmetic
Rule 78    assignment -> strucArray ASSIGN ID
Rule 79    assignment -> strucArray ASSIGN strucArray
Rule 80    assignment -> ID ADD_ASSIGN ID
Rule 81    assignment -> ID ADD_ASSIGN numeric
Rule 82    assignment -> ID SUBS_ASSIGN ID
Rule 83    assignment -> ID SUBS_ASSIGN numeric
Rule 84    assignment -> ID MULT_ASSIGN ID
Rule 85    assignment -> ID MULT_ASSIGN numeric
Rule 86    assignment -> ID DIV_ASSIGN ID
Rule 87    assignment -> ID DIV_ASSIGN numeric
Rule 88    assignment -> ID MOD_ASSIGN ID
Rule 89    assignment -> ID MOD_ASSIGN numeric
Rule 90    function -> DEF ID L_PAREN literals R_PAREN statements END
Rule 91    function -> DEF ID L_PAREN R_PAREN statements END
Rule 92    function -> DEF ID statements END
Rule 93    function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END
Rule 94    function -> DEF ID L_PAREN R_PAREN statements RETURN ID END
Rule 95    function -> DEF ID statements RETURN ID END
Rule 96    function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END
Rule 97    function -> DEF ID L_PAREN R_PAREN statements RETURN literal END
Rule 98    function -> DEF ID statements RETURN literal END
Rule 99    else -> ELSE boolean statements
Rule 100   else -> ELSE comparation statements
Rule 101   else -> ELSE comparations statements
Rule 102   elsif -> ELSIF boolean statements
Rule 103   elsif -> ELSIF comparation statements
Rule 104   elsif -> ELSIF comparations statements
Rule 105   elses -> else
Rule 106   elses -> elsif elses
Rule 107   control -> IF boolean statements END
Rule 108   control -> IF comparation statements END
Rule 109   control -> IF comparations statements END
Rule 110   control -> IF boolean statements elses END
Rule 111   control -> IF comparation statements elses END
Rule 112   control -> IF comparations statements elses END
Rule 113   control -> UNLESS boolean COLON statements END
Rule 114   control -> UNLESS comparation COLON statements END
Rule 115   control -> UNLESS comparations COLON statements END
Rule 116   control -> UNLESS boolean statements elses END
Rule 117   control -> UNLESS comparation statements elses END
Rule 118   control -> UNLESS comparations statements elses END
Rule 119   when -> WHEN literal
Rule 120   when -> WHEN literal THEN
Rule 121   when -> WHEN comparation
Rule 122   when -> WHEN comparations
Rule 123   whens -> when
Rule 124   whens -> when whens
Rule 125   control -> CASE ID whens else END
Rule 126   control -> CASE ID whens END
Rule 127   control -> WHILE boolean DO statements END
Rule 128   control -> WHILE comparation DO statements END
Rule 129   control -> WHILE comparations DO statements END
Rule 130   element -> ID
Rule 131   element -> STRING
Rule 132   element -> boolean
Rule 133   element -> numeric
Rule 134   element -> range
Rule 135   elements -> element
Rule 136   elements -> element COMMA elements
Rule 137   strucArray -> ID L_BRACKET ID R_BRACKET
Rule 138   strucArray -> ID L_BRACKET arithmetic R_BRACKET
Rule 139   array -> L_BRACKET literals R_BRACKET
Rule 140   array -> L_BRACKET ids R_BRACKET
Rule 141   array -> L_BRACKET elements R_BRACKET
Rule 142   arrays -> array
Rule 143   arrays -> array COMMA arrays
Rule 144   struc -> strucMatrix
Rule 145   struc -> strucSet
Rule 146   struc -> strucHash
Rule 147   struc -> strucArray
Rule 148   strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET
Rule 149   strucSet -> SET PERIOD NEW
Rule 150   strucSet -> SET PERIOD NEW L_PAREN R_PAREN
Rule 151   strucSet -> SET PERIOD NEW L_PAREN array R_PAREN
Rule 152   strucSet -> SET array
Rule 153   strucHash -> HASH PERIOD NEW
Rule 154   strucHash -> HASH PERIOD NEW L_BRACE R_BRACE
Rule 155   strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE
Rule 156   strucHash -> HASH array
Rule 157   hashelem -> COLON ID RW_DOUBLE_ARROW literal
Rule 158   hashelem -> ID COLON literal
Rule 159   hashelem -> STRING COLON literal
Rule 160   hashelems -> hashelem COMMA hashelem
Rule 161   hashelems -> hashelem COMMA hashelems
Rule 162   range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
Rule 163   range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
Rule 164   range -> INTEGER ELLIPSIS INTEGER
Rule 165   range -> INTEGER DOUBLE_PERIOD INTEGER
Rule 166   range -> L_PAREN STRING ELLIPSIS STRING
Rule 167   range -> L_PAREN STRING DOUBLE_PERIOD STRING
Rule 168   range -> STRING ELLIPSIS STRING
Rule 169   range -> STRING DOUBLE_PERIOD STRING

Terminals, with rules where they appear

ADD_ASSIGN           : 80 81
AMPERSAND            : 
AND                  : 61 63 69
ARRAY                : 
ASSIGN               : 73 74 75 76 77 78 79
AT_SIGN              : 
BEGIN                : 
BREAK                : 
CASE                 : 125 126
CLASS                : 
COLON                : 113 114 115 157 158 159
COMMA                : 9 16 136 143 160 161
COMPLEX              : 19
DEF                  : 90 91 92 93 94 95 96 97 98
DIV                  : 33 34
DIV_ASSIGN           : 86 87
DO                   : 127 128 129
DOLLAR_SIGN          : 
DOUBLE_PERIOD        : 163 165 167 169
ELLIPSIS             : 162 164 166 168
ELSE                 : 99 100 101
ELSIF                : 102 103 104
END                  : 90 91 92 93 94 95 96 97 98 107 108 109 110 111 112 113 114 115 116 117 118 125 126 127 128 129
ENSURE               : 
EQUAL                : 37 38 39 40
EXPO                 : 29 30
FALSE                : 18
FLOAT                : 21
FOR                  : 
GREATER_THAN         : 57 58 59 60
GT_OR_EQ             : 49 50 51 52
HASH                 : 153 154 155 156
ID                   : 8 9 11 24 38 39 40 40 42 43 44 44 46 47 48 48 50 51 52 52 54 55 56 56 58 59 60 60 73 73 74 75 76 77 78 80 80 81 82 82 83 84 84 85 86 86 87 88 88 89 90 91 92 93 93 94 94 95 95 96 97 98 125 126 130 137 137 138 157 158
IF                   : 107 108 109 110 111 112
IN                   : 
INTEGER              : 22 162 162 163 163 164 164 165 165
LESS_THAN            : 53 54 55 56
LINE_COMMENT         : 
LOGIC_AND            : 62 64 70
LOGIC_NOT            : 
LOGIC_OR             : 66 68 72
LT_OR_EQ             : 45 46 47 48
L_BRACE              : 154 155
L_BRACKET            : 137 138 139 140 141 148
L_PAREN              : 90 91 93 94 96 97 150 151 162 163 166 167
MATRIX               : 148
MINUS                : 27 28
MODULO               : 35 36
MOD_ASSIGN           : 88 89
MULT                 : 31 32
MULT_ASSIGN          : 84 85
NEW                  : 149 150 151 153 154 155
NEXT                 : 
NIL                  : 74
NOT                  : 
NOT_EQ               : 41 42 43 44
OR                   : 65 67 71
PERIOD               : 149 150 151 153 154 155
PLUS                 : 25 26
RATIONAL             : 20
RETRY                : 
RETURN               : 93 94 95 96 97 98
RW_ARROW             : 
RW_DOUBLE_ARROW      : 157
R_BRACE              : 154 155
R_BRACKET            : 137 138 139 140 141 148
R_PAREN              : 90 91 93 94 96 97 150 151 162 163
SELF                 : 
SEMICOLON            : 
SET                  : 149 150 151 152
STRING               : 10 131 159 166 166 167 167 168 168 169 169
SUBS_ASSIGN          : 82 83
SUPER                : 
THEN                 : 120
TILDE                : 
TRUE                 : 17
UNDERSCORE           : 
UNLESS               : 113 114 115 116 117 118
UNTIL                : 
VERTICAL_BAR         : 
WHEN                 : 119 120 121 122
WHILE                : 127 128 129
error                : 

Nonterminals, with rules where they appear

arithmetic           : 5 26 28 30 32 34 36 77 138
array                : 142 143 151 152 156
arrays               : 143 148
assignment           : 2
boolean              : 12 69 69 70 70 71 71 72 72 99 102 107 110 113 116 127 132
comparation          : 61 61 62 62 63 64 65 65 66 66 67 68 100 103 108 111 114 117 121 128
comparations         : 63 64 67 68 101 104 109 112 115 118 122 129
control              : 4
element              : 135 136
elements             : 136 141
else                 : 105 125
elses                : 106 110 111 112 116 117 118
elsif                : 106
function             : 3
hashelem             : 160 160 161
hashelems            : 155 161
ids                  : 9 140
init                 : 0
literal              : 15 16 37 37 38 39 41 41 42 43 45 45 46 47 49 49 50 51 53 53 54 55 57 57 58 59 76 96 97 98 119 120 157 158 159
literals             : 16 90 93 96 139
numeric              : 13 23 81 83 85 87 89 133
range                : 14 134
statement            : 6 7
statements           : 1 7 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 107 108 109 110 111 112 113 114 115 116 117 118 127 128 129
struc                : 75
strucArray           : 78 79 79 147
strucHash            : 146
strucMatrix          : 144
strucSet             : 145
value                : 25 25 26 27 27 28 29 29 30 31 31 32 33 33 34 35 35 36
when                 : 123 124
whens                : 124 125 126

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    init                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .

    $end            reduce using rule 1 (init -> statements .)


state 3

    (6) statements -> statement .
    (7) statements -> statement . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    $end            reduce using rule 6 (statements -> statement .)
    END             reduce using rule 6 (statements -> statement .)
    RETURN          reduce using rule 6 (statements -> statement .)
    ELSE            reduce using rule 6 (statements -> statement .)
    ELSIF           reduce using rule 6 (statements -> statement .)
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statement                      shift and go to state 3
    statements                     shift and go to state 21
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 4

    (2) statement -> assignment .

    ID              reduce using rule 2 (statement -> assignment .)
    DEF             reduce using rule 2 (statement -> assignment .)
    IF              reduce using rule 2 (statement -> assignment .)
    UNLESS          reduce using rule 2 (statement -> assignment .)
    CASE            reduce using rule 2 (statement -> assignment .)
    WHILE           reduce using rule 2 (statement -> assignment .)
    COMPLEX         reduce using rule 2 (statement -> assignment .)
    RATIONAL        reduce using rule 2 (statement -> assignment .)
    FLOAT           reduce using rule 2 (statement -> assignment .)
    INTEGER         reduce using rule 2 (statement -> assignment .)
    $end            reduce using rule 2 (statement -> assignment .)
    END             reduce using rule 2 (statement -> assignment .)
    RETURN          reduce using rule 2 (statement -> assignment .)
    ELSE            reduce using rule 2 (statement -> assignment .)
    ELSIF           reduce using rule 2 (statement -> assignment .)


state 5

    (3) statement -> function .

    ID              reduce using rule 3 (statement -> function .)
    DEF             reduce using rule 3 (statement -> function .)
    IF              reduce using rule 3 (statement -> function .)
    UNLESS          reduce using rule 3 (statement -> function .)
    CASE            reduce using rule 3 (statement -> function .)
    WHILE           reduce using rule 3 (statement -> function .)
    COMPLEX         reduce using rule 3 (statement -> function .)
    RATIONAL        reduce using rule 3 (statement -> function .)
    FLOAT           reduce using rule 3 (statement -> function .)
    INTEGER         reduce using rule 3 (statement -> function .)
    $end            reduce using rule 3 (statement -> function .)
    END             reduce using rule 3 (statement -> function .)
    RETURN          reduce using rule 3 (statement -> function .)
    ELSE            reduce using rule 3 (statement -> function .)
    ELSIF           reduce using rule 3 (statement -> function .)


state 6

    (4) statement -> control .

    ID              reduce using rule 4 (statement -> control .)
    DEF             reduce using rule 4 (statement -> control .)
    IF              reduce using rule 4 (statement -> control .)
    UNLESS          reduce using rule 4 (statement -> control .)
    CASE            reduce using rule 4 (statement -> control .)
    WHILE           reduce using rule 4 (statement -> control .)
    COMPLEX         reduce using rule 4 (statement -> control .)
    RATIONAL        reduce using rule 4 (statement -> control .)
    FLOAT           reduce using rule 4 (statement -> control .)
    INTEGER         reduce using rule 4 (statement -> control .)
    $end            reduce using rule 4 (statement -> control .)
    END             reduce using rule 4 (statement -> control .)
    RETURN          reduce using rule 4 (statement -> control .)
    ELSE            reduce using rule 4 (statement -> control .)
    ELSIF           reduce using rule 4 (statement -> control .)


state 7

    (5) statement -> arithmetic .

    ID              reduce using rule 5 (statement -> arithmetic .)
    DEF             reduce using rule 5 (statement -> arithmetic .)
    IF              reduce using rule 5 (statement -> arithmetic .)
    UNLESS          reduce using rule 5 (statement -> arithmetic .)
    CASE            reduce using rule 5 (statement -> arithmetic .)
    WHILE           reduce using rule 5 (statement -> arithmetic .)
    COMPLEX         reduce using rule 5 (statement -> arithmetic .)
    RATIONAL        reduce using rule 5 (statement -> arithmetic .)
    FLOAT           reduce using rule 5 (statement -> arithmetic .)
    INTEGER         reduce using rule 5 (statement -> arithmetic .)
    $end            reduce using rule 5 (statement -> arithmetic .)
    END             reduce using rule 5 (statement -> arithmetic .)
    RETURN          reduce using rule 5 (statement -> arithmetic .)
    ELSE            reduce using rule 5 (statement -> arithmetic .)
    ELSIF           reduce using rule 5 (statement -> arithmetic .)


state 8

    (73) assignment -> ID . ASSIGN ID
    (74) assignment -> ID . ASSIGN NIL
    (75) assignment -> ID . ASSIGN struc
    (76) assignment -> ID . ASSIGN literal
    (77) assignment -> ID . ASSIGN arithmetic
    (80) assignment -> ID . ADD_ASSIGN ID
    (81) assignment -> ID . ADD_ASSIGN numeric
    (82) assignment -> ID . SUBS_ASSIGN ID
    (83) assignment -> ID . SUBS_ASSIGN numeric
    (84) assignment -> ID . MULT_ASSIGN ID
    (85) assignment -> ID . MULT_ASSIGN numeric
    (86) assignment -> ID . DIV_ASSIGN ID
    (87) assignment -> ID . DIV_ASSIGN numeric
    (88) assignment -> ID . MOD_ASSIGN ID
    (89) assignment -> ID . MOD_ASSIGN numeric
    (137) strucArray -> ID . L_BRACKET ID R_BRACKET
    (138) strucArray -> ID . L_BRACKET arithmetic R_BRACKET
    (24) value -> ID .

    ASSIGN          shift and go to state 22
    ADD_ASSIGN      shift and go to state 23
    SUBS_ASSIGN     shift and go to state 24
    MULT_ASSIGN     shift and go to state 25
    DIV_ASSIGN      shift and go to state 26
    MOD_ASSIGN      shift and go to state 27
    L_BRACKET       shift and go to state 28
    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    EXPO            reduce using rule 24 (value -> ID .)
    MULT            reduce using rule 24 (value -> ID .)
    DIV             reduce using rule 24 (value -> ID .)
    MODULO          reduce using rule 24 (value -> ID .)


state 9

    (78) assignment -> strucArray . ASSIGN ID
    (79) assignment -> strucArray . ASSIGN strucArray

    ASSIGN          shift and go to state 29


state 10

    (23) value -> numeric .

    PLUS            reduce using rule 23 (value -> numeric .)
    MINUS           reduce using rule 23 (value -> numeric .)
    EXPO            reduce using rule 23 (value -> numeric .)
    MULT            reduce using rule 23 (value -> numeric .)
    DIV             reduce using rule 23 (value -> numeric .)
    MODULO          reduce using rule 23 (value -> numeric .)
    ID              reduce using rule 23 (value -> numeric .)
    DEF             reduce using rule 23 (value -> numeric .)
    IF              reduce using rule 23 (value -> numeric .)
    UNLESS          reduce using rule 23 (value -> numeric .)
    CASE            reduce using rule 23 (value -> numeric .)
    WHILE           reduce using rule 23 (value -> numeric .)
    COMPLEX         reduce using rule 23 (value -> numeric .)
    RATIONAL        reduce using rule 23 (value -> numeric .)
    FLOAT           reduce using rule 23 (value -> numeric .)
    INTEGER         reduce using rule 23 (value -> numeric .)
    $end            reduce using rule 23 (value -> numeric .)
    END             reduce using rule 23 (value -> numeric .)
    RETURN          reduce using rule 23 (value -> numeric .)
    ELSE            reduce using rule 23 (value -> numeric .)
    ELSIF           reduce using rule 23 (value -> numeric .)
    R_BRACKET       reduce using rule 23 (value -> numeric .)


state 11

    (90) function -> DEF . ID L_PAREN literals R_PAREN statements END
    (91) function -> DEF . ID L_PAREN R_PAREN statements END
    (92) function -> DEF . ID statements END
    (93) function -> DEF . ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> DEF . ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> DEF . ID statements RETURN ID END
    (96) function -> DEF . ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> DEF . ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> DEF . ID statements RETURN literal END

    ID              shift and go to state 30


state 12

    (107) control -> IF . boolean statements END
    (108) control -> IF . comparation statements END
    (109) control -> IF . comparations statements END
    (110) control -> IF . boolean statements elses END
    (111) control -> IF . comparation statements elses END
    (112) control -> IF . comparations statements elses END
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 37
    STRING          shift and go to state 38
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    boolean                        shift and go to state 31
    comparation                    shift and go to state 32
    comparations                   shift and go to state 33
    literal                        shift and go to state 36
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 13

    (113) control -> UNLESS . boolean COLON statements END
    (114) control -> UNLESS . comparation COLON statements END
    (115) control -> UNLESS . comparations COLON statements END
    (116) control -> UNLESS . boolean statements elses END
    (117) control -> UNLESS . comparation statements elses END
    (118) control -> UNLESS . comparations statements elses END
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 37
    STRING          shift and go to state 38
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    boolean                        shift and go to state 43
    comparation                    shift and go to state 44
    comparations                   shift and go to state 45
    literal                        shift and go to state 36
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 14

    (125) control -> CASE . ID whens else END
    (126) control -> CASE . ID whens END

    ID              shift and go to state 46


state 15

    (127) control -> WHILE . boolean DO statements END
    (128) control -> WHILE . comparation DO statements END
    (129) control -> WHILE . comparations DO statements END
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 37
    STRING          shift and go to state 38
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    boolean                        shift and go to state 47
    comparation                    shift and go to state 48
    comparations                   shift and go to state 49
    literal                        shift and go to state 36
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 16

    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXPO            shift and go to state 52
    MULT            shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 17

    (19) numeric -> COMPLEX .

    PLUS            reduce using rule 19 (numeric -> COMPLEX .)
    MINUS           reduce using rule 19 (numeric -> COMPLEX .)
    EXPO            reduce using rule 19 (numeric -> COMPLEX .)
    MULT            reduce using rule 19 (numeric -> COMPLEX .)
    DIV             reduce using rule 19 (numeric -> COMPLEX .)
    MODULO          reduce using rule 19 (numeric -> COMPLEX .)
    EQUAL           reduce using rule 19 (numeric -> COMPLEX .)
    NOT_EQ          reduce using rule 19 (numeric -> COMPLEX .)
    LT_OR_EQ        reduce using rule 19 (numeric -> COMPLEX .)
    GT_OR_EQ        reduce using rule 19 (numeric -> COMPLEX .)
    LESS_THAN       reduce using rule 19 (numeric -> COMPLEX .)
    GREATER_THAN    reduce using rule 19 (numeric -> COMPLEX .)
    ID              reduce using rule 19 (numeric -> COMPLEX .)
    DEF             reduce using rule 19 (numeric -> COMPLEX .)
    IF              reduce using rule 19 (numeric -> COMPLEX .)
    UNLESS          reduce using rule 19 (numeric -> COMPLEX .)
    CASE            reduce using rule 19 (numeric -> COMPLEX .)
    WHILE           reduce using rule 19 (numeric -> COMPLEX .)
    COMPLEX         reduce using rule 19 (numeric -> COMPLEX .)
    RATIONAL        reduce using rule 19 (numeric -> COMPLEX .)
    FLOAT           reduce using rule 19 (numeric -> COMPLEX .)
    INTEGER         reduce using rule 19 (numeric -> COMPLEX .)
    $end            reduce using rule 19 (numeric -> COMPLEX .)
    END             reduce using rule 19 (numeric -> COMPLEX .)
    RETURN          reduce using rule 19 (numeric -> COMPLEX .)
    ELSE            reduce using rule 19 (numeric -> COMPLEX .)
    ELSIF           reduce using rule 19 (numeric -> COMPLEX .)
    R_BRACKET       reduce using rule 19 (numeric -> COMPLEX .)
    COMMA           reduce using rule 19 (numeric -> COMPLEX .)
    R_PAREN         reduce using rule 19 (numeric -> COMPLEX .)
    AND             reduce using rule 19 (numeric -> COMPLEX .)
    LOGIC_AND       reduce using rule 19 (numeric -> COMPLEX .)
    OR              reduce using rule 19 (numeric -> COMPLEX .)
    LOGIC_OR        reduce using rule 19 (numeric -> COMPLEX .)
    COLON           reduce using rule 19 (numeric -> COMPLEX .)
    DO              reduce using rule 19 (numeric -> COMPLEX .)
    WHEN            reduce using rule 19 (numeric -> COMPLEX .)
    THEN            reduce using rule 19 (numeric -> COMPLEX .)
    R_BRACE         reduce using rule 19 (numeric -> COMPLEX .)


state 18

    (20) numeric -> RATIONAL .

    PLUS            reduce using rule 20 (numeric -> RATIONAL .)
    MINUS           reduce using rule 20 (numeric -> RATIONAL .)
    EXPO            reduce using rule 20 (numeric -> RATIONAL .)
    MULT            reduce using rule 20 (numeric -> RATIONAL .)
    DIV             reduce using rule 20 (numeric -> RATIONAL .)
    MODULO          reduce using rule 20 (numeric -> RATIONAL .)
    EQUAL           reduce using rule 20 (numeric -> RATIONAL .)
    NOT_EQ          reduce using rule 20 (numeric -> RATIONAL .)
    LT_OR_EQ        reduce using rule 20 (numeric -> RATIONAL .)
    GT_OR_EQ        reduce using rule 20 (numeric -> RATIONAL .)
    LESS_THAN       reduce using rule 20 (numeric -> RATIONAL .)
    GREATER_THAN    reduce using rule 20 (numeric -> RATIONAL .)
    ID              reduce using rule 20 (numeric -> RATIONAL .)
    DEF             reduce using rule 20 (numeric -> RATIONAL .)
    IF              reduce using rule 20 (numeric -> RATIONAL .)
    UNLESS          reduce using rule 20 (numeric -> RATIONAL .)
    CASE            reduce using rule 20 (numeric -> RATIONAL .)
    WHILE           reduce using rule 20 (numeric -> RATIONAL .)
    COMPLEX         reduce using rule 20 (numeric -> RATIONAL .)
    RATIONAL        reduce using rule 20 (numeric -> RATIONAL .)
    FLOAT           reduce using rule 20 (numeric -> RATIONAL .)
    INTEGER         reduce using rule 20 (numeric -> RATIONAL .)
    $end            reduce using rule 20 (numeric -> RATIONAL .)
    END             reduce using rule 20 (numeric -> RATIONAL .)
    RETURN          reduce using rule 20 (numeric -> RATIONAL .)
    ELSE            reduce using rule 20 (numeric -> RATIONAL .)
    ELSIF           reduce using rule 20 (numeric -> RATIONAL .)
    R_BRACKET       reduce using rule 20 (numeric -> RATIONAL .)
    COMMA           reduce using rule 20 (numeric -> RATIONAL .)
    R_PAREN         reduce using rule 20 (numeric -> RATIONAL .)
    AND             reduce using rule 20 (numeric -> RATIONAL .)
    LOGIC_AND       reduce using rule 20 (numeric -> RATIONAL .)
    OR              reduce using rule 20 (numeric -> RATIONAL .)
    LOGIC_OR        reduce using rule 20 (numeric -> RATIONAL .)
    COLON           reduce using rule 20 (numeric -> RATIONAL .)
    DO              reduce using rule 20 (numeric -> RATIONAL .)
    WHEN            reduce using rule 20 (numeric -> RATIONAL .)
    THEN            reduce using rule 20 (numeric -> RATIONAL .)
    R_BRACE         reduce using rule 20 (numeric -> RATIONAL .)


state 19

    (21) numeric -> FLOAT .

    PLUS            reduce using rule 21 (numeric -> FLOAT .)
    MINUS           reduce using rule 21 (numeric -> FLOAT .)
    EXPO            reduce using rule 21 (numeric -> FLOAT .)
    MULT            reduce using rule 21 (numeric -> FLOAT .)
    DIV             reduce using rule 21 (numeric -> FLOAT .)
    MODULO          reduce using rule 21 (numeric -> FLOAT .)
    EQUAL           reduce using rule 21 (numeric -> FLOAT .)
    NOT_EQ          reduce using rule 21 (numeric -> FLOAT .)
    LT_OR_EQ        reduce using rule 21 (numeric -> FLOAT .)
    GT_OR_EQ        reduce using rule 21 (numeric -> FLOAT .)
    LESS_THAN       reduce using rule 21 (numeric -> FLOAT .)
    GREATER_THAN    reduce using rule 21 (numeric -> FLOAT .)
    ID              reduce using rule 21 (numeric -> FLOAT .)
    DEF             reduce using rule 21 (numeric -> FLOAT .)
    IF              reduce using rule 21 (numeric -> FLOAT .)
    UNLESS          reduce using rule 21 (numeric -> FLOAT .)
    CASE            reduce using rule 21 (numeric -> FLOAT .)
    WHILE           reduce using rule 21 (numeric -> FLOAT .)
    COMPLEX         reduce using rule 21 (numeric -> FLOAT .)
    RATIONAL        reduce using rule 21 (numeric -> FLOAT .)
    FLOAT           reduce using rule 21 (numeric -> FLOAT .)
    INTEGER         reduce using rule 21 (numeric -> FLOAT .)
    $end            reduce using rule 21 (numeric -> FLOAT .)
    END             reduce using rule 21 (numeric -> FLOAT .)
    RETURN          reduce using rule 21 (numeric -> FLOAT .)
    ELSE            reduce using rule 21 (numeric -> FLOAT .)
    ELSIF           reduce using rule 21 (numeric -> FLOAT .)
    R_BRACKET       reduce using rule 21 (numeric -> FLOAT .)
    COMMA           reduce using rule 21 (numeric -> FLOAT .)
    R_PAREN         reduce using rule 21 (numeric -> FLOAT .)
    AND             reduce using rule 21 (numeric -> FLOAT .)
    LOGIC_AND       reduce using rule 21 (numeric -> FLOAT .)
    OR              reduce using rule 21 (numeric -> FLOAT .)
    LOGIC_OR        reduce using rule 21 (numeric -> FLOAT .)
    COLON           reduce using rule 21 (numeric -> FLOAT .)
    DO              reduce using rule 21 (numeric -> FLOAT .)
    WHEN            reduce using rule 21 (numeric -> FLOAT .)
    THEN            reduce using rule 21 (numeric -> FLOAT .)
    R_BRACE         reduce using rule 21 (numeric -> FLOAT .)


state 20

    (22) numeric -> INTEGER .

    PLUS            reduce using rule 22 (numeric -> INTEGER .)
    MINUS           reduce using rule 22 (numeric -> INTEGER .)
    EXPO            reduce using rule 22 (numeric -> INTEGER .)
    MULT            reduce using rule 22 (numeric -> INTEGER .)
    DIV             reduce using rule 22 (numeric -> INTEGER .)
    MODULO          reduce using rule 22 (numeric -> INTEGER .)
    ID              reduce using rule 22 (numeric -> INTEGER .)
    DEF             reduce using rule 22 (numeric -> INTEGER .)
    IF              reduce using rule 22 (numeric -> INTEGER .)
    UNLESS          reduce using rule 22 (numeric -> INTEGER .)
    CASE            reduce using rule 22 (numeric -> INTEGER .)
    WHILE           reduce using rule 22 (numeric -> INTEGER .)
    COMPLEX         reduce using rule 22 (numeric -> INTEGER .)
    RATIONAL        reduce using rule 22 (numeric -> INTEGER .)
    FLOAT           reduce using rule 22 (numeric -> INTEGER .)
    INTEGER         reduce using rule 22 (numeric -> INTEGER .)
    $end            reduce using rule 22 (numeric -> INTEGER .)
    END             reduce using rule 22 (numeric -> INTEGER .)
    RETURN          reduce using rule 22 (numeric -> INTEGER .)
    ELSE            reduce using rule 22 (numeric -> INTEGER .)
    ELSIF           reduce using rule 22 (numeric -> INTEGER .)
    R_BRACKET       reduce using rule 22 (numeric -> INTEGER .)


state 21

    (7) statements -> statement statements .

    $end            reduce using rule 7 (statements -> statement statements .)
    END             reduce using rule 7 (statements -> statement statements .)
    RETURN          reduce using rule 7 (statements -> statement statements .)
    ELSE            reduce using rule 7 (statements -> statement statements .)
    ELSIF           reduce using rule 7 (statements -> statement statements .)


state 22

    (73) assignment -> ID ASSIGN . ID
    (74) assignment -> ID ASSIGN . NIL
    (75) assignment -> ID ASSIGN . struc
    (76) assignment -> ID ASSIGN . literal
    (77) assignment -> ID ASSIGN . arithmetic
    (144) struc -> . strucMatrix
    (145) struc -> . strucSet
    (146) struc -> . strucHash
    (147) struc -> . strucArray
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (148) strucMatrix -> . MATRIX L_BRACKET arrays R_BRACKET
    (149) strucSet -> . SET PERIOD NEW
    (150) strucSet -> . SET PERIOD NEW L_PAREN R_PAREN
    (151) strucSet -> . SET PERIOD NEW L_PAREN array R_PAREN
    (152) strucSet -> . SET array
    (153) strucHash -> . HASH PERIOD NEW
    (154) strucHash -> . HASH PERIOD NEW L_BRACE R_BRACE
    (155) strucHash -> . HASH PERIOD NEW L_BRACE hashelems R_BRACE
    (156) strucHash -> . HASH array
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING
    (23) value -> . numeric
    (24) value -> . ID

    ID              shift and go to state 56
    NIL             shift and go to state 57
    STRING          shift and go to state 38
    MATRIX          shift and go to state 67
    SET             shift and go to state 68
    HASH            shift and go to state 69
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    struc                          shift and go to state 58
    literal                        shift and go to state 59
    arithmetic                     shift and go to state 60
    strucMatrix                    shift and go to state 61
    strucSet                       shift and go to state 62
    strucHash                      shift and go to state 63
    strucArray                     shift and go to state 64
    boolean                        shift and go to state 65
    numeric                        shift and go to state 66
    range                          shift and go to state 40
    value                          shift and go to state 16

state 23

    (80) assignment -> ID ADD_ASSIGN . ID
    (81) assignment -> ID ADD_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 70
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    numeric                        shift and go to state 71

state 24

    (82) assignment -> ID SUBS_ASSIGN . ID
    (83) assignment -> ID SUBS_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 72
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    numeric                        shift and go to state 73

state 25

    (84) assignment -> ID MULT_ASSIGN . ID
    (85) assignment -> ID MULT_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 74
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    numeric                        shift and go to state 75

state 26

    (86) assignment -> ID DIV_ASSIGN . ID
    (87) assignment -> ID DIV_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 76
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    numeric                        shift and go to state 77

state 27

    (88) assignment -> ID MOD_ASSIGN . ID
    (89) assignment -> ID MOD_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 78
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    numeric                        shift and go to state 79

state 28

    (137) strucArray -> ID L_BRACKET . ID R_BRACKET
    (138) strucArray -> ID L_BRACKET . arithmetic R_BRACKET
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 80
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    arithmetic                     shift and go to state 81
    value                          shift and go to state 16
    numeric                        shift and go to state 10

state 29

    (78) assignment -> strucArray ASSIGN . ID
    (79) assignment -> strucArray ASSIGN . strucArray
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET

    ID              shift and go to state 83

    strucArray                     shift and go to state 82

state 30

    (90) function -> DEF ID . L_PAREN literals R_PAREN statements END
    (91) function -> DEF ID . L_PAREN R_PAREN statements END
    (92) function -> DEF ID . statements END
    (93) function -> DEF ID . L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> DEF ID . L_PAREN R_PAREN statements RETURN ID END
    (95) function -> DEF ID . statements RETURN ID END
    (96) function -> DEF ID . L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> DEF ID . L_PAREN R_PAREN statements RETURN literal END
    (98) function -> DEF ID . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    L_PAREN         shift and go to state 84
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 85
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 31

    (107) control -> IF boolean . statements END
    (110) control -> IF boolean . statements elses END
    (69) comparations -> boolean . AND boolean
    (70) comparations -> boolean . LOGIC_AND boolean
    (71) comparations -> boolean . OR boolean
    (72) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 87
    LOGIC_AND       shift and go to state 88
    OR              shift and go to state 89
    LOGIC_OR        shift and go to state 90
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 86
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 32

    (108) control -> IF comparation . statements END
    (111) control -> IF comparation . statements elses END
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 91
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 33

    (109) control -> IF comparations . statements END
    (112) control -> IF comparations . statements elses END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 96
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 34

    (17) boolean -> TRUE .

    AND             reduce using rule 17 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 17 (boolean -> TRUE .)
    OR              reduce using rule 17 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 17 (boolean -> TRUE .)
    ID              reduce using rule 17 (boolean -> TRUE .)
    DEF             reduce using rule 17 (boolean -> TRUE .)
    IF              reduce using rule 17 (boolean -> TRUE .)
    UNLESS          reduce using rule 17 (boolean -> TRUE .)
    CASE            reduce using rule 17 (boolean -> TRUE .)
    WHILE           reduce using rule 17 (boolean -> TRUE .)
    COMPLEX         reduce using rule 17 (boolean -> TRUE .)
    RATIONAL        reduce using rule 17 (boolean -> TRUE .)
    FLOAT           reduce using rule 17 (boolean -> TRUE .)
    INTEGER         reduce using rule 17 (boolean -> TRUE .)
    EQUAL           reduce using rule 17 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 17 (boolean -> TRUE .)
    LT_OR_EQ        reduce using rule 17 (boolean -> TRUE .)
    GT_OR_EQ        reduce using rule 17 (boolean -> TRUE .)
    LESS_THAN       reduce using rule 17 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 17 (boolean -> TRUE .)
    COLON           reduce using rule 17 (boolean -> TRUE .)
    DO              reduce using rule 17 (boolean -> TRUE .)
    $end            reduce using rule 17 (boolean -> TRUE .)
    END             reduce using rule 17 (boolean -> TRUE .)
    RETURN          reduce using rule 17 (boolean -> TRUE .)
    ELSE            reduce using rule 17 (boolean -> TRUE .)
    ELSIF           reduce using rule 17 (boolean -> TRUE .)
    COMMA           reduce using rule 17 (boolean -> TRUE .)
    R_PAREN         reduce using rule 17 (boolean -> TRUE .)
    WHEN            reduce using rule 17 (boolean -> TRUE .)
    THEN            reduce using rule 17 (boolean -> TRUE .)
    R_BRACKET       reduce using rule 17 (boolean -> TRUE .)
    R_BRACE         reduce using rule 17 (boolean -> TRUE .)


state 35

    (18) boolean -> FALSE .

    AND             reduce using rule 18 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 18 (boolean -> FALSE .)
    OR              reduce using rule 18 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 18 (boolean -> FALSE .)
    ID              reduce using rule 18 (boolean -> FALSE .)
    DEF             reduce using rule 18 (boolean -> FALSE .)
    IF              reduce using rule 18 (boolean -> FALSE .)
    UNLESS          reduce using rule 18 (boolean -> FALSE .)
    CASE            reduce using rule 18 (boolean -> FALSE .)
    WHILE           reduce using rule 18 (boolean -> FALSE .)
    COMPLEX         reduce using rule 18 (boolean -> FALSE .)
    RATIONAL        reduce using rule 18 (boolean -> FALSE .)
    FLOAT           reduce using rule 18 (boolean -> FALSE .)
    INTEGER         reduce using rule 18 (boolean -> FALSE .)
    EQUAL           reduce using rule 18 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 18 (boolean -> FALSE .)
    LT_OR_EQ        reduce using rule 18 (boolean -> FALSE .)
    GT_OR_EQ        reduce using rule 18 (boolean -> FALSE .)
    LESS_THAN       reduce using rule 18 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 18 (boolean -> FALSE .)
    COLON           reduce using rule 18 (boolean -> FALSE .)
    DO              reduce using rule 18 (boolean -> FALSE .)
    $end            reduce using rule 18 (boolean -> FALSE .)
    END             reduce using rule 18 (boolean -> FALSE .)
    RETURN          reduce using rule 18 (boolean -> FALSE .)
    ELSE            reduce using rule 18 (boolean -> FALSE .)
    ELSIF           reduce using rule 18 (boolean -> FALSE .)
    COMMA           reduce using rule 18 (boolean -> FALSE .)
    R_PAREN         reduce using rule 18 (boolean -> FALSE .)
    WHEN            reduce using rule 18 (boolean -> FALSE .)
    THEN            reduce using rule 18 (boolean -> FALSE .)
    R_BRACKET       reduce using rule 18 (boolean -> FALSE .)
    R_BRACE         reduce using rule 18 (boolean -> FALSE .)


state 36

    (37) comparation -> literal . EQUAL literal
    (39) comparation -> literal . EQUAL ID
    (41) comparation -> literal . NOT_EQ literal
    (43) comparation -> literal . NOT_EQ ID
    (45) comparation -> literal . LT_OR_EQ literal
    (47) comparation -> literal . LT_OR_EQ ID
    (49) comparation -> literal . GT_OR_EQ literal
    (51) comparation -> literal . GT_OR_EQ ID
    (53) comparation -> literal . LESS_THAN literal
    (55) comparation -> literal . LESS_THAN ID
    (57) comparation -> literal . GREATER_THAN literal
    (59) comparation -> literal . GREATER_THAN ID

    EQUAL           shift and go to state 97
    NOT_EQ          shift and go to state 98
    LT_OR_EQ        shift and go to state 99
    GT_OR_EQ        shift and go to state 100
    LESS_THAN       shift and go to state 101
    GREATER_THAN    shift and go to state 102


state 37

    (38) comparation -> ID . EQUAL literal
    (40) comparation -> ID . EQUAL ID
    (42) comparation -> ID . NOT_EQ literal
    (44) comparation -> ID . NOT_EQ ID
    (46) comparation -> ID . LT_OR_EQ literal
    (48) comparation -> ID . LT_OR_EQ ID
    (50) comparation -> ID . GT_OR_EQ literal
    (52) comparation -> ID . GT_OR_EQ ID
    (54) comparation -> ID . LESS_THAN literal
    (56) comparation -> ID . LESS_THAN ID
    (58) comparation -> ID . GREATER_THAN literal
    (60) comparation -> ID . GREATER_THAN ID
    (11) literal -> ID .

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LT_OR_EQ resolved as shift
  ! shift/reduce conflict for GT_OR_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
    EQUAL           shift and go to state 103
    NOT_EQ          shift and go to state 104
    LT_OR_EQ        shift and go to state 105
    GT_OR_EQ        shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108

  ! EQUAL           [ reduce using rule 11 (literal -> ID .) ]
  ! NOT_EQ          [ reduce using rule 11 (literal -> ID .) ]
  ! LT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! GT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! LESS_THAN       [ reduce using rule 11 (literal -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 11 (literal -> ID .) ]


state 38

    (10) literal -> STRING .
    (168) range -> STRING . ELLIPSIS STRING
    (169) range -> STRING . DOUBLE_PERIOD STRING

    EQUAL           reduce using rule 10 (literal -> STRING .)
    NOT_EQ          reduce using rule 10 (literal -> STRING .)
    LT_OR_EQ        reduce using rule 10 (literal -> STRING .)
    GT_OR_EQ        reduce using rule 10 (literal -> STRING .)
    LESS_THAN       reduce using rule 10 (literal -> STRING .)
    GREATER_THAN    reduce using rule 10 (literal -> STRING .)
    ID              reduce using rule 10 (literal -> STRING .)
    DEF             reduce using rule 10 (literal -> STRING .)
    IF              reduce using rule 10 (literal -> STRING .)
    UNLESS          reduce using rule 10 (literal -> STRING .)
    CASE            reduce using rule 10 (literal -> STRING .)
    WHILE           reduce using rule 10 (literal -> STRING .)
    COMPLEX         reduce using rule 10 (literal -> STRING .)
    RATIONAL        reduce using rule 10 (literal -> STRING .)
    FLOAT           reduce using rule 10 (literal -> STRING .)
    INTEGER         reduce using rule 10 (literal -> STRING .)
    $end            reduce using rule 10 (literal -> STRING .)
    END             reduce using rule 10 (literal -> STRING .)
    RETURN          reduce using rule 10 (literal -> STRING .)
    ELSE            reduce using rule 10 (literal -> STRING .)
    ELSIF           reduce using rule 10 (literal -> STRING .)
    COMMA           reduce using rule 10 (literal -> STRING .)
    R_PAREN         reduce using rule 10 (literal -> STRING .)
    AND             reduce using rule 10 (literal -> STRING .)
    LOGIC_AND       reduce using rule 10 (literal -> STRING .)
    OR              reduce using rule 10 (literal -> STRING .)
    LOGIC_OR        reduce using rule 10 (literal -> STRING .)
    COLON           reduce using rule 10 (literal -> STRING .)
    DO              reduce using rule 10 (literal -> STRING .)
    WHEN            reduce using rule 10 (literal -> STRING .)
    THEN            reduce using rule 10 (literal -> STRING .)
    R_BRACKET       reduce using rule 10 (literal -> STRING .)
    R_BRACE         reduce using rule 10 (literal -> STRING .)
    ELLIPSIS        shift and go to state 109
    DOUBLE_PERIOD   shift and go to state 110


state 39

    (13) literal -> numeric .

    EQUAL           reduce using rule 13 (literal -> numeric .)
    NOT_EQ          reduce using rule 13 (literal -> numeric .)
    LT_OR_EQ        reduce using rule 13 (literal -> numeric .)
    GT_OR_EQ        reduce using rule 13 (literal -> numeric .)
    LESS_THAN       reduce using rule 13 (literal -> numeric .)
    GREATER_THAN    reduce using rule 13 (literal -> numeric .)
    COMMA           reduce using rule 13 (literal -> numeric .)
    R_PAREN         reduce using rule 13 (literal -> numeric .)
    AND             reduce using rule 13 (literal -> numeric .)
    LOGIC_AND       reduce using rule 13 (literal -> numeric .)
    OR              reduce using rule 13 (literal -> numeric .)
    LOGIC_OR        reduce using rule 13 (literal -> numeric .)
    ID              reduce using rule 13 (literal -> numeric .)
    DEF             reduce using rule 13 (literal -> numeric .)
    IF              reduce using rule 13 (literal -> numeric .)
    UNLESS          reduce using rule 13 (literal -> numeric .)
    CASE            reduce using rule 13 (literal -> numeric .)
    WHILE           reduce using rule 13 (literal -> numeric .)
    COMPLEX         reduce using rule 13 (literal -> numeric .)
    RATIONAL        reduce using rule 13 (literal -> numeric .)
    FLOAT           reduce using rule 13 (literal -> numeric .)
    INTEGER         reduce using rule 13 (literal -> numeric .)
    COLON           reduce using rule 13 (literal -> numeric .)
    DO              reduce using rule 13 (literal -> numeric .)
    WHEN            reduce using rule 13 (literal -> numeric .)
    END             reduce using rule 13 (literal -> numeric .)
    ELSE            reduce using rule 13 (literal -> numeric .)
    THEN            reduce using rule 13 (literal -> numeric .)
    R_BRACKET       reduce using rule 13 (literal -> numeric .)
    R_BRACE         reduce using rule 13 (literal -> numeric .)


state 40

    (14) literal -> range .

    EQUAL           reduce using rule 14 (literal -> range .)
    NOT_EQ          reduce using rule 14 (literal -> range .)
    LT_OR_EQ        reduce using rule 14 (literal -> range .)
    GT_OR_EQ        reduce using rule 14 (literal -> range .)
    LESS_THAN       reduce using rule 14 (literal -> range .)
    GREATER_THAN    reduce using rule 14 (literal -> range .)
    ID              reduce using rule 14 (literal -> range .)
    DEF             reduce using rule 14 (literal -> range .)
    IF              reduce using rule 14 (literal -> range .)
    UNLESS          reduce using rule 14 (literal -> range .)
    CASE            reduce using rule 14 (literal -> range .)
    WHILE           reduce using rule 14 (literal -> range .)
    COMPLEX         reduce using rule 14 (literal -> range .)
    RATIONAL        reduce using rule 14 (literal -> range .)
    FLOAT           reduce using rule 14 (literal -> range .)
    INTEGER         reduce using rule 14 (literal -> range .)
    $end            reduce using rule 14 (literal -> range .)
    END             reduce using rule 14 (literal -> range .)
    RETURN          reduce using rule 14 (literal -> range .)
    ELSE            reduce using rule 14 (literal -> range .)
    ELSIF           reduce using rule 14 (literal -> range .)
    COMMA           reduce using rule 14 (literal -> range .)
    R_PAREN         reduce using rule 14 (literal -> range .)
    AND             reduce using rule 14 (literal -> range .)
    LOGIC_AND       reduce using rule 14 (literal -> range .)
    OR              reduce using rule 14 (literal -> range .)
    LOGIC_OR        reduce using rule 14 (literal -> range .)
    COLON           reduce using rule 14 (literal -> range .)
    DO              reduce using rule 14 (literal -> range .)
    WHEN            reduce using rule 14 (literal -> range .)
    THEN            reduce using rule 14 (literal -> range .)
    R_BRACKET       reduce using rule 14 (literal -> range .)
    R_BRACE         reduce using rule 14 (literal -> range .)


state 41

    (22) numeric -> INTEGER .
    (164) range -> INTEGER . ELLIPSIS INTEGER
    (165) range -> INTEGER . DOUBLE_PERIOD INTEGER

    EQUAL           reduce using rule 22 (numeric -> INTEGER .)
    NOT_EQ          reduce using rule 22 (numeric -> INTEGER .)
    LT_OR_EQ        reduce using rule 22 (numeric -> INTEGER .)
    GT_OR_EQ        reduce using rule 22 (numeric -> INTEGER .)
    LESS_THAN       reduce using rule 22 (numeric -> INTEGER .)
    GREATER_THAN    reduce using rule 22 (numeric -> INTEGER .)
    ID              reduce using rule 22 (numeric -> INTEGER .)
    DEF             reduce using rule 22 (numeric -> INTEGER .)
    IF              reduce using rule 22 (numeric -> INTEGER .)
    UNLESS          reduce using rule 22 (numeric -> INTEGER .)
    CASE            reduce using rule 22 (numeric -> INTEGER .)
    WHILE           reduce using rule 22 (numeric -> INTEGER .)
    COMPLEX         reduce using rule 22 (numeric -> INTEGER .)
    RATIONAL        reduce using rule 22 (numeric -> INTEGER .)
    FLOAT           reduce using rule 22 (numeric -> INTEGER .)
    INTEGER         reduce using rule 22 (numeric -> INTEGER .)
    $end            reduce using rule 22 (numeric -> INTEGER .)
    END             reduce using rule 22 (numeric -> INTEGER .)
    RETURN          reduce using rule 22 (numeric -> INTEGER .)
    ELSE            reduce using rule 22 (numeric -> INTEGER .)
    ELSIF           reduce using rule 22 (numeric -> INTEGER .)
    PLUS            reduce using rule 22 (numeric -> INTEGER .)
    MINUS           reduce using rule 22 (numeric -> INTEGER .)
    EXPO            reduce using rule 22 (numeric -> INTEGER .)
    MULT            reduce using rule 22 (numeric -> INTEGER .)
    DIV             reduce using rule 22 (numeric -> INTEGER .)
    MODULO          reduce using rule 22 (numeric -> INTEGER .)
    COMMA           reduce using rule 22 (numeric -> INTEGER .)
    R_PAREN         reduce using rule 22 (numeric -> INTEGER .)
    AND             reduce using rule 22 (numeric -> INTEGER .)
    LOGIC_AND       reduce using rule 22 (numeric -> INTEGER .)
    OR              reduce using rule 22 (numeric -> INTEGER .)
    LOGIC_OR        reduce using rule 22 (numeric -> INTEGER .)
    COLON           reduce using rule 22 (numeric -> INTEGER .)
    DO              reduce using rule 22 (numeric -> INTEGER .)
    WHEN            reduce using rule 22 (numeric -> INTEGER .)
    THEN            reduce using rule 22 (numeric -> INTEGER .)
    R_BRACKET       reduce using rule 22 (numeric -> INTEGER .)
    R_BRACE         reduce using rule 22 (numeric -> INTEGER .)
    ELLIPSIS        shift and go to state 111
    DOUBLE_PERIOD   shift and go to state 112


state 42

    (162) range -> L_PAREN . INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> L_PAREN . INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (166) range -> L_PAREN . STRING ELLIPSIS STRING
    (167) range -> L_PAREN . STRING DOUBLE_PERIOD STRING

    INTEGER         shift and go to state 113
    STRING          shift and go to state 114


state 43

    (113) control -> UNLESS boolean . COLON statements END
    (116) control -> UNLESS boolean . statements elses END
    (69) comparations -> boolean . AND boolean
    (70) comparations -> boolean . LOGIC_AND boolean
    (71) comparations -> boolean . OR boolean
    (72) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    COLON           shift and go to state 115
    AND             shift and go to state 87
    LOGIC_AND       shift and go to state 88
    OR              shift and go to state 89
    LOGIC_OR        shift and go to state 90
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 116
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 44

    (114) control -> UNLESS comparation . COLON statements END
    (117) control -> UNLESS comparation . statements elses END
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    COLON           shift and go to state 117
    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 118
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 45

    (115) control -> UNLESS comparations . COLON statements END
    (118) control -> UNLESS comparations . statements elses END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    COLON           shift and go to state 119
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 120
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 46

    (125) control -> CASE ID . whens else END
    (126) control -> CASE ID . whens END
    (123) whens -> . when
    (124) whens -> . when whens
    (119) when -> . WHEN literal
    (120) when -> . WHEN literal THEN
    (121) when -> . WHEN comparation
    (122) when -> . WHEN comparations

    WHEN            shift and go to state 123

    whens                          shift and go to state 121
    when                           shift and go to state 122

state 47

    (127) control -> WHILE boolean . DO statements END
    (69) comparations -> boolean . AND boolean
    (70) comparations -> boolean . LOGIC_AND boolean
    (71) comparations -> boolean . OR boolean
    (72) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .

    DO              shift and go to state 124
    AND             shift and go to state 87
    LOGIC_AND       shift and go to state 88
    OR              shift and go to state 89
    LOGIC_OR        shift and go to state 90
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)


state 48

    (128) control -> WHILE comparation . DO statements END
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations

    DO              shift and go to state 125
    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95


state 49

    (129) control -> WHILE comparations . DO statements END

    DO              shift and go to state 126


state 50

    (25) arithmetic -> value PLUS . value
    (26) arithmetic -> value PLUS . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 129
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    value                          shift and go to state 127
    arithmetic                     shift and go to state 128
    numeric                        shift and go to state 10

state 51

    (27) arithmetic -> value MINUS . value
    (28) arithmetic -> value MINUS . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 129
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    value                          shift and go to state 130
    arithmetic                     shift and go to state 131
    numeric                        shift and go to state 10

state 52

    (29) arithmetic -> value EXPO . value
    (30) arithmetic -> value EXPO . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 129
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    value                          shift and go to state 132
    arithmetic                     shift and go to state 133
    numeric                        shift and go to state 10

state 53

    (31) arithmetic -> value MULT . value
    (32) arithmetic -> value MULT . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 129
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    value                          shift and go to state 134
    arithmetic                     shift and go to state 135
    numeric                        shift and go to state 10

state 54

    (33) arithmetic -> value DIV . value
    (34) arithmetic -> value DIV . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 129
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    value                          shift and go to state 136
    arithmetic                     shift and go to state 137
    numeric                        shift and go to state 10

state 55

    (35) arithmetic -> value MODULO . value
    (36) arithmetic -> value MODULO . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 129
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    value                          shift and go to state 138
    arithmetic                     shift and go to state 139
    numeric                        shift and go to state 10

state 56

    (73) assignment -> ID ASSIGN ID .
    (11) literal -> ID .
    (137) strucArray -> ID . L_BRACKET ID R_BRACKET
    (138) strucArray -> ID . L_BRACKET arithmetic R_BRACKET
    (24) value -> ID .

  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSIF resolved using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    $end            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    RETURN          reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)
    ELSIF           reduce using rule 11 (literal -> ID .)
    L_BRACKET       shift and go to state 28
    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    EXPO            reduce using rule 24 (value -> ID .)
    MULT            reduce using rule 24 (value -> ID .)
    DIV             reduce using rule 24 (value -> ID .)
    MODULO          reduce using rule 24 (value -> ID .)

  ! ID              [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! DEF             [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! IF              [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! UNLESS          [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! CASE            [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! WHILE           [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! COMPLEX         [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! RATIONAL        [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! FLOAT           [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! INTEGER         [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! $end            [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! END             [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! RETURN          [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! ELSE            [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]
  ! ELSIF           [ reduce using rule 73 (assignment -> ID ASSIGN ID .) ]


state 57

    (74) assignment -> ID ASSIGN NIL .

    ID              reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    DEF             reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    IF              reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    UNLESS          reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    CASE            reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    WHILE           reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    COMPLEX         reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    RATIONAL        reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    FLOAT           reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    INTEGER         reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    $end            reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    END             reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    RETURN          reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    ELSE            reduce using rule 74 (assignment -> ID ASSIGN NIL .)
    ELSIF           reduce using rule 74 (assignment -> ID ASSIGN NIL .)


state 58

    (75) assignment -> ID ASSIGN struc .

    ID              reduce using rule 75 (assignment -> ID ASSIGN struc .)
    DEF             reduce using rule 75 (assignment -> ID ASSIGN struc .)
    IF              reduce using rule 75 (assignment -> ID ASSIGN struc .)
    UNLESS          reduce using rule 75 (assignment -> ID ASSIGN struc .)
    CASE            reduce using rule 75 (assignment -> ID ASSIGN struc .)
    WHILE           reduce using rule 75 (assignment -> ID ASSIGN struc .)
    COMPLEX         reduce using rule 75 (assignment -> ID ASSIGN struc .)
    RATIONAL        reduce using rule 75 (assignment -> ID ASSIGN struc .)
    FLOAT           reduce using rule 75 (assignment -> ID ASSIGN struc .)
    INTEGER         reduce using rule 75 (assignment -> ID ASSIGN struc .)
    $end            reduce using rule 75 (assignment -> ID ASSIGN struc .)
    END             reduce using rule 75 (assignment -> ID ASSIGN struc .)
    RETURN          reduce using rule 75 (assignment -> ID ASSIGN struc .)
    ELSE            reduce using rule 75 (assignment -> ID ASSIGN struc .)
    ELSIF           reduce using rule 75 (assignment -> ID ASSIGN struc .)


state 59

    (76) assignment -> ID ASSIGN literal .

    ID              reduce using rule 76 (assignment -> ID ASSIGN literal .)
    DEF             reduce using rule 76 (assignment -> ID ASSIGN literal .)
    IF              reduce using rule 76 (assignment -> ID ASSIGN literal .)
    UNLESS          reduce using rule 76 (assignment -> ID ASSIGN literal .)
    CASE            reduce using rule 76 (assignment -> ID ASSIGN literal .)
    WHILE           reduce using rule 76 (assignment -> ID ASSIGN literal .)
    COMPLEX         reduce using rule 76 (assignment -> ID ASSIGN literal .)
    RATIONAL        reduce using rule 76 (assignment -> ID ASSIGN literal .)
    FLOAT           reduce using rule 76 (assignment -> ID ASSIGN literal .)
    INTEGER         reduce using rule 76 (assignment -> ID ASSIGN literal .)
    $end            reduce using rule 76 (assignment -> ID ASSIGN literal .)
    END             reduce using rule 76 (assignment -> ID ASSIGN literal .)
    RETURN          reduce using rule 76 (assignment -> ID ASSIGN literal .)
    ELSE            reduce using rule 76 (assignment -> ID ASSIGN literal .)
    ELSIF           reduce using rule 76 (assignment -> ID ASSIGN literal .)


state 60

    (77) assignment -> ID ASSIGN arithmetic .

    ID              reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    DEF             reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    IF              reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    UNLESS          reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    CASE            reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    WHILE           reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    COMPLEX         reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    RATIONAL        reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    FLOAT           reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    INTEGER         reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    $end            reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    END             reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    RETURN          reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    ELSE            reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)
    ELSIF           reduce using rule 77 (assignment -> ID ASSIGN arithmetic .)


state 61

    (144) struc -> strucMatrix .

    ID              reduce using rule 144 (struc -> strucMatrix .)
    DEF             reduce using rule 144 (struc -> strucMatrix .)
    IF              reduce using rule 144 (struc -> strucMatrix .)
    UNLESS          reduce using rule 144 (struc -> strucMatrix .)
    CASE            reduce using rule 144 (struc -> strucMatrix .)
    WHILE           reduce using rule 144 (struc -> strucMatrix .)
    COMPLEX         reduce using rule 144 (struc -> strucMatrix .)
    RATIONAL        reduce using rule 144 (struc -> strucMatrix .)
    FLOAT           reduce using rule 144 (struc -> strucMatrix .)
    INTEGER         reduce using rule 144 (struc -> strucMatrix .)
    $end            reduce using rule 144 (struc -> strucMatrix .)
    END             reduce using rule 144 (struc -> strucMatrix .)
    RETURN          reduce using rule 144 (struc -> strucMatrix .)
    ELSE            reduce using rule 144 (struc -> strucMatrix .)
    ELSIF           reduce using rule 144 (struc -> strucMatrix .)


state 62

    (145) struc -> strucSet .

    ID              reduce using rule 145 (struc -> strucSet .)
    DEF             reduce using rule 145 (struc -> strucSet .)
    IF              reduce using rule 145 (struc -> strucSet .)
    UNLESS          reduce using rule 145 (struc -> strucSet .)
    CASE            reduce using rule 145 (struc -> strucSet .)
    WHILE           reduce using rule 145 (struc -> strucSet .)
    COMPLEX         reduce using rule 145 (struc -> strucSet .)
    RATIONAL        reduce using rule 145 (struc -> strucSet .)
    FLOAT           reduce using rule 145 (struc -> strucSet .)
    INTEGER         reduce using rule 145 (struc -> strucSet .)
    $end            reduce using rule 145 (struc -> strucSet .)
    END             reduce using rule 145 (struc -> strucSet .)
    RETURN          reduce using rule 145 (struc -> strucSet .)
    ELSE            reduce using rule 145 (struc -> strucSet .)
    ELSIF           reduce using rule 145 (struc -> strucSet .)


state 63

    (146) struc -> strucHash .

    ID              reduce using rule 146 (struc -> strucHash .)
    DEF             reduce using rule 146 (struc -> strucHash .)
    IF              reduce using rule 146 (struc -> strucHash .)
    UNLESS          reduce using rule 146 (struc -> strucHash .)
    CASE            reduce using rule 146 (struc -> strucHash .)
    WHILE           reduce using rule 146 (struc -> strucHash .)
    COMPLEX         reduce using rule 146 (struc -> strucHash .)
    RATIONAL        reduce using rule 146 (struc -> strucHash .)
    FLOAT           reduce using rule 146 (struc -> strucHash .)
    INTEGER         reduce using rule 146 (struc -> strucHash .)
    $end            reduce using rule 146 (struc -> strucHash .)
    END             reduce using rule 146 (struc -> strucHash .)
    RETURN          reduce using rule 146 (struc -> strucHash .)
    ELSE            reduce using rule 146 (struc -> strucHash .)
    ELSIF           reduce using rule 146 (struc -> strucHash .)


state 64

    (147) struc -> strucArray .

    ID              reduce using rule 147 (struc -> strucArray .)
    DEF             reduce using rule 147 (struc -> strucArray .)
    IF              reduce using rule 147 (struc -> strucArray .)
    UNLESS          reduce using rule 147 (struc -> strucArray .)
    CASE            reduce using rule 147 (struc -> strucArray .)
    WHILE           reduce using rule 147 (struc -> strucArray .)
    COMPLEX         reduce using rule 147 (struc -> strucArray .)
    RATIONAL        reduce using rule 147 (struc -> strucArray .)
    FLOAT           reduce using rule 147 (struc -> strucArray .)
    INTEGER         reduce using rule 147 (struc -> strucArray .)
    $end            reduce using rule 147 (struc -> strucArray .)
    END             reduce using rule 147 (struc -> strucArray .)
    RETURN          reduce using rule 147 (struc -> strucArray .)
    ELSE            reduce using rule 147 (struc -> strucArray .)
    ELSIF           reduce using rule 147 (struc -> strucArray .)


state 65

    (12) literal -> boolean .

    ID              reduce using rule 12 (literal -> boolean .)
    DEF             reduce using rule 12 (literal -> boolean .)
    IF              reduce using rule 12 (literal -> boolean .)
    UNLESS          reduce using rule 12 (literal -> boolean .)
    CASE            reduce using rule 12 (literal -> boolean .)
    WHILE           reduce using rule 12 (literal -> boolean .)
    COMPLEX         reduce using rule 12 (literal -> boolean .)
    RATIONAL        reduce using rule 12 (literal -> boolean .)
    FLOAT           reduce using rule 12 (literal -> boolean .)
    INTEGER         reduce using rule 12 (literal -> boolean .)
    $end            reduce using rule 12 (literal -> boolean .)
    END             reduce using rule 12 (literal -> boolean .)
    RETURN          reduce using rule 12 (literal -> boolean .)
    ELSE            reduce using rule 12 (literal -> boolean .)
    ELSIF           reduce using rule 12 (literal -> boolean .)
    COMMA           reduce using rule 12 (literal -> boolean .)
    R_PAREN         reduce using rule 12 (literal -> boolean .)
    AND             reduce using rule 12 (literal -> boolean .)
    LOGIC_AND       reduce using rule 12 (literal -> boolean .)
    OR              reduce using rule 12 (literal -> boolean .)
    LOGIC_OR        reduce using rule 12 (literal -> boolean .)
    COLON           reduce using rule 12 (literal -> boolean .)
    DO              reduce using rule 12 (literal -> boolean .)
    WHEN            reduce using rule 12 (literal -> boolean .)
    R_BRACKET       reduce using rule 12 (literal -> boolean .)
    R_BRACE         reduce using rule 12 (literal -> boolean .)


state 66

    (13) literal -> numeric .
    (23) value -> numeric .

    ID              reduce using rule 13 (literal -> numeric .)
    DEF             reduce using rule 13 (literal -> numeric .)
    IF              reduce using rule 13 (literal -> numeric .)
    UNLESS          reduce using rule 13 (literal -> numeric .)
    CASE            reduce using rule 13 (literal -> numeric .)
    WHILE           reduce using rule 13 (literal -> numeric .)
    COMPLEX         reduce using rule 13 (literal -> numeric .)
    RATIONAL        reduce using rule 13 (literal -> numeric .)
    FLOAT           reduce using rule 13 (literal -> numeric .)
    INTEGER         reduce using rule 13 (literal -> numeric .)
    $end            reduce using rule 13 (literal -> numeric .)
    END             reduce using rule 13 (literal -> numeric .)
    RETURN          reduce using rule 13 (literal -> numeric .)
    ELSE            reduce using rule 13 (literal -> numeric .)
    ELSIF           reduce using rule 13 (literal -> numeric .)
    PLUS            reduce using rule 23 (value -> numeric .)
    MINUS           reduce using rule 23 (value -> numeric .)
    EXPO            reduce using rule 23 (value -> numeric .)
    MULT            reduce using rule 23 (value -> numeric .)
    DIV             reduce using rule 23 (value -> numeric .)
    MODULO          reduce using rule 23 (value -> numeric .)


state 67

    (148) strucMatrix -> MATRIX . L_BRACKET arrays R_BRACKET

    L_BRACKET       shift and go to state 140


state 68

    (149) strucSet -> SET . PERIOD NEW
    (150) strucSet -> SET . PERIOD NEW L_PAREN R_PAREN
    (151) strucSet -> SET . PERIOD NEW L_PAREN array R_PAREN
    (152) strucSet -> SET . array
    (139) array -> . L_BRACKET literals R_BRACKET
    (140) array -> . L_BRACKET ids R_BRACKET
    (141) array -> . L_BRACKET elements R_BRACKET

    PERIOD          shift and go to state 141
    L_BRACKET       shift and go to state 143

    array                          shift and go to state 142

state 69

    (153) strucHash -> HASH . PERIOD NEW
    (154) strucHash -> HASH . PERIOD NEW L_BRACE R_BRACE
    (155) strucHash -> HASH . PERIOD NEW L_BRACE hashelems R_BRACE
    (156) strucHash -> HASH . array
    (139) array -> . L_BRACKET literals R_BRACKET
    (140) array -> . L_BRACKET ids R_BRACKET
    (141) array -> . L_BRACKET elements R_BRACKET

    PERIOD          shift and go to state 144
    L_BRACKET       shift and go to state 143

    array                          shift and go to state 145

state 70

    (80) assignment -> ID ADD_ASSIGN ID .

    ID              reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    DEF             reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    IF              reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    UNLESS          reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    CASE            reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    WHILE           reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    COMPLEX         reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    RATIONAL        reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    FLOAT           reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    INTEGER         reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    $end            reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    END             reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    RETURN          reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    ELSE            reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)
    ELSIF           reduce using rule 80 (assignment -> ID ADD_ASSIGN ID .)


state 71

    (81) assignment -> ID ADD_ASSIGN numeric .

    ID              reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    DEF             reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    IF              reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    UNLESS          reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    CASE            reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    WHILE           reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    COMPLEX         reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    RATIONAL        reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    FLOAT           reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    INTEGER         reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    $end            reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    END             reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    RETURN          reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    ELSE            reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)
    ELSIF           reduce using rule 81 (assignment -> ID ADD_ASSIGN numeric .)


state 72

    (82) assignment -> ID SUBS_ASSIGN ID .

    ID              reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    DEF             reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    IF              reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    UNLESS          reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    CASE            reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    WHILE           reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    COMPLEX         reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    RATIONAL        reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    FLOAT           reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    INTEGER         reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    $end            reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    END             reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    RETURN          reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    ELSE            reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)
    ELSIF           reduce using rule 82 (assignment -> ID SUBS_ASSIGN ID .)


state 73

    (83) assignment -> ID SUBS_ASSIGN numeric .

    ID              reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    DEF             reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    IF              reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    UNLESS          reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    CASE            reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    WHILE           reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    COMPLEX         reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    RATIONAL        reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    FLOAT           reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    INTEGER         reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    $end            reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    END             reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    RETURN          reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    ELSE            reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)
    ELSIF           reduce using rule 83 (assignment -> ID SUBS_ASSIGN numeric .)


state 74

    (84) assignment -> ID MULT_ASSIGN ID .

    ID              reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    DEF             reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    IF              reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    UNLESS          reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    CASE            reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    WHILE           reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    COMPLEX         reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    RATIONAL        reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    FLOAT           reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    INTEGER         reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    $end            reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    END             reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    RETURN          reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    ELSE            reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)
    ELSIF           reduce using rule 84 (assignment -> ID MULT_ASSIGN ID .)


state 75

    (85) assignment -> ID MULT_ASSIGN numeric .

    ID              reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    DEF             reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    IF              reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    UNLESS          reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    CASE            reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    WHILE           reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    COMPLEX         reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    RATIONAL        reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    FLOAT           reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    INTEGER         reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    $end            reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    END             reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    RETURN          reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    ELSE            reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)
    ELSIF           reduce using rule 85 (assignment -> ID MULT_ASSIGN numeric .)


state 76

    (86) assignment -> ID DIV_ASSIGN ID .

    ID              reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    DEF             reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    IF              reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    UNLESS          reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    CASE            reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    WHILE           reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    COMPLEX         reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    RATIONAL        reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    FLOAT           reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    INTEGER         reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    $end            reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    END             reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    RETURN          reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    ELSE            reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)
    ELSIF           reduce using rule 86 (assignment -> ID DIV_ASSIGN ID .)


state 77

    (87) assignment -> ID DIV_ASSIGN numeric .

    ID              reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    DEF             reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    IF              reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    UNLESS          reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    CASE            reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    WHILE           reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    COMPLEX         reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    RATIONAL        reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    FLOAT           reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    INTEGER         reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    $end            reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    END             reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    RETURN          reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    ELSE            reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)
    ELSIF           reduce using rule 87 (assignment -> ID DIV_ASSIGN numeric .)


state 78

    (88) assignment -> ID MOD_ASSIGN ID .

    ID              reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    DEF             reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    IF              reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    UNLESS          reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    CASE            reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    WHILE           reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    COMPLEX         reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    RATIONAL        reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    FLOAT           reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    INTEGER         reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    $end            reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    END             reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    RETURN          reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    ELSE            reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)
    ELSIF           reduce using rule 88 (assignment -> ID MOD_ASSIGN ID .)


state 79

    (89) assignment -> ID MOD_ASSIGN numeric .

    ID              reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    DEF             reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    IF              reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    UNLESS          reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    CASE            reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    WHILE           reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    COMPLEX         reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    RATIONAL        reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    FLOAT           reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    INTEGER         reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    $end            reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    END             reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    RETURN          reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    ELSE            reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)
    ELSIF           reduce using rule 89 (assignment -> ID MOD_ASSIGN numeric .)


state 80

    (137) strucArray -> ID L_BRACKET ID . R_BRACKET
    (24) value -> ID .

    R_BRACKET       shift and go to state 146
    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    EXPO            reduce using rule 24 (value -> ID .)
    MULT            reduce using rule 24 (value -> ID .)
    DIV             reduce using rule 24 (value -> ID .)
    MODULO          reduce using rule 24 (value -> ID .)


state 81

    (138) strucArray -> ID L_BRACKET arithmetic . R_BRACKET

    R_BRACKET       shift and go to state 147


state 82

    (79) assignment -> strucArray ASSIGN strucArray .

    ID              reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    DEF             reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    IF              reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    UNLESS          reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    CASE            reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    WHILE           reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    COMPLEX         reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    RATIONAL        reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    FLOAT           reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    INTEGER         reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    $end            reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    END             reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    RETURN          reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    ELSE            reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)
    ELSIF           reduce using rule 79 (assignment -> strucArray ASSIGN strucArray .)


state 83

    (78) assignment -> strucArray ASSIGN ID .
    (137) strucArray -> ID . L_BRACKET ID R_BRACKET
    (138) strucArray -> ID . L_BRACKET arithmetic R_BRACKET

    ID              reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    DEF             reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    IF              reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    UNLESS          reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    CASE            reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    WHILE           reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    COMPLEX         reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    RATIONAL        reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    FLOAT           reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    INTEGER         reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    $end            reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    END             reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    RETURN          reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    ELSE            reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    ELSIF           reduce using rule 78 (assignment -> strucArray ASSIGN ID .)
    L_BRACKET       shift and go to state 28


state 84

    (90) function -> DEF ID L_PAREN . literals R_PAREN statements END
    (91) function -> DEF ID L_PAREN . R_PAREN statements END
    (93) function -> DEF ID L_PAREN . literals R_PAREN statements RETURN ID END
    (94) function -> DEF ID L_PAREN . R_PAREN statements RETURN ID END
    (96) function -> DEF ID L_PAREN . literals R_PAREN statements RETURN literal END
    (97) function -> DEF ID L_PAREN . R_PAREN statements RETURN literal END
    (15) literals -> . literal
    (16) literals -> . literal COMMA literals
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    R_PAREN         shift and go to state 150
    STRING          shift and go to state 38
    ID              shift and go to state 148
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literals                       shift and go to state 149
    literal                        shift and go to state 151
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 85

    (92) function -> DEF ID statements . END
    (95) function -> DEF ID statements . RETURN ID END
    (98) function -> DEF ID statements . RETURN literal END

    END             shift and go to state 152
    RETURN          shift and go to state 153


state 86

    (107) control -> IF boolean statements . END
    (110) control -> IF boolean statements . elses END
    (105) elses -> . else
    (106) elses -> . elsif elses
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements
    (102) elsif -> . ELSIF boolean statements
    (103) elsif -> . ELSIF comparation statements
    (104) elsif -> . ELSIF comparations statements

    END             shift and go to state 154
    ELSE            shift and go to state 158
    ELSIF           shift and go to state 159

    elses                          shift and go to state 155
    else                           shift and go to state 156
    elsif                          shift and go to state 157

state 87

    (69) comparations -> boolean AND . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35

    boolean                        shift and go to state 160

state 88

    (70) comparations -> boolean LOGIC_AND . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35

    boolean                        shift and go to state 161

state 89

    (71) comparations -> boolean OR . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35

    boolean                        shift and go to state 162

state 90

    (72) comparations -> boolean LOGIC_OR . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35

    boolean                        shift and go to state 163

state 91

    (108) control -> IF comparation statements . END
    (111) control -> IF comparation statements . elses END
    (105) elses -> . else
    (106) elses -> . elsif elses
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements
    (102) elsif -> . ELSIF boolean statements
    (103) elsif -> . ELSIF comparation statements
    (104) elsif -> . ELSIF comparations statements

    END             shift and go to state 164
    ELSE            shift and go to state 158
    ELSIF           shift and go to state 159

    elses                          shift and go to state 165
    else                           shift and go to state 156
    elsif                          shift and go to state 157

state 92

    (61) comparations -> comparation AND . comparation
    (63) comparations -> comparation AND . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 37
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    comparation                    shift and go to state 166
    comparations                   shift and go to state 167
    literal                        shift and go to state 36
    boolean                        shift and go to state 168
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 93

    (62) comparations -> comparation LOGIC_AND . comparation
    (64) comparations -> comparation LOGIC_AND . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 37
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    comparation                    shift and go to state 169
    comparations                   shift and go to state 170
    literal                        shift and go to state 36
    boolean                        shift and go to state 168
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 94

    (65) comparations -> comparation OR . comparation
    (67) comparations -> comparation OR . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 37
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    comparation                    shift and go to state 171
    comparations                   shift and go to state 172
    literal                        shift and go to state 36
    boolean                        shift and go to state 168
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 95

    (66) comparations -> comparation LOGIC_OR . comparation
    (68) comparations -> comparation LOGIC_OR . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 37
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    comparation                    shift and go to state 173
    comparations                   shift and go to state 174
    literal                        shift and go to state 36
    boolean                        shift and go to state 168
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 96

    (109) control -> IF comparations statements . END
    (112) control -> IF comparations statements . elses END
    (105) elses -> . else
    (106) elses -> . elsif elses
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements
    (102) elsif -> . ELSIF boolean statements
    (103) elsif -> . ELSIF comparation statements
    (104) elsif -> . ELSIF comparations statements

    END             shift and go to state 175
    ELSE            shift and go to state 158
    ELSIF           shift and go to state 159

    elses                          shift and go to state 176
    else                           shift and go to state 156
    elsif                          shift and go to state 157

state 97

    (37) comparation -> literal EQUAL . literal
    (39) comparation -> literal EQUAL . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 178
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 177
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 98

    (41) comparation -> literal NOT_EQ . literal
    (43) comparation -> literal NOT_EQ . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 180
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 179
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 99

    (45) comparation -> literal LT_OR_EQ . literal
    (47) comparation -> literal LT_OR_EQ . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 182
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 181
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 100

    (49) comparation -> literal GT_OR_EQ . literal
    (51) comparation -> literal GT_OR_EQ . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 184
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 183
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 101

    (53) comparation -> literal LESS_THAN . literal
    (55) comparation -> literal LESS_THAN . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 186
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 185
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 102

    (57) comparation -> literal GREATER_THAN . literal
    (59) comparation -> literal GREATER_THAN . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 188
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 187
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 103

    (38) comparation -> ID EQUAL . literal
    (40) comparation -> ID EQUAL . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 189
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 190
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 104

    (42) comparation -> ID NOT_EQ . literal
    (44) comparation -> ID NOT_EQ . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 191
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 192
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 105

    (46) comparation -> ID LT_OR_EQ . literal
    (48) comparation -> ID LT_OR_EQ . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 193
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 194
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 106

    (50) comparation -> ID GT_OR_EQ . literal
    (52) comparation -> ID GT_OR_EQ . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 195
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 196
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 107

    (54) comparation -> ID LESS_THAN . literal
    (56) comparation -> ID LESS_THAN . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 197
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 198
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 108

    (58) comparation -> ID GREATER_THAN . literal
    (60) comparation -> ID GREATER_THAN . ID
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 199
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 200
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 109

    (168) range -> STRING ELLIPSIS . STRING

    STRING          shift and go to state 201


state 110

    (169) range -> STRING DOUBLE_PERIOD . STRING

    STRING          shift and go to state 202


state 111

    (164) range -> INTEGER ELLIPSIS . INTEGER

    INTEGER         shift and go to state 203


state 112

    (165) range -> INTEGER DOUBLE_PERIOD . INTEGER

    INTEGER         shift and go to state 204


state 113

    (162) range -> L_PAREN INTEGER . ELLIPSIS INTEGER R_PAREN
    (163) range -> L_PAREN INTEGER . DOUBLE_PERIOD INTEGER R_PAREN

    ELLIPSIS        shift and go to state 205
    DOUBLE_PERIOD   shift and go to state 206


state 114

    (166) range -> L_PAREN STRING . ELLIPSIS STRING
    (167) range -> L_PAREN STRING . DOUBLE_PERIOD STRING

    ELLIPSIS        shift and go to state 207
    DOUBLE_PERIOD   shift and go to state 208


state 115

    (113) control -> UNLESS boolean COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 209
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 116

    (116) control -> UNLESS boolean statements . elses END
    (105) elses -> . else
    (106) elses -> . elsif elses
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements
    (102) elsif -> . ELSIF boolean statements
    (103) elsif -> . ELSIF comparation statements
    (104) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 158
    ELSIF           shift and go to state 159

    elses                          shift and go to state 210
    else                           shift and go to state 156
    elsif                          shift and go to state 157

state 117

    (114) control -> UNLESS comparation COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 211
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 118

    (117) control -> UNLESS comparation statements . elses END
    (105) elses -> . else
    (106) elses -> . elsif elses
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements
    (102) elsif -> . ELSIF boolean statements
    (103) elsif -> . ELSIF comparation statements
    (104) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 158
    ELSIF           shift and go to state 159

    elses                          shift and go to state 212
    else                           shift and go to state 156
    elsif                          shift and go to state 157

state 119

    (115) control -> UNLESS comparations COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 213
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 120

    (118) control -> UNLESS comparations statements . elses END
    (105) elses -> . else
    (106) elses -> . elsif elses
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements
    (102) elsif -> . ELSIF boolean statements
    (103) elsif -> . ELSIF comparation statements
    (104) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 158
    ELSIF           shift and go to state 159

    elses                          shift and go to state 214
    else                           shift and go to state 156
    elsif                          shift and go to state 157

state 121

    (125) control -> CASE ID whens . else END
    (126) control -> CASE ID whens . END
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements

    END             shift and go to state 216
    ELSE            shift and go to state 158

    else                           shift and go to state 215

state 122

    (123) whens -> when .
    (124) whens -> when . whens
    (123) whens -> . when
    (124) whens -> . when whens
    (119) when -> . WHEN literal
    (120) when -> . WHEN literal THEN
    (121) when -> . WHEN comparation
    (122) when -> . WHEN comparations

    END             reduce using rule 123 (whens -> when .)
    ELSE            reduce using rule 123 (whens -> when .)
    WHEN            shift and go to state 123

    when                           shift and go to state 122
    whens                          shift and go to state 217

state 123

    (119) when -> WHEN . literal
    (120) when -> WHEN . literal THEN
    (121) when -> WHEN . comparation
    (122) when -> WHEN . comparations
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 38
    ID              shift and go to state 221
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 218
    comparation                    shift and go to state 219
    comparations                   shift and go to state 220
    boolean                        shift and go to state 222
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 124

    (127) control -> WHILE boolean DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 223
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 125

    (128) control -> WHILE comparation DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 224
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 126

    (129) control -> WHILE comparations DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 225
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 127

    (25) arithmetic -> value PLUS value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 25 (arithmetic -> value PLUS value .)
    DEF             reduce using rule 25 (arithmetic -> value PLUS value .)
    IF              reduce using rule 25 (arithmetic -> value PLUS value .)
    UNLESS          reduce using rule 25 (arithmetic -> value PLUS value .)
    CASE            reduce using rule 25 (arithmetic -> value PLUS value .)
    WHILE           reduce using rule 25 (arithmetic -> value PLUS value .)
    COMPLEX         reduce using rule 25 (arithmetic -> value PLUS value .)
    RATIONAL        reduce using rule 25 (arithmetic -> value PLUS value .)
    FLOAT           reduce using rule 25 (arithmetic -> value PLUS value .)
    INTEGER         reduce using rule 25 (arithmetic -> value PLUS value .)
    $end            reduce using rule 25 (arithmetic -> value PLUS value .)
    END             reduce using rule 25 (arithmetic -> value PLUS value .)
    RETURN          reduce using rule 25 (arithmetic -> value PLUS value .)
    ELSE            reduce using rule 25 (arithmetic -> value PLUS value .)
    ELSIF           reduce using rule 25 (arithmetic -> value PLUS value .)
    R_BRACKET       reduce using rule 25 (arithmetic -> value PLUS value .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXPO            shift and go to state 52
    MULT            shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 128

    (26) arithmetic -> value PLUS arithmetic .

    ID              reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    DEF             reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    IF              reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    UNLESS          reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    CASE            reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    WHILE           reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    COMPLEX         reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    RATIONAL        reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    FLOAT           reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    INTEGER         reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    $end            reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    END             reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    RETURN          reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    ELSE            reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    ELSIF           reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    R_BRACKET       reduce using rule 26 (arithmetic -> value PLUS arithmetic .)


state 129

    (24) value -> ID .

    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    EXPO            reduce using rule 24 (value -> ID .)
    MULT            reduce using rule 24 (value -> ID .)
    DIV             reduce using rule 24 (value -> ID .)
    MODULO          reduce using rule 24 (value -> ID .)
    ID              reduce using rule 24 (value -> ID .)
    DEF             reduce using rule 24 (value -> ID .)
    IF              reduce using rule 24 (value -> ID .)
    UNLESS          reduce using rule 24 (value -> ID .)
    CASE            reduce using rule 24 (value -> ID .)
    WHILE           reduce using rule 24 (value -> ID .)
    COMPLEX         reduce using rule 24 (value -> ID .)
    RATIONAL        reduce using rule 24 (value -> ID .)
    FLOAT           reduce using rule 24 (value -> ID .)
    INTEGER         reduce using rule 24 (value -> ID .)
    $end            reduce using rule 24 (value -> ID .)
    END             reduce using rule 24 (value -> ID .)
    RETURN          reduce using rule 24 (value -> ID .)
    ELSE            reduce using rule 24 (value -> ID .)
    ELSIF           reduce using rule 24 (value -> ID .)
    R_BRACKET       reduce using rule 24 (value -> ID .)


state 130

    (27) arithmetic -> value MINUS value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 27 (arithmetic -> value MINUS value .)
    DEF             reduce using rule 27 (arithmetic -> value MINUS value .)
    IF              reduce using rule 27 (arithmetic -> value MINUS value .)
    UNLESS          reduce using rule 27 (arithmetic -> value MINUS value .)
    CASE            reduce using rule 27 (arithmetic -> value MINUS value .)
    WHILE           reduce using rule 27 (arithmetic -> value MINUS value .)
    COMPLEX         reduce using rule 27 (arithmetic -> value MINUS value .)
    RATIONAL        reduce using rule 27 (arithmetic -> value MINUS value .)
    FLOAT           reduce using rule 27 (arithmetic -> value MINUS value .)
    INTEGER         reduce using rule 27 (arithmetic -> value MINUS value .)
    $end            reduce using rule 27 (arithmetic -> value MINUS value .)
    END             reduce using rule 27 (arithmetic -> value MINUS value .)
    RETURN          reduce using rule 27 (arithmetic -> value MINUS value .)
    ELSE            reduce using rule 27 (arithmetic -> value MINUS value .)
    ELSIF           reduce using rule 27 (arithmetic -> value MINUS value .)
    R_BRACKET       reduce using rule 27 (arithmetic -> value MINUS value .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXPO            shift and go to state 52
    MULT            shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 131

    (28) arithmetic -> value MINUS arithmetic .

    ID              reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    DEF             reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    IF              reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    UNLESS          reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    CASE            reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    WHILE           reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    COMPLEX         reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    RATIONAL        reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    FLOAT           reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    INTEGER         reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    $end            reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    END             reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    RETURN          reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    ELSE            reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    ELSIF           reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    R_BRACKET       reduce using rule 28 (arithmetic -> value MINUS arithmetic .)


state 132

    (29) arithmetic -> value EXPO value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 29 (arithmetic -> value EXPO value .)
    DEF             reduce using rule 29 (arithmetic -> value EXPO value .)
    IF              reduce using rule 29 (arithmetic -> value EXPO value .)
    UNLESS          reduce using rule 29 (arithmetic -> value EXPO value .)
    CASE            reduce using rule 29 (arithmetic -> value EXPO value .)
    WHILE           reduce using rule 29 (arithmetic -> value EXPO value .)
    COMPLEX         reduce using rule 29 (arithmetic -> value EXPO value .)
    RATIONAL        reduce using rule 29 (arithmetic -> value EXPO value .)
    FLOAT           reduce using rule 29 (arithmetic -> value EXPO value .)
    INTEGER         reduce using rule 29 (arithmetic -> value EXPO value .)
    $end            reduce using rule 29 (arithmetic -> value EXPO value .)
    END             reduce using rule 29 (arithmetic -> value EXPO value .)
    RETURN          reduce using rule 29 (arithmetic -> value EXPO value .)
    ELSE            reduce using rule 29 (arithmetic -> value EXPO value .)
    ELSIF           reduce using rule 29 (arithmetic -> value EXPO value .)
    R_BRACKET       reduce using rule 29 (arithmetic -> value EXPO value .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXPO            shift and go to state 52
    MULT            shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 133

    (30) arithmetic -> value EXPO arithmetic .

    ID              reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    DEF             reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    IF              reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    UNLESS          reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    CASE            reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    WHILE           reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    COMPLEX         reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    RATIONAL        reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    FLOAT           reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    INTEGER         reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    $end            reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    END             reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    RETURN          reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    ELSE            reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    ELSIF           reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    R_BRACKET       reduce using rule 30 (arithmetic -> value EXPO arithmetic .)


state 134

    (31) arithmetic -> value MULT value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 31 (arithmetic -> value MULT value .)
    DEF             reduce using rule 31 (arithmetic -> value MULT value .)
    IF              reduce using rule 31 (arithmetic -> value MULT value .)
    UNLESS          reduce using rule 31 (arithmetic -> value MULT value .)
    CASE            reduce using rule 31 (arithmetic -> value MULT value .)
    WHILE           reduce using rule 31 (arithmetic -> value MULT value .)
    COMPLEX         reduce using rule 31 (arithmetic -> value MULT value .)
    RATIONAL        reduce using rule 31 (arithmetic -> value MULT value .)
    FLOAT           reduce using rule 31 (arithmetic -> value MULT value .)
    INTEGER         reduce using rule 31 (arithmetic -> value MULT value .)
    $end            reduce using rule 31 (arithmetic -> value MULT value .)
    END             reduce using rule 31 (arithmetic -> value MULT value .)
    RETURN          reduce using rule 31 (arithmetic -> value MULT value .)
    ELSE            reduce using rule 31 (arithmetic -> value MULT value .)
    ELSIF           reduce using rule 31 (arithmetic -> value MULT value .)
    R_BRACKET       reduce using rule 31 (arithmetic -> value MULT value .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXPO            shift and go to state 52
    MULT            shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 135

    (32) arithmetic -> value MULT arithmetic .

    ID              reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    DEF             reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    IF              reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    UNLESS          reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    CASE            reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    WHILE           reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    COMPLEX         reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    RATIONAL        reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    FLOAT           reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    INTEGER         reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    $end            reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    END             reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    RETURN          reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    ELSE            reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    ELSIF           reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    R_BRACKET       reduce using rule 32 (arithmetic -> value MULT arithmetic .)


state 136

    (33) arithmetic -> value DIV value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 33 (arithmetic -> value DIV value .)
    DEF             reduce using rule 33 (arithmetic -> value DIV value .)
    IF              reduce using rule 33 (arithmetic -> value DIV value .)
    UNLESS          reduce using rule 33 (arithmetic -> value DIV value .)
    CASE            reduce using rule 33 (arithmetic -> value DIV value .)
    WHILE           reduce using rule 33 (arithmetic -> value DIV value .)
    COMPLEX         reduce using rule 33 (arithmetic -> value DIV value .)
    RATIONAL        reduce using rule 33 (arithmetic -> value DIV value .)
    FLOAT           reduce using rule 33 (arithmetic -> value DIV value .)
    INTEGER         reduce using rule 33 (arithmetic -> value DIV value .)
    $end            reduce using rule 33 (arithmetic -> value DIV value .)
    END             reduce using rule 33 (arithmetic -> value DIV value .)
    RETURN          reduce using rule 33 (arithmetic -> value DIV value .)
    ELSE            reduce using rule 33 (arithmetic -> value DIV value .)
    ELSIF           reduce using rule 33 (arithmetic -> value DIV value .)
    R_BRACKET       reduce using rule 33 (arithmetic -> value DIV value .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXPO            shift and go to state 52
    MULT            shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 137

    (34) arithmetic -> value DIV arithmetic .

    ID              reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    DEF             reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    IF              reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    UNLESS          reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    CASE            reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    WHILE           reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    COMPLEX         reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    RATIONAL        reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    FLOAT           reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    INTEGER         reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    $end            reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    END             reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    RETURN          reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    ELSE            reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    ELSIF           reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    R_BRACKET       reduce using rule 34 (arithmetic -> value DIV arithmetic .)


state 138

    (35) arithmetic -> value MODULO value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 35 (arithmetic -> value MODULO value .)
    DEF             reduce using rule 35 (arithmetic -> value MODULO value .)
    IF              reduce using rule 35 (arithmetic -> value MODULO value .)
    UNLESS          reduce using rule 35 (arithmetic -> value MODULO value .)
    CASE            reduce using rule 35 (arithmetic -> value MODULO value .)
    WHILE           reduce using rule 35 (arithmetic -> value MODULO value .)
    COMPLEX         reduce using rule 35 (arithmetic -> value MODULO value .)
    RATIONAL        reduce using rule 35 (arithmetic -> value MODULO value .)
    FLOAT           reduce using rule 35 (arithmetic -> value MODULO value .)
    INTEGER         reduce using rule 35 (arithmetic -> value MODULO value .)
    $end            reduce using rule 35 (arithmetic -> value MODULO value .)
    END             reduce using rule 35 (arithmetic -> value MODULO value .)
    RETURN          reduce using rule 35 (arithmetic -> value MODULO value .)
    ELSE            reduce using rule 35 (arithmetic -> value MODULO value .)
    ELSIF           reduce using rule 35 (arithmetic -> value MODULO value .)
    R_BRACKET       reduce using rule 35 (arithmetic -> value MODULO value .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    EXPO            shift and go to state 52
    MULT            shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 139

    (36) arithmetic -> value MODULO arithmetic .

    ID              reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    DEF             reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    IF              reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    UNLESS          reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    CASE            reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    WHILE           reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    COMPLEX         reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    RATIONAL        reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    FLOAT           reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    INTEGER         reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    $end            reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    END             reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    RETURN          reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    ELSE            reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    ELSIF           reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    R_BRACKET       reduce using rule 36 (arithmetic -> value MODULO arithmetic .)


state 140

    (148) strucMatrix -> MATRIX L_BRACKET . arrays R_BRACKET
    (142) arrays -> . array
    (143) arrays -> . array COMMA arrays
    (139) array -> . L_BRACKET literals R_BRACKET
    (140) array -> . L_BRACKET ids R_BRACKET
    (141) array -> . L_BRACKET elements R_BRACKET

    L_BRACKET       shift and go to state 143

    arrays                         shift and go to state 226
    array                          shift and go to state 227

state 141

    (149) strucSet -> SET PERIOD . NEW
    (150) strucSet -> SET PERIOD . NEW L_PAREN R_PAREN
    (151) strucSet -> SET PERIOD . NEW L_PAREN array R_PAREN

    NEW             shift and go to state 228


state 142

    (152) strucSet -> SET array .

    ID              reduce using rule 152 (strucSet -> SET array .)
    DEF             reduce using rule 152 (strucSet -> SET array .)
    IF              reduce using rule 152 (strucSet -> SET array .)
    UNLESS          reduce using rule 152 (strucSet -> SET array .)
    CASE            reduce using rule 152 (strucSet -> SET array .)
    WHILE           reduce using rule 152 (strucSet -> SET array .)
    COMPLEX         reduce using rule 152 (strucSet -> SET array .)
    RATIONAL        reduce using rule 152 (strucSet -> SET array .)
    FLOAT           reduce using rule 152 (strucSet -> SET array .)
    INTEGER         reduce using rule 152 (strucSet -> SET array .)
    $end            reduce using rule 152 (strucSet -> SET array .)
    END             reduce using rule 152 (strucSet -> SET array .)
    RETURN          reduce using rule 152 (strucSet -> SET array .)
    ELSE            reduce using rule 152 (strucSet -> SET array .)
    ELSIF           reduce using rule 152 (strucSet -> SET array .)


state 143

    (139) array -> L_BRACKET . literals R_BRACKET
    (140) array -> L_BRACKET . ids R_BRACKET
    (141) array -> L_BRACKET . elements R_BRACKET
    (15) literals -> . literal
    (16) literals -> . literal COMMA literals
    (8) ids -> . ID
    (9) ids -> . ID COMMA ids
    (135) elements -> . element
    (136) elements -> . element COMMA elements
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (130) element -> . ID
    (131) element -> . STRING
    (132) element -> . boolean
    (133) element -> . numeric
    (134) element -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 232
    STRING          shift and go to state 234
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literals                       shift and go to state 229
    ids                            shift and go to state 230
    elements                       shift and go to state 231
    literal                        shift and go to state 151
    element                        shift and go to state 233
    boolean                        shift and go to state 235
    numeric                        shift and go to state 236
    range                          shift and go to state 237

state 144

    (153) strucHash -> HASH PERIOD . NEW
    (154) strucHash -> HASH PERIOD . NEW L_BRACE R_BRACE
    (155) strucHash -> HASH PERIOD . NEW L_BRACE hashelems R_BRACE

    NEW             shift and go to state 238


state 145

    (156) strucHash -> HASH array .

    ID              reduce using rule 156 (strucHash -> HASH array .)
    DEF             reduce using rule 156 (strucHash -> HASH array .)
    IF              reduce using rule 156 (strucHash -> HASH array .)
    UNLESS          reduce using rule 156 (strucHash -> HASH array .)
    CASE            reduce using rule 156 (strucHash -> HASH array .)
    WHILE           reduce using rule 156 (strucHash -> HASH array .)
    COMPLEX         reduce using rule 156 (strucHash -> HASH array .)
    RATIONAL        reduce using rule 156 (strucHash -> HASH array .)
    FLOAT           reduce using rule 156 (strucHash -> HASH array .)
    INTEGER         reduce using rule 156 (strucHash -> HASH array .)
    $end            reduce using rule 156 (strucHash -> HASH array .)
    END             reduce using rule 156 (strucHash -> HASH array .)
    RETURN          reduce using rule 156 (strucHash -> HASH array .)
    ELSE            reduce using rule 156 (strucHash -> HASH array .)
    ELSIF           reduce using rule 156 (strucHash -> HASH array .)


state 146

    (137) strucArray -> ID L_BRACKET ID R_BRACKET .

    ASSIGN          reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    ID              reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    DEF             reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    IF              reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    UNLESS          reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    CASE            reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    WHILE           reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    COMPLEX         reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    RATIONAL        reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    FLOAT           reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    INTEGER         reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    $end            reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    END             reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    RETURN          reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    ELSE            reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)
    ELSIF           reduce using rule 137 (strucArray -> ID L_BRACKET ID R_BRACKET .)


state 147

    (138) strucArray -> ID L_BRACKET arithmetic R_BRACKET .

    ASSIGN          reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    ID              reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    DEF             reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    IF              reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    UNLESS          reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    CASE            reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    WHILE           reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    COMPLEX         reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    RATIONAL        reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    FLOAT           reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    INTEGER         reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    $end            reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    END             reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    RETURN          reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    ELSE            reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)
    ELSIF           reduce using rule 138 (strucArray -> ID L_BRACKET arithmetic R_BRACKET .)


state 148

    (11) literal -> ID .

    COMMA           reduce using rule 11 (literal -> ID .)
    R_PAREN         reduce using rule 11 (literal -> ID .)
    R_BRACKET       reduce using rule 11 (literal -> ID .)
    R_BRACE         reduce using rule 11 (literal -> ID .)


state 149

    (90) function -> DEF ID L_PAREN literals . R_PAREN statements END
    (93) function -> DEF ID L_PAREN literals . R_PAREN statements RETURN ID END
    (96) function -> DEF ID L_PAREN literals . R_PAREN statements RETURN literal END

    R_PAREN         shift and go to state 239


state 150

    (91) function -> DEF ID L_PAREN R_PAREN . statements END
    (94) function -> DEF ID L_PAREN R_PAREN . statements RETURN ID END
    (97) function -> DEF ID L_PAREN R_PAREN . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 240
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 151

    (15) literals -> literal .
    (16) literals -> literal . COMMA literals

    R_PAREN         reduce using rule 15 (literals -> literal .)
    R_BRACKET       reduce using rule 15 (literals -> literal .)
    COMMA           shift and go to state 241


state 152

    (92) function -> DEF ID statements END .

    ID              reduce using rule 92 (function -> DEF ID statements END .)
    DEF             reduce using rule 92 (function -> DEF ID statements END .)
    IF              reduce using rule 92 (function -> DEF ID statements END .)
    UNLESS          reduce using rule 92 (function -> DEF ID statements END .)
    CASE            reduce using rule 92 (function -> DEF ID statements END .)
    WHILE           reduce using rule 92 (function -> DEF ID statements END .)
    COMPLEX         reduce using rule 92 (function -> DEF ID statements END .)
    RATIONAL        reduce using rule 92 (function -> DEF ID statements END .)
    FLOAT           reduce using rule 92 (function -> DEF ID statements END .)
    INTEGER         reduce using rule 92 (function -> DEF ID statements END .)
    $end            reduce using rule 92 (function -> DEF ID statements END .)
    END             reduce using rule 92 (function -> DEF ID statements END .)
    RETURN          reduce using rule 92 (function -> DEF ID statements END .)
    ELSE            reduce using rule 92 (function -> DEF ID statements END .)
    ELSIF           reduce using rule 92 (function -> DEF ID statements END .)


state 153

    (95) function -> DEF ID statements RETURN . ID END
    (98) function -> DEF ID statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 242
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 243
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 154

    (107) control -> IF boolean statements END .

    ID              reduce using rule 107 (control -> IF boolean statements END .)
    DEF             reduce using rule 107 (control -> IF boolean statements END .)
    IF              reduce using rule 107 (control -> IF boolean statements END .)
    UNLESS          reduce using rule 107 (control -> IF boolean statements END .)
    CASE            reduce using rule 107 (control -> IF boolean statements END .)
    WHILE           reduce using rule 107 (control -> IF boolean statements END .)
    COMPLEX         reduce using rule 107 (control -> IF boolean statements END .)
    RATIONAL        reduce using rule 107 (control -> IF boolean statements END .)
    FLOAT           reduce using rule 107 (control -> IF boolean statements END .)
    INTEGER         reduce using rule 107 (control -> IF boolean statements END .)
    $end            reduce using rule 107 (control -> IF boolean statements END .)
    END             reduce using rule 107 (control -> IF boolean statements END .)
    RETURN          reduce using rule 107 (control -> IF boolean statements END .)
    ELSE            reduce using rule 107 (control -> IF boolean statements END .)
    ELSIF           reduce using rule 107 (control -> IF boolean statements END .)


state 155

    (110) control -> IF boolean statements elses . END

    END             shift and go to state 244


state 156

    (105) elses -> else .

    END             reduce using rule 105 (elses -> else .)


state 157

    (106) elses -> elsif . elses
    (105) elses -> . else
    (106) elses -> . elsif elses
    (99) else -> . ELSE boolean statements
    (100) else -> . ELSE comparation statements
    (101) else -> . ELSE comparations statements
    (102) elsif -> . ELSIF boolean statements
    (103) elsif -> . ELSIF comparation statements
    (104) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 158
    ELSIF           shift and go to state 159

    elsif                          shift and go to state 157
    elses                          shift and go to state 245
    else                           shift and go to state 156

state 158

    (99) else -> ELSE . boolean statements
    (100) else -> ELSE . comparation statements
    (101) else -> ELSE . comparations statements
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 37
    STRING          shift and go to state 38
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    boolean                        shift and go to state 246
    comparation                    shift and go to state 247
    comparations                   shift and go to state 248
    literal                        shift and go to state 36
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 159

    (102) elsif -> ELSIF . boolean statements
    (103) elsif -> ELSIF . comparation statements
    (104) elsif -> ELSIF . comparations statements
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL literal
    (39) comparation -> . literal EQUAL ID
    (40) comparation -> . ID EQUAL ID
    (41) comparation -> . literal NOT_EQ literal
    (42) comparation -> . ID NOT_EQ literal
    (43) comparation -> . literal NOT_EQ ID
    (44) comparation -> . ID NOT_EQ ID
    (45) comparation -> . literal LT_OR_EQ literal
    (46) comparation -> . ID LT_OR_EQ literal
    (47) comparation -> . literal LT_OR_EQ ID
    (48) comparation -> . ID LT_OR_EQ ID
    (49) comparation -> . literal GT_OR_EQ literal
    (50) comparation -> . ID GT_OR_EQ literal
    (51) comparation -> . literal GT_OR_EQ ID
    (52) comparation -> . ID GT_OR_EQ ID
    (53) comparation -> . literal LESS_THAN literal
    (54) comparation -> . ID LESS_THAN literal
    (55) comparation -> . literal LESS_THAN ID
    (56) comparation -> . ID LESS_THAN ID
    (57) comparation -> . literal GREATER_THAN literal
    (58) comparation -> . ID GREATER_THAN literal
    (59) comparation -> . literal GREATER_THAN ID
    (60) comparation -> . ID GREATER_THAN ID
    (61) comparations -> . comparation AND comparation
    (62) comparations -> . comparation LOGIC_AND comparation
    (63) comparations -> . comparation AND comparations
    (64) comparations -> . comparation LOGIC_AND comparations
    (65) comparations -> . comparation OR comparation
    (66) comparations -> . comparation LOGIC_OR comparation
    (67) comparations -> . comparation OR comparations
    (68) comparations -> . comparation LOGIC_OR comparations
    (69) comparations -> . boolean AND boolean
    (70) comparations -> . boolean LOGIC_AND boolean
    (71) comparations -> . boolean OR boolean
    (72) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 37
    STRING          shift and go to state 38
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    boolean                        shift and go to state 249
    comparation                    shift and go to state 250
    comparations                   shift and go to state 251
    literal                        shift and go to state 36
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 160

    (69) comparations -> boolean AND boolean .

    ID              reduce using rule 69 (comparations -> boolean AND boolean .)
    DEF             reduce using rule 69 (comparations -> boolean AND boolean .)
    IF              reduce using rule 69 (comparations -> boolean AND boolean .)
    UNLESS          reduce using rule 69 (comparations -> boolean AND boolean .)
    CASE            reduce using rule 69 (comparations -> boolean AND boolean .)
    WHILE           reduce using rule 69 (comparations -> boolean AND boolean .)
    COMPLEX         reduce using rule 69 (comparations -> boolean AND boolean .)
    RATIONAL        reduce using rule 69 (comparations -> boolean AND boolean .)
    FLOAT           reduce using rule 69 (comparations -> boolean AND boolean .)
    INTEGER         reduce using rule 69 (comparations -> boolean AND boolean .)
    COLON           reduce using rule 69 (comparations -> boolean AND boolean .)
    DO              reduce using rule 69 (comparations -> boolean AND boolean .)
    WHEN            reduce using rule 69 (comparations -> boolean AND boolean .)
    END             reduce using rule 69 (comparations -> boolean AND boolean .)
    ELSE            reduce using rule 69 (comparations -> boolean AND boolean .)


state 161

    (70) comparations -> boolean LOGIC_AND boolean .

    ID              reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    DEF             reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    IF              reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    UNLESS          reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    CASE            reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    WHILE           reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    COMPLEX         reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    RATIONAL        reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    FLOAT           reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    INTEGER         reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    COLON           reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    DO              reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    WHEN            reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    END             reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)
    ELSE            reduce using rule 70 (comparations -> boolean LOGIC_AND boolean .)


state 162

    (71) comparations -> boolean OR boolean .

    ID              reduce using rule 71 (comparations -> boolean OR boolean .)
    DEF             reduce using rule 71 (comparations -> boolean OR boolean .)
    IF              reduce using rule 71 (comparations -> boolean OR boolean .)
    UNLESS          reduce using rule 71 (comparations -> boolean OR boolean .)
    CASE            reduce using rule 71 (comparations -> boolean OR boolean .)
    WHILE           reduce using rule 71 (comparations -> boolean OR boolean .)
    COMPLEX         reduce using rule 71 (comparations -> boolean OR boolean .)
    RATIONAL        reduce using rule 71 (comparations -> boolean OR boolean .)
    FLOAT           reduce using rule 71 (comparations -> boolean OR boolean .)
    INTEGER         reduce using rule 71 (comparations -> boolean OR boolean .)
    COLON           reduce using rule 71 (comparations -> boolean OR boolean .)
    DO              reduce using rule 71 (comparations -> boolean OR boolean .)
    WHEN            reduce using rule 71 (comparations -> boolean OR boolean .)
    END             reduce using rule 71 (comparations -> boolean OR boolean .)
    ELSE            reduce using rule 71 (comparations -> boolean OR boolean .)


state 163

    (72) comparations -> boolean LOGIC_OR boolean .

    ID              reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    DEF             reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    IF              reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    UNLESS          reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    CASE            reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    WHILE           reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    COMPLEX         reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    RATIONAL        reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    FLOAT           reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    INTEGER         reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    COLON           reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    DO              reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    WHEN            reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    END             reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)
    ELSE            reduce using rule 72 (comparations -> boolean LOGIC_OR boolean .)


state 164

    (108) control -> IF comparation statements END .

    ID              reduce using rule 108 (control -> IF comparation statements END .)
    DEF             reduce using rule 108 (control -> IF comparation statements END .)
    IF              reduce using rule 108 (control -> IF comparation statements END .)
    UNLESS          reduce using rule 108 (control -> IF comparation statements END .)
    CASE            reduce using rule 108 (control -> IF comparation statements END .)
    WHILE           reduce using rule 108 (control -> IF comparation statements END .)
    COMPLEX         reduce using rule 108 (control -> IF comparation statements END .)
    RATIONAL        reduce using rule 108 (control -> IF comparation statements END .)
    FLOAT           reduce using rule 108 (control -> IF comparation statements END .)
    INTEGER         reduce using rule 108 (control -> IF comparation statements END .)
    $end            reduce using rule 108 (control -> IF comparation statements END .)
    END             reduce using rule 108 (control -> IF comparation statements END .)
    RETURN          reduce using rule 108 (control -> IF comparation statements END .)
    ELSE            reduce using rule 108 (control -> IF comparation statements END .)
    ELSIF           reduce using rule 108 (control -> IF comparation statements END .)


state 165

    (111) control -> IF comparation statements elses . END

    END             shift and go to state 252


state 166

    (61) comparations -> comparation AND comparation .
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 61 (comparations -> comparation AND comparation .)
    DEF             reduce using rule 61 (comparations -> comparation AND comparation .)
    IF              reduce using rule 61 (comparations -> comparation AND comparation .)
    UNLESS          reduce using rule 61 (comparations -> comparation AND comparation .)
    CASE            reduce using rule 61 (comparations -> comparation AND comparation .)
    WHILE           reduce using rule 61 (comparations -> comparation AND comparation .)
    COMPLEX         reduce using rule 61 (comparations -> comparation AND comparation .)
    RATIONAL        reduce using rule 61 (comparations -> comparation AND comparation .)
    FLOAT           reduce using rule 61 (comparations -> comparation AND comparation .)
    INTEGER         reduce using rule 61 (comparations -> comparation AND comparation .)
    COLON           reduce using rule 61 (comparations -> comparation AND comparation .)
    DO              reduce using rule 61 (comparations -> comparation AND comparation .)
    WHEN            reduce using rule 61 (comparations -> comparation AND comparation .)
    END             reduce using rule 61 (comparations -> comparation AND comparation .)
    ELSE            reduce using rule 61 (comparations -> comparation AND comparation .)
    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95


state 167

    (63) comparations -> comparation AND comparations .

    ID              reduce using rule 63 (comparations -> comparation AND comparations .)
    DEF             reduce using rule 63 (comparations -> comparation AND comparations .)
    IF              reduce using rule 63 (comparations -> comparation AND comparations .)
    UNLESS          reduce using rule 63 (comparations -> comparation AND comparations .)
    CASE            reduce using rule 63 (comparations -> comparation AND comparations .)
    WHILE           reduce using rule 63 (comparations -> comparation AND comparations .)
    COMPLEX         reduce using rule 63 (comparations -> comparation AND comparations .)
    RATIONAL        reduce using rule 63 (comparations -> comparation AND comparations .)
    FLOAT           reduce using rule 63 (comparations -> comparation AND comparations .)
    INTEGER         reduce using rule 63 (comparations -> comparation AND comparations .)
    COLON           reduce using rule 63 (comparations -> comparation AND comparations .)
    DO              reduce using rule 63 (comparations -> comparation AND comparations .)
    WHEN            reduce using rule 63 (comparations -> comparation AND comparations .)
    END             reduce using rule 63 (comparations -> comparation AND comparations .)
    ELSE            reduce using rule 63 (comparations -> comparation AND comparations .)


state 168

    (69) comparations -> boolean . AND boolean
    (70) comparations -> boolean . LOGIC_AND boolean
    (71) comparations -> boolean . OR boolean
    (72) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .

    AND             shift and go to state 87
    LOGIC_AND       shift and go to state 88
    OR              shift and go to state 89
    LOGIC_OR        shift and go to state 90
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)


state 169

    (62) comparations -> comparation LOGIC_AND comparation .
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    DEF             reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    IF              reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    UNLESS          reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    CASE            reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    WHILE           reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    COMPLEX         reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    RATIONAL        reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    FLOAT           reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    INTEGER         reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    COLON           reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    DO              reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    WHEN            reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    END             reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    ELSE            reduce using rule 62 (comparations -> comparation LOGIC_AND comparation .)
    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95


state 170

    (64) comparations -> comparation LOGIC_AND comparations .

    ID              reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    DEF             reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    IF              reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    UNLESS          reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    CASE            reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    WHILE           reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    COMPLEX         reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    RATIONAL        reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    FLOAT           reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    INTEGER         reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    COLON           reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    DO              reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    WHEN            reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    END             reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)
    ELSE            reduce using rule 64 (comparations -> comparation LOGIC_AND comparations .)


state 171

    (65) comparations -> comparation OR comparation .
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 65 (comparations -> comparation OR comparation .)
    DEF             reduce using rule 65 (comparations -> comparation OR comparation .)
    IF              reduce using rule 65 (comparations -> comparation OR comparation .)
    UNLESS          reduce using rule 65 (comparations -> comparation OR comparation .)
    CASE            reduce using rule 65 (comparations -> comparation OR comparation .)
    WHILE           reduce using rule 65 (comparations -> comparation OR comparation .)
    COMPLEX         reduce using rule 65 (comparations -> comparation OR comparation .)
    RATIONAL        reduce using rule 65 (comparations -> comparation OR comparation .)
    FLOAT           reduce using rule 65 (comparations -> comparation OR comparation .)
    INTEGER         reduce using rule 65 (comparations -> comparation OR comparation .)
    COLON           reduce using rule 65 (comparations -> comparation OR comparation .)
    DO              reduce using rule 65 (comparations -> comparation OR comparation .)
    WHEN            reduce using rule 65 (comparations -> comparation OR comparation .)
    END             reduce using rule 65 (comparations -> comparation OR comparation .)
    ELSE            reduce using rule 65 (comparations -> comparation OR comparation .)
    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95


state 172

    (67) comparations -> comparation OR comparations .

    ID              reduce using rule 67 (comparations -> comparation OR comparations .)
    DEF             reduce using rule 67 (comparations -> comparation OR comparations .)
    IF              reduce using rule 67 (comparations -> comparation OR comparations .)
    UNLESS          reduce using rule 67 (comparations -> comparation OR comparations .)
    CASE            reduce using rule 67 (comparations -> comparation OR comparations .)
    WHILE           reduce using rule 67 (comparations -> comparation OR comparations .)
    COMPLEX         reduce using rule 67 (comparations -> comparation OR comparations .)
    RATIONAL        reduce using rule 67 (comparations -> comparation OR comparations .)
    FLOAT           reduce using rule 67 (comparations -> comparation OR comparations .)
    INTEGER         reduce using rule 67 (comparations -> comparation OR comparations .)
    COLON           reduce using rule 67 (comparations -> comparation OR comparations .)
    DO              reduce using rule 67 (comparations -> comparation OR comparations .)
    WHEN            reduce using rule 67 (comparations -> comparation OR comparations .)
    END             reduce using rule 67 (comparations -> comparation OR comparations .)
    ELSE            reduce using rule 67 (comparations -> comparation OR comparations .)


state 173

    (66) comparations -> comparation LOGIC_OR comparation .
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    DEF             reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    IF              reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    UNLESS          reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    CASE            reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    WHILE           reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    COMPLEX         reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    RATIONAL        reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    FLOAT           reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    INTEGER         reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    COLON           reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    DO              reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    WHEN            reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    END             reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    ELSE            reduce using rule 66 (comparations -> comparation LOGIC_OR comparation .)
    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95


state 174

    (68) comparations -> comparation LOGIC_OR comparations .

    ID              reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    DEF             reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    IF              reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    UNLESS          reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    CASE            reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    WHILE           reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    COMPLEX         reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    RATIONAL        reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    FLOAT           reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    INTEGER         reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    COLON           reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    DO              reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    WHEN            reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    END             reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)
    ELSE            reduce using rule 68 (comparations -> comparation LOGIC_OR comparations .)


state 175

    (109) control -> IF comparations statements END .

    ID              reduce using rule 109 (control -> IF comparations statements END .)
    DEF             reduce using rule 109 (control -> IF comparations statements END .)
    IF              reduce using rule 109 (control -> IF comparations statements END .)
    UNLESS          reduce using rule 109 (control -> IF comparations statements END .)
    CASE            reduce using rule 109 (control -> IF comparations statements END .)
    WHILE           reduce using rule 109 (control -> IF comparations statements END .)
    COMPLEX         reduce using rule 109 (control -> IF comparations statements END .)
    RATIONAL        reduce using rule 109 (control -> IF comparations statements END .)
    FLOAT           reduce using rule 109 (control -> IF comparations statements END .)
    INTEGER         reduce using rule 109 (control -> IF comparations statements END .)
    $end            reduce using rule 109 (control -> IF comparations statements END .)
    END             reduce using rule 109 (control -> IF comparations statements END .)
    RETURN          reduce using rule 109 (control -> IF comparations statements END .)
    ELSE            reduce using rule 109 (control -> IF comparations statements END .)
    ELSIF           reduce using rule 109 (control -> IF comparations statements END .)


state 176

    (112) control -> IF comparations statements elses . END

    END             shift and go to state 253


state 177

    (37) comparation -> literal EQUAL literal .

    AND             reduce using rule 37 (comparation -> literal EQUAL literal .)
    LOGIC_AND       reduce using rule 37 (comparation -> literal EQUAL literal .)
    OR              reduce using rule 37 (comparation -> literal EQUAL literal .)
    LOGIC_OR        reduce using rule 37 (comparation -> literal EQUAL literal .)
    ID              reduce using rule 37 (comparation -> literal EQUAL literal .)
    DEF             reduce using rule 37 (comparation -> literal EQUAL literal .)
    IF              reduce using rule 37 (comparation -> literal EQUAL literal .)
    UNLESS          reduce using rule 37 (comparation -> literal EQUAL literal .)
    CASE            reduce using rule 37 (comparation -> literal EQUAL literal .)
    WHILE           reduce using rule 37 (comparation -> literal EQUAL literal .)
    COMPLEX         reduce using rule 37 (comparation -> literal EQUAL literal .)
    RATIONAL        reduce using rule 37 (comparation -> literal EQUAL literal .)
    FLOAT           reduce using rule 37 (comparation -> literal EQUAL literal .)
    INTEGER         reduce using rule 37 (comparation -> literal EQUAL literal .)
    COLON           reduce using rule 37 (comparation -> literal EQUAL literal .)
    DO              reduce using rule 37 (comparation -> literal EQUAL literal .)
    WHEN            reduce using rule 37 (comparation -> literal EQUAL literal .)
    END             reduce using rule 37 (comparation -> literal EQUAL literal .)
    ELSE            reduce using rule 37 (comparation -> literal EQUAL literal .)


state 178

    (39) comparation -> literal EQUAL ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! LOGIC_AND       [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! OR              [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! LOGIC_OR        [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! ID              [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! DEF             [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! IF              [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! UNLESS          [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! CASE            [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! WHILE           [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! COMPLEX         [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! RATIONAL        [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! FLOAT           [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! INTEGER         [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! COLON           [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! DO              [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! WHEN            [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! END             [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]
  ! ELSE            [ reduce using rule 39 (comparation -> literal EQUAL ID .) ]


state 179

    (41) comparation -> literal NOT_EQ literal .

    AND             reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    LOGIC_AND       reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    OR              reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    LOGIC_OR        reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    ID              reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    DEF             reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    IF              reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    UNLESS          reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    CASE            reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    WHILE           reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    COMPLEX         reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    RATIONAL        reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    FLOAT           reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    INTEGER         reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    COLON           reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    DO              reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    WHEN            reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    END             reduce using rule 41 (comparation -> literal NOT_EQ literal .)
    ELSE            reduce using rule 41 (comparation -> literal NOT_EQ literal .)


state 180

    (43) comparation -> literal NOT_EQ ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! LOGIC_AND       [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! OR              [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! LOGIC_OR        [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! ID              [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! DEF             [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! IF              [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! UNLESS          [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! CASE            [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! WHILE           [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! COMPLEX         [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! RATIONAL        [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! FLOAT           [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! INTEGER         [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! COLON           [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! DO              [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! WHEN            [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! END             [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]
  ! ELSE            [ reduce using rule 43 (comparation -> literal NOT_EQ ID .) ]


state 181

    (45) comparation -> literal LT_OR_EQ literal .

    AND             reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    OR              reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    ID              reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    DEF             reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    IF              reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    UNLESS          reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    CASE            reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    WHILE           reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    COMPLEX         reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    RATIONAL        reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    FLOAT           reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    INTEGER         reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    COLON           reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    DO              reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    WHEN            reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    END             reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)
    ELSE            reduce using rule 45 (comparation -> literal LT_OR_EQ literal .)


state 182

    (47) comparation -> literal LT_OR_EQ ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! LOGIC_AND       [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! OR              [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! LOGIC_OR        [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! ID              [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! DEF             [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! IF              [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! UNLESS          [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! CASE            [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! WHILE           [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! COMPLEX         [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! RATIONAL        [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! FLOAT           [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! INTEGER         [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! COLON           [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! DO              [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! WHEN            [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! END             [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]
  ! ELSE            [ reduce using rule 47 (comparation -> literal LT_OR_EQ ID .) ]


state 183

    (49) comparation -> literal GT_OR_EQ literal .

    AND             reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    OR              reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    ID              reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    DEF             reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    IF              reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    UNLESS          reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    CASE            reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    WHILE           reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    COMPLEX         reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    RATIONAL        reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    FLOAT           reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    INTEGER         reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    COLON           reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    DO              reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    WHEN            reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    END             reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)
    ELSE            reduce using rule 49 (comparation -> literal GT_OR_EQ literal .)


state 184

    (51) comparation -> literal GT_OR_EQ ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! LOGIC_AND       [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! OR              [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! LOGIC_OR        [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! ID              [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! DEF             [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! IF              [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! UNLESS          [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! CASE            [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! WHILE           [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! COMPLEX         [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! RATIONAL        [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! FLOAT           [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! INTEGER         [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! COLON           [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! DO              [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! WHEN            [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! END             [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]
  ! ELSE            [ reduce using rule 51 (comparation -> literal GT_OR_EQ ID .) ]


state 185

    (53) comparation -> literal LESS_THAN literal .

    AND             reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    LOGIC_AND       reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    OR              reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    LOGIC_OR        reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    ID              reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    DEF             reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    IF              reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    UNLESS          reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    CASE            reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    WHILE           reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    COMPLEX         reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    RATIONAL        reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    FLOAT           reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    INTEGER         reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    COLON           reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    DO              reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    WHEN            reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    END             reduce using rule 53 (comparation -> literal LESS_THAN literal .)
    ELSE            reduce using rule 53 (comparation -> literal LESS_THAN literal .)


state 186

    (55) comparation -> literal LESS_THAN ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! LOGIC_AND       [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! OR              [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! LOGIC_OR        [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! ID              [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! DEF             [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! IF              [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! UNLESS          [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! CASE            [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! WHILE           [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! COMPLEX         [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! RATIONAL        [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! FLOAT           [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! INTEGER         [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! COLON           [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! DO              [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! WHEN            [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! END             [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]
  ! ELSE            [ reduce using rule 55 (comparation -> literal LESS_THAN ID .) ]


state 187

    (57) comparation -> literal GREATER_THAN literal .

    AND             reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    LOGIC_AND       reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    OR              reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    LOGIC_OR        reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    ID              reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    DEF             reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    IF              reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    UNLESS          reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    CASE            reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    WHILE           reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    COMPLEX         reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    RATIONAL        reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    FLOAT           reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    INTEGER         reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    COLON           reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    DO              reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    WHEN            reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    END             reduce using rule 57 (comparation -> literal GREATER_THAN literal .)
    ELSE            reduce using rule 57 (comparation -> literal GREATER_THAN literal .)


state 188

    (59) comparation -> literal GREATER_THAN ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! LOGIC_AND       [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! OR              [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! LOGIC_OR        [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! ID              [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! DEF             [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! IF              [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! UNLESS          [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! CASE            [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! WHILE           [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! COMPLEX         [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! RATIONAL        [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! FLOAT           [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! INTEGER         [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! COLON           [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! DO              [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! WHEN            [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! END             [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]
  ! ELSE            [ reduce using rule 59 (comparation -> literal GREATER_THAN ID .) ]


state 189

    (40) comparation -> ID EQUAL ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! LOGIC_AND       [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! OR              [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! LOGIC_OR        [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! ID              [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! DEF             [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! IF              [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! UNLESS          [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! CASE            [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! WHILE           [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! COMPLEX         [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! RATIONAL        [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! FLOAT           [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! INTEGER         [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! COLON           [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! DO              [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! WHEN            [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! END             [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]
  ! ELSE            [ reduce using rule 40 (comparation -> ID EQUAL ID .) ]


state 190

    (38) comparation -> ID EQUAL literal .

    AND             reduce using rule 38 (comparation -> ID EQUAL literal .)
    LOGIC_AND       reduce using rule 38 (comparation -> ID EQUAL literal .)
    OR              reduce using rule 38 (comparation -> ID EQUAL literal .)
    LOGIC_OR        reduce using rule 38 (comparation -> ID EQUAL literal .)
    ID              reduce using rule 38 (comparation -> ID EQUAL literal .)
    DEF             reduce using rule 38 (comparation -> ID EQUAL literal .)
    IF              reduce using rule 38 (comparation -> ID EQUAL literal .)
    UNLESS          reduce using rule 38 (comparation -> ID EQUAL literal .)
    CASE            reduce using rule 38 (comparation -> ID EQUAL literal .)
    WHILE           reduce using rule 38 (comparation -> ID EQUAL literal .)
    COMPLEX         reduce using rule 38 (comparation -> ID EQUAL literal .)
    RATIONAL        reduce using rule 38 (comparation -> ID EQUAL literal .)
    FLOAT           reduce using rule 38 (comparation -> ID EQUAL literal .)
    INTEGER         reduce using rule 38 (comparation -> ID EQUAL literal .)
    COLON           reduce using rule 38 (comparation -> ID EQUAL literal .)
    DO              reduce using rule 38 (comparation -> ID EQUAL literal .)
    WHEN            reduce using rule 38 (comparation -> ID EQUAL literal .)
    END             reduce using rule 38 (comparation -> ID EQUAL literal .)
    ELSE            reduce using rule 38 (comparation -> ID EQUAL literal .)


state 191

    (44) comparation -> ID NOT_EQ ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! LOGIC_AND       [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! OR              [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! LOGIC_OR        [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! ID              [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! DEF             [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! IF              [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! UNLESS          [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! CASE            [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! WHILE           [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! COMPLEX         [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! RATIONAL        [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! FLOAT           [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! INTEGER         [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! COLON           [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! DO              [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! WHEN            [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! END             [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]
  ! ELSE            [ reduce using rule 44 (comparation -> ID NOT_EQ ID .) ]


state 192

    (42) comparation -> ID NOT_EQ literal .

    AND             reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    LOGIC_AND       reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    OR              reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    LOGIC_OR        reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    ID              reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    DEF             reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    IF              reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    UNLESS          reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    CASE            reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    WHILE           reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    COMPLEX         reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    RATIONAL        reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    FLOAT           reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    INTEGER         reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    COLON           reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    DO              reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    WHEN            reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    END             reduce using rule 42 (comparation -> ID NOT_EQ literal .)
    ELSE            reduce using rule 42 (comparation -> ID NOT_EQ literal .)


state 193

    (48) comparation -> ID LT_OR_EQ ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! LOGIC_AND       [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! OR              [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! LOGIC_OR        [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! ID              [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! DEF             [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! IF              [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! UNLESS          [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! CASE            [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! WHILE           [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! COMPLEX         [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! RATIONAL        [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! FLOAT           [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! INTEGER         [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! COLON           [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! DO              [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! WHEN            [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! END             [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]
  ! ELSE            [ reduce using rule 48 (comparation -> ID LT_OR_EQ ID .) ]


state 194

    (46) comparation -> ID LT_OR_EQ literal .

    AND             reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    OR              reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    ID              reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    DEF             reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    IF              reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    UNLESS          reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    CASE            reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    WHILE           reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    COMPLEX         reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    RATIONAL        reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    FLOAT           reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    INTEGER         reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    COLON           reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    DO              reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    WHEN            reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    END             reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)
    ELSE            reduce using rule 46 (comparation -> ID LT_OR_EQ literal .)


state 195

    (52) comparation -> ID GT_OR_EQ ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! LOGIC_AND       [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! OR              [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! LOGIC_OR        [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! ID              [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! DEF             [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! IF              [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! UNLESS          [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! CASE            [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! WHILE           [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! COMPLEX         [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! RATIONAL        [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! FLOAT           [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! INTEGER         [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! COLON           [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! DO              [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! WHEN            [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! END             [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]
  ! ELSE            [ reduce using rule 52 (comparation -> ID GT_OR_EQ ID .) ]


state 196

    (50) comparation -> ID GT_OR_EQ literal .

    AND             reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    OR              reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    ID              reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    DEF             reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    IF              reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    UNLESS          reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    CASE            reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    WHILE           reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    COMPLEX         reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    RATIONAL        reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    FLOAT           reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    INTEGER         reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    COLON           reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    DO              reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    WHEN            reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    END             reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)
    ELSE            reduce using rule 50 (comparation -> ID GT_OR_EQ literal .)


state 197

    (56) comparation -> ID LESS_THAN ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! LOGIC_AND       [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! OR              [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! LOGIC_OR        [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! ID              [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! DEF             [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! IF              [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! UNLESS          [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! CASE            [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! WHILE           [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! COMPLEX         [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! RATIONAL        [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! FLOAT           [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! INTEGER         [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! COLON           [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! DO              [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! WHEN            [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! END             [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]
  ! ELSE            [ reduce using rule 56 (comparation -> ID LESS_THAN ID .) ]


state 198

    (54) comparation -> ID LESS_THAN literal .

    AND             reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    LOGIC_AND       reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    OR              reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    LOGIC_OR        reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    ID              reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    DEF             reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    IF              reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    UNLESS          reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    CASE            reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    WHILE           reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    COMPLEX         reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    RATIONAL        reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    FLOAT           reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    INTEGER         reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    COLON           reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    DO              reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    WHEN            reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    END             reduce using rule 54 (comparation -> ID LESS_THAN literal .)
    ELSE            reduce using rule 54 (comparation -> ID LESS_THAN literal .)


state 199

    (60) comparation -> ID GREATER_THAN ID .
    (11) literal -> ID .

  ! reduce/reduce conflict for AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)

  ! AND             [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! LOGIC_AND       [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! OR              [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! LOGIC_OR        [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! ID              [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! DEF             [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! IF              [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! UNLESS          [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! CASE            [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! WHILE           [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! COMPLEX         [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! RATIONAL        [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! FLOAT           [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! INTEGER         [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! COLON           [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! DO              [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! WHEN            [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! END             [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]
  ! ELSE            [ reduce using rule 60 (comparation -> ID GREATER_THAN ID .) ]


state 200

    (58) comparation -> ID GREATER_THAN literal .

    AND             reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    LOGIC_AND       reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    OR              reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    LOGIC_OR        reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    ID              reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    DEF             reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    IF              reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    UNLESS          reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    CASE            reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    WHILE           reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    COMPLEX         reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    RATIONAL        reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    FLOAT           reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    INTEGER         reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    COLON           reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    DO              reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    WHEN            reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    END             reduce using rule 58 (comparation -> ID GREATER_THAN literal .)
    ELSE            reduce using rule 58 (comparation -> ID GREATER_THAN literal .)


state 201

    (168) range -> STRING ELLIPSIS STRING .

    EQUAL           reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    NOT_EQ          reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    LT_OR_EQ        reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    GT_OR_EQ        reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    LESS_THAN       reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    GREATER_THAN    reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    ID              reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    DEF             reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    IF              reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    UNLESS          reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    CASE            reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    WHILE           reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    COMPLEX         reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    RATIONAL        reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    FLOAT           reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    INTEGER         reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    $end            reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    END             reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    RETURN          reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    ELSE            reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    ELSIF           reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    COMMA           reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    R_PAREN         reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    AND             reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    LOGIC_AND       reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    OR              reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    LOGIC_OR        reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    COLON           reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    DO              reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    WHEN            reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    THEN            reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    R_BRACKET       reduce using rule 168 (range -> STRING ELLIPSIS STRING .)
    R_BRACE         reduce using rule 168 (range -> STRING ELLIPSIS STRING .)


state 202

    (169) range -> STRING DOUBLE_PERIOD STRING .

    EQUAL           reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    NOT_EQ          reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    LT_OR_EQ        reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    GT_OR_EQ        reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    LESS_THAN       reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    GREATER_THAN    reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    ID              reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    DEF             reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    IF              reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    UNLESS          reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    CASE            reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    WHILE           reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    COMPLEX         reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    RATIONAL        reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    FLOAT           reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    INTEGER         reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    $end            reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    END             reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    RETURN          reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    ELSE            reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    ELSIF           reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    COMMA           reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    R_PAREN         reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    AND             reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    LOGIC_AND       reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    OR              reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    LOGIC_OR        reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    COLON           reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    DO              reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    WHEN            reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    THEN            reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    R_BRACKET       reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)
    R_BRACE         reduce using rule 169 (range -> STRING DOUBLE_PERIOD STRING .)


state 203

    (164) range -> INTEGER ELLIPSIS INTEGER .

    EQUAL           reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    NOT_EQ          reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    LT_OR_EQ        reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    GT_OR_EQ        reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    LESS_THAN       reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    GREATER_THAN    reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    ID              reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    DEF             reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    IF              reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    UNLESS          reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    CASE            reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    WHILE           reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    COMPLEX         reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    RATIONAL        reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    FLOAT           reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    INTEGER         reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    $end            reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    END             reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    RETURN          reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    ELSE            reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    ELSIF           reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    COMMA           reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    R_PAREN         reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    AND             reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    LOGIC_AND       reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    OR              reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    LOGIC_OR        reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    COLON           reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    DO              reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    WHEN            reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    THEN            reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    R_BRACKET       reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)
    R_BRACE         reduce using rule 164 (range -> INTEGER ELLIPSIS INTEGER .)


state 204

    (165) range -> INTEGER DOUBLE_PERIOD INTEGER .

    EQUAL           reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    NOT_EQ          reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LT_OR_EQ        reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    GT_OR_EQ        reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LESS_THAN       reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    GREATER_THAN    reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ID              reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    DEF             reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    IF              reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    UNLESS          reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    CASE            reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    WHILE           reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COMPLEX         reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    RATIONAL        reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    FLOAT           reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    INTEGER         reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    $end            reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    END             reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    RETURN          reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ELSE            reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ELSIF           reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COMMA           reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_PAREN         reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    AND             reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LOGIC_AND       reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    OR              reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LOGIC_OR        reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COLON           reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    DO              reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    WHEN            reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    THEN            reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_BRACKET       reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_BRACE         reduce using rule 165 (range -> INTEGER DOUBLE_PERIOD INTEGER .)


state 205

    (162) range -> L_PAREN INTEGER ELLIPSIS . INTEGER R_PAREN

    INTEGER         shift and go to state 254


state 206

    (163) range -> L_PAREN INTEGER DOUBLE_PERIOD . INTEGER R_PAREN

    INTEGER         shift and go to state 255


state 207

    (166) range -> L_PAREN STRING ELLIPSIS . STRING

    STRING          shift and go to state 256


state 208

    (167) range -> L_PAREN STRING DOUBLE_PERIOD . STRING

    STRING          shift and go to state 257


state 209

    (113) control -> UNLESS boolean COLON statements . END

    END             shift and go to state 258


state 210

    (116) control -> UNLESS boolean statements elses . END

    END             shift and go to state 259


state 211

    (114) control -> UNLESS comparation COLON statements . END

    END             shift and go to state 260


state 212

    (117) control -> UNLESS comparation statements elses . END

    END             shift and go to state 261


state 213

    (115) control -> UNLESS comparations COLON statements . END

    END             shift and go to state 262


state 214

    (118) control -> UNLESS comparations statements elses . END

    END             shift and go to state 263


state 215

    (125) control -> CASE ID whens else . END

    END             shift and go to state 264


state 216

    (126) control -> CASE ID whens END .

    ID              reduce using rule 126 (control -> CASE ID whens END .)
    DEF             reduce using rule 126 (control -> CASE ID whens END .)
    IF              reduce using rule 126 (control -> CASE ID whens END .)
    UNLESS          reduce using rule 126 (control -> CASE ID whens END .)
    CASE            reduce using rule 126 (control -> CASE ID whens END .)
    WHILE           reduce using rule 126 (control -> CASE ID whens END .)
    COMPLEX         reduce using rule 126 (control -> CASE ID whens END .)
    RATIONAL        reduce using rule 126 (control -> CASE ID whens END .)
    FLOAT           reduce using rule 126 (control -> CASE ID whens END .)
    INTEGER         reduce using rule 126 (control -> CASE ID whens END .)
    $end            reduce using rule 126 (control -> CASE ID whens END .)
    END             reduce using rule 126 (control -> CASE ID whens END .)
    RETURN          reduce using rule 126 (control -> CASE ID whens END .)
    ELSE            reduce using rule 126 (control -> CASE ID whens END .)
    ELSIF           reduce using rule 126 (control -> CASE ID whens END .)


state 217

    (124) whens -> when whens .

    END             reduce using rule 124 (whens -> when whens .)
    ELSE            reduce using rule 124 (whens -> when whens .)


state 218

    (119) when -> WHEN literal .
    (120) when -> WHEN literal . THEN
    (37) comparation -> literal . EQUAL literal
    (39) comparation -> literal . EQUAL ID
    (41) comparation -> literal . NOT_EQ literal
    (43) comparation -> literal . NOT_EQ ID
    (45) comparation -> literal . LT_OR_EQ literal
    (47) comparation -> literal . LT_OR_EQ ID
    (49) comparation -> literal . GT_OR_EQ literal
    (51) comparation -> literal . GT_OR_EQ ID
    (53) comparation -> literal . LESS_THAN literal
    (55) comparation -> literal . LESS_THAN ID
    (57) comparation -> literal . GREATER_THAN literal
    (59) comparation -> literal . GREATER_THAN ID

    WHEN            reduce using rule 119 (when -> WHEN literal .)
    END             reduce using rule 119 (when -> WHEN literal .)
    ELSE            reduce using rule 119 (when -> WHEN literal .)
    THEN            shift and go to state 265
    EQUAL           shift and go to state 97
    NOT_EQ          shift and go to state 98
    LT_OR_EQ        shift and go to state 99
    GT_OR_EQ        shift and go to state 100
    LESS_THAN       shift and go to state 101
    GREATER_THAN    shift and go to state 102


state 219

    (121) when -> WHEN comparation .
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations

    WHEN            reduce using rule 121 (when -> WHEN comparation .)
    END             reduce using rule 121 (when -> WHEN comparation .)
    ELSE            reduce using rule 121 (when -> WHEN comparation .)
    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95


state 220

    (122) when -> WHEN comparations .

    WHEN            reduce using rule 122 (when -> WHEN comparations .)
    END             reduce using rule 122 (when -> WHEN comparations .)
    ELSE            reduce using rule 122 (when -> WHEN comparations .)


state 221

    (11) literal -> ID .
    (38) comparation -> ID . EQUAL literal
    (40) comparation -> ID . EQUAL ID
    (42) comparation -> ID . NOT_EQ literal
    (44) comparation -> ID . NOT_EQ ID
    (46) comparation -> ID . LT_OR_EQ literal
    (48) comparation -> ID . LT_OR_EQ ID
    (50) comparation -> ID . GT_OR_EQ literal
    (52) comparation -> ID . GT_OR_EQ ID
    (54) comparation -> ID . LESS_THAN literal
    (56) comparation -> ID . LESS_THAN ID
    (58) comparation -> ID . GREATER_THAN literal
    (60) comparation -> ID . GREATER_THAN ID

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LT_OR_EQ resolved as shift
  ! shift/reduce conflict for GT_OR_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
    THEN            reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)
    EQUAL           shift and go to state 103
    NOT_EQ          shift and go to state 104
    LT_OR_EQ        shift and go to state 105
    GT_OR_EQ        shift and go to state 106
    LESS_THAN       shift and go to state 107
    GREATER_THAN    shift and go to state 108

  ! EQUAL           [ reduce using rule 11 (literal -> ID .) ]
  ! NOT_EQ          [ reduce using rule 11 (literal -> ID .) ]
  ! LT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! GT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! LESS_THAN       [ reduce using rule 11 (literal -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 11 (literal -> ID .) ]


state 222

    (12) literal -> boolean .
    (69) comparations -> boolean . AND boolean
    (70) comparations -> boolean . LOGIC_AND boolean
    (71) comparations -> boolean . OR boolean
    (72) comparations -> boolean . LOGIC_OR boolean

    THEN            reduce using rule 12 (literal -> boolean .)
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    WHEN            reduce using rule 12 (literal -> boolean .)
    END             reduce using rule 12 (literal -> boolean .)
    ELSE            reduce using rule 12 (literal -> boolean .)
    AND             shift and go to state 87
    LOGIC_AND       shift and go to state 88
    OR              shift and go to state 89
    LOGIC_OR        shift and go to state 90


state 223

    (127) control -> WHILE boolean DO statements . END

    END             shift and go to state 266


state 224

    (128) control -> WHILE comparation DO statements . END

    END             shift and go to state 267


state 225

    (129) control -> WHILE comparations DO statements . END

    END             shift and go to state 268


state 226

    (148) strucMatrix -> MATRIX L_BRACKET arrays . R_BRACKET

    R_BRACKET       shift and go to state 269


state 227

    (142) arrays -> array .
    (143) arrays -> array . COMMA arrays

    R_BRACKET       reduce using rule 142 (arrays -> array .)
    COMMA           shift and go to state 270


state 228

    (149) strucSet -> SET PERIOD NEW .
    (150) strucSet -> SET PERIOD NEW . L_PAREN R_PAREN
    (151) strucSet -> SET PERIOD NEW . L_PAREN array R_PAREN

    ID              reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    DEF             reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    IF              reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    UNLESS          reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    CASE            reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    WHILE           reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    COMPLEX         reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    RATIONAL        reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    FLOAT           reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    INTEGER         reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    $end            reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    END             reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    RETURN          reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    ELSE            reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    ELSIF           reduce using rule 149 (strucSet -> SET PERIOD NEW .)
    L_PAREN         shift and go to state 271


state 229

    (139) array -> L_BRACKET literals . R_BRACKET

    R_BRACKET       shift and go to state 272


state 230

    (140) array -> L_BRACKET ids . R_BRACKET

    R_BRACKET       shift and go to state 273


state 231

    (141) array -> L_BRACKET elements . R_BRACKET

    R_BRACKET       shift and go to state 274


state 232

    (8) ids -> ID .
    (9) ids -> ID . COMMA ids
    (11) literal -> ID .
    (130) element -> ID .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for R_BRACKET resolved using rule 8 (ids -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for R_BRACKET resolved using rule 8 (ids -> ID .)
    R_BRACKET       reduce using rule 8 (ids -> ID .)
    COMMA           shift and go to state 275

  ! COMMA           [ reduce using rule 11 (literal -> ID .) ]
  ! R_BRACKET       [ reduce using rule 11 (literal -> ID .) ]
  ! COMMA           [ reduce using rule 130 (element -> ID .) ]
  ! R_BRACKET       [ reduce using rule 130 (element -> ID .) ]


state 233

    (135) elements -> element .
    (136) elements -> element . COMMA elements

    R_BRACKET       reduce using rule 135 (elements -> element .)
    COMMA           shift and go to state 276


state 234

    (10) literal -> STRING .
    (131) element -> STRING .
    (168) range -> STRING . ELLIPSIS STRING
    (169) range -> STRING . DOUBLE_PERIOD STRING

  ! reduce/reduce conflict for COMMA resolved using rule 10 (literal -> STRING .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 10 (literal -> STRING .)
    COMMA           reduce using rule 10 (literal -> STRING .)
    R_BRACKET       reduce using rule 10 (literal -> STRING .)
    ELLIPSIS        shift and go to state 109
    DOUBLE_PERIOD   shift and go to state 110

  ! COMMA           [ reduce using rule 131 (element -> STRING .) ]
  ! R_BRACKET       [ reduce using rule 131 (element -> STRING .) ]


state 235

    (12) literal -> boolean .
    (132) element -> boolean .

  ! reduce/reduce conflict for COMMA resolved using rule 12 (literal -> boolean .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 12 (literal -> boolean .)
    COMMA           reduce using rule 12 (literal -> boolean .)
    R_BRACKET       reduce using rule 12 (literal -> boolean .)

  ! COMMA           [ reduce using rule 132 (element -> boolean .) ]
  ! R_BRACKET       [ reduce using rule 132 (element -> boolean .) ]


state 236

    (13) literal -> numeric .
    (133) element -> numeric .

  ! reduce/reduce conflict for COMMA resolved using rule 13 (literal -> numeric .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 13 (literal -> numeric .)
    COMMA           reduce using rule 13 (literal -> numeric .)
    R_BRACKET       reduce using rule 13 (literal -> numeric .)

  ! COMMA           [ reduce using rule 133 (element -> numeric .) ]
  ! R_BRACKET       [ reduce using rule 133 (element -> numeric .) ]


state 237

    (14) literal -> range .
    (134) element -> range .

  ! reduce/reduce conflict for COMMA resolved using rule 14 (literal -> range .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 14 (literal -> range .)
    COMMA           reduce using rule 14 (literal -> range .)
    R_BRACKET       reduce using rule 14 (literal -> range .)

  ! COMMA           [ reduce using rule 134 (element -> range .) ]
  ! R_BRACKET       [ reduce using rule 134 (element -> range .) ]


state 238

    (153) strucHash -> HASH PERIOD NEW .
    (154) strucHash -> HASH PERIOD NEW . L_BRACE R_BRACE
    (155) strucHash -> HASH PERIOD NEW . L_BRACE hashelems R_BRACE

    ID              reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    DEF             reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    IF              reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    UNLESS          reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    CASE            reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    WHILE           reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    COMPLEX         reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    RATIONAL        reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    FLOAT           reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    INTEGER         reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    $end            reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    END             reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    RETURN          reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    ELSE            reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    ELSIF           reduce using rule 153 (strucHash -> HASH PERIOD NEW .)
    L_BRACE         shift and go to state 277


state 239

    (90) function -> DEF ID L_PAREN literals R_PAREN . statements END
    (93) function -> DEF ID L_PAREN literals R_PAREN . statements RETURN ID END
    (96) function -> DEF ID L_PAREN literals R_PAREN . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 278
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 240

    (91) function -> DEF ID L_PAREN R_PAREN statements . END
    (94) function -> DEF ID L_PAREN R_PAREN statements . RETURN ID END
    (97) function -> DEF ID L_PAREN R_PAREN statements . RETURN literal END

    END             shift and go to state 279
    RETURN          shift and go to state 280


state 241

    (16) literals -> literal COMMA . literals
    (15) literals -> . literal
    (16) literals -> . literal COMMA literals
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 38
    ID              shift and go to state 148
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 151
    literals                       shift and go to state 281
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 242

    (95) function -> DEF ID statements RETURN ID . END
    (11) literal -> ID .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 282

  ! END             [ reduce using rule 11 (literal -> ID .) ]


state 243

    (98) function -> DEF ID statements RETURN literal . END

    END             shift and go to state 283


state 244

    (110) control -> IF boolean statements elses END .

    ID              reduce using rule 110 (control -> IF boolean statements elses END .)
    DEF             reduce using rule 110 (control -> IF boolean statements elses END .)
    IF              reduce using rule 110 (control -> IF boolean statements elses END .)
    UNLESS          reduce using rule 110 (control -> IF boolean statements elses END .)
    CASE            reduce using rule 110 (control -> IF boolean statements elses END .)
    WHILE           reduce using rule 110 (control -> IF boolean statements elses END .)
    COMPLEX         reduce using rule 110 (control -> IF boolean statements elses END .)
    RATIONAL        reduce using rule 110 (control -> IF boolean statements elses END .)
    FLOAT           reduce using rule 110 (control -> IF boolean statements elses END .)
    INTEGER         reduce using rule 110 (control -> IF boolean statements elses END .)
    $end            reduce using rule 110 (control -> IF boolean statements elses END .)
    END             reduce using rule 110 (control -> IF boolean statements elses END .)
    RETURN          reduce using rule 110 (control -> IF boolean statements elses END .)
    ELSE            reduce using rule 110 (control -> IF boolean statements elses END .)
    ELSIF           reduce using rule 110 (control -> IF boolean statements elses END .)


state 245

    (106) elses -> elsif elses .

    END             reduce using rule 106 (elses -> elsif elses .)


state 246

    (99) else -> ELSE boolean . statements
    (69) comparations -> boolean . AND boolean
    (70) comparations -> boolean . LOGIC_AND boolean
    (71) comparations -> boolean . OR boolean
    (72) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 87
    LOGIC_AND       shift and go to state 88
    OR              shift and go to state 89
    LOGIC_OR        shift and go to state 90
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 284
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 247

    (100) else -> ELSE comparation . statements
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 285
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 248

    (101) else -> ELSE comparations . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 286
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 249

    (102) elsif -> ELSIF boolean . statements
    (69) comparations -> boolean . AND boolean
    (70) comparations -> boolean . LOGIC_AND boolean
    (71) comparations -> boolean . OR boolean
    (72) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 87
    LOGIC_AND       shift and go to state 88
    OR              shift and go to state 89
    LOGIC_OR        shift and go to state 90
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 287
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 250

    (103) elsif -> ELSIF comparation . statements
    (61) comparations -> comparation . AND comparation
    (62) comparations -> comparation . LOGIC_AND comparation
    (63) comparations -> comparation . AND comparations
    (64) comparations -> comparation . LOGIC_AND comparations
    (65) comparations -> comparation . OR comparation
    (66) comparations -> comparation . LOGIC_OR comparation
    (67) comparations -> comparation . OR comparations
    (68) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 92
    LOGIC_AND       shift and go to state 93
    OR              shift and go to state 94
    LOGIC_OR        shift and go to state 95
    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 288
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 251

    (104) elsif -> ELSIF comparations . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (73) assignment -> . ID ASSIGN ID
    (74) assignment -> . ID ASSIGN NIL
    (75) assignment -> . ID ASSIGN struc
    (76) assignment -> . ID ASSIGN literal
    (77) assignment -> . ID ASSIGN arithmetic
    (78) assignment -> . strucArray ASSIGN ID
    (79) assignment -> . strucArray ASSIGN strucArray
    (80) assignment -> . ID ADD_ASSIGN ID
    (81) assignment -> . ID ADD_ASSIGN numeric
    (82) assignment -> . ID SUBS_ASSIGN ID
    (83) assignment -> . ID SUBS_ASSIGN numeric
    (84) assignment -> . ID MULT_ASSIGN ID
    (85) assignment -> . ID MULT_ASSIGN numeric
    (86) assignment -> . ID DIV_ASSIGN ID
    (87) assignment -> . ID DIV_ASSIGN numeric
    (88) assignment -> . ID MOD_ASSIGN ID
    (89) assignment -> . ID MOD_ASSIGN numeric
    (90) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (91) function -> . DEF ID L_PAREN R_PAREN statements END
    (92) function -> . DEF ID statements END
    (93) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (94) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (95) function -> . DEF ID statements RETURN ID END
    (96) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (97) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (98) function -> . DEF ID statements RETURN literal END
    (107) control -> . IF boolean statements END
    (108) control -> . IF comparation statements END
    (109) control -> . IF comparations statements END
    (110) control -> . IF boolean statements elses END
    (111) control -> . IF comparation statements elses END
    (112) control -> . IF comparations statements elses END
    (113) control -> . UNLESS boolean COLON statements END
    (114) control -> . UNLESS comparation COLON statements END
    (115) control -> . UNLESS comparations COLON statements END
    (116) control -> . UNLESS boolean statements elses END
    (117) control -> . UNLESS comparation statements elses END
    (118) control -> . UNLESS comparations statements elses END
    (125) control -> . CASE ID whens else END
    (126) control -> . CASE ID whens END
    (127) control -> . WHILE boolean DO statements END
    (128) control -> . WHILE comparation DO statements END
    (129) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (137) strucArray -> . ID L_BRACKET ID R_BRACKET
    (138) strucArray -> . ID L_BRACKET arithmetic R_BRACKET
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 11
    IF              shift and go to state 12
    UNLESS          shift and go to state 13
    CASE            shift and go to state 14
    WHILE           shift and go to state 15
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 20

    statements                     shift and go to state 289
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    strucArray                     shift and go to state 9
    numeric                        shift and go to state 10
    value                          shift and go to state 16

state 252

    (111) control -> IF comparation statements elses END .

    ID              reduce using rule 111 (control -> IF comparation statements elses END .)
    DEF             reduce using rule 111 (control -> IF comparation statements elses END .)
    IF              reduce using rule 111 (control -> IF comparation statements elses END .)
    UNLESS          reduce using rule 111 (control -> IF comparation statements elses END .)
    CASE            reduce using rule 111 (control -> IF comparation statements elses END .)
    WHILE           reduce using rule 111 (control -> IF comparation statements elses END .)
    COMPLEX         reduce using rule 111 (control -> IF comparation statements elses END .)
    RATIONAL        reduce using rule 111 (control -> IF comparation statements elses END .)
    FLOAT           reduce using rule 111 (control -> IF comparation statements elses END .)
    INTEGER         reduce using rule 111 (control -> IF comparation statements elses END .)
    $end            reduce using rule 111 (control -> IF comparation statements elses END .)
    END             reduce using rule 111 (control -> IF comparation statements elses END .)
    RETURN          reduce using rule 111 (control -> IF comparation statements elses END .)
    ELSE            reduce using rule 111 (control -> IF comparation statements elses END .)
    ELSIF           reduce using rule 111 (control -> IF comparation statements elses END .)


state 253

    (112) control -> IF comparations statements elses END .

    ID              reduce using rule 112 (control -> IF comparations statements elses END .)
    DEF             reduce using rule 112 (control -> IF comparations statements elses END .)
    IF              reduce using rule 112 (control -> IF comparations statements elses END .)
    UNLESS          reduce using rule 112 (control -> IF comparations statements elses END .)
    CASE            reduce using rule 112 (control -> IF comparations statements elses END .)
    WHILE           reduce using rule 112 (control -> IF comparations statements elses END .)
    COMPLEX         reduce using rule 112 (control -> IF comparations statements elses END .)
    RATIONAL        reduce using rule 112 (control -> IF comparations statements elses END .)
    FLOAT           reduce using rule 112 (control -> IF comparations statements elses END .)
    INTEGER         reduce using rule 112 (control -> IF comparations statements elses END .)
    $end            reduce using rule 112 (control -> IF comparations statements elses END .)
    END             reduce using rule 112 (control -> IF comparations statements elses END .)
    RETURN          reduce using rule 112 (control -> IF comparations statements elses END .)
    ELSE            reduce using rule 112 (control -> IF comparations statements elses END .)
    ELSIF           reduce using rule 112 (control -> IF comparations statements elses END .)


state 254

    (162) range -> L_PAREN INTEGER ELLIPSIS INTEGER . R_PAREN

    R_PAREN         shift and go to state 290


state 255

    (163) range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER . R_PAREN

    R_PAREN         shift and go to state 291


state 256

    (166) range -> L_PAREN STRING ELLIPSIS STRING .

    EQUAL           reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    NOT_EQ          reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LT_OR_EQ        reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    GT_OR_EQ        reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LESS_THAN       reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    GREATER_THAN    reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ID              reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    DEF             reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    IF              reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    UNLESS          reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    CASE            reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    WHILE           reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COMPLEX         reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    RATIONAL        reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    FLOAT           reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    INTEGER         reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    $end            reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    END             reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    RETURN          reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ELSE            reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ELSIF           reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COMMA           reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_PAREN         reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    AND             reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LOGIC_AND       reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    OR              reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LOGIC_OR        reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COLON           reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    DO              reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    WHEN            reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    THEN            reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_BRACKET       reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_BRACE         reduce using rule 166 (range -> L_PAREN STRING ELLIPSIS STRING .)


state 257

    (167) range -> L_PAREN STRING DOUBLE_PERIOD STRING .

    EQUAL           reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    NOT_EQ          reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LT_OR_EQ        reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    GT_OR_EQ        reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LESS_THAN       reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    GREATER_THAN    reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ID              reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    DEF             reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    IF              reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    UNLESS          reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    CASE            reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    WHILE           reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COMPLEX         reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    RATIONAL        reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    FLOAT           reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    INTEGER         reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    $end            reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    END             reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    RETURN          reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ELSE            reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ELSIF           reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COMMA           reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_PAREN         reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    AND             reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LOGIC_AND       reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    OR              reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LOGIC_OR        reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COLON           reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    DO              reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    WHEN            reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    THEN            reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_BRACKET       reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_BRACE         reduce using rule 167 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)


state 258

    (113) control -> UNLESS boolean COLON statements END .

    ID              reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    DEF             reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    IF              reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    UNLESS          reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    CASE            reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    WHILE           reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    COMPLEX         reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    RATIONAL        reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    FLOAT           reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    INTEGER         reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    $end            reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    END             reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    RETURN          reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    ELSE            reduce using rule 113 (control -> UNLESS boolean COLON statements END .)
    ELSIF           reduce using rule 113 (control -> UNLESS boolean COLON statements END .)


state 259

    (116) control -> UNLESS boolean statements elses END .

    ID              reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    DEF             reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    IF              reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    UNLESS          reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    CASE            reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    WHILE           reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    COMPLEX         reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    RATIONAL        reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    FLOAT           reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    INTEGER         reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    $end            reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    END             reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    RETURN          reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    ELSE            reduce using rule 116 (control -> UNLESS boolean statements elses END .)
    ELSIF           reduce using rule 116 (control -> UNLESS boolean statements elses END .)


state 260

    (114) control -> UNLESS comparation COLON statements END .

    ID              reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    DEF             reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    IF              reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    UNLESS          reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    CASE            reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    WHILE           reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    COMPLEX         reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    RATIONAL        reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    FLOAT           reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    INTEGER         reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    $end            reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    END             reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    RETURN          reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    ELSE            reduce using rule 114 (control -> UNLESS comparation COLON statements END .)
    ELSIF           reduce using rule 114 (control -> UNLESS comparation COLON statements END .)


state 261

    (117) control -> UNLESS comparation statements elses END .

    ID              reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    DEF             reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    IF              reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    UNLESS          reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    CASE            reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    WHILE           reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    COMPLEX         reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    RATIONAL        reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    FLOAT           reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    INTEGER         reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    $end            reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    END             reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    RETURN          reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    ELSE            reduce using rule 117 (control -> UNLESS comparation statements elses END .)
    ELSIF           reduce using rule 117 (control -> UNLESS comparation statements elses END .)


state 262

    (115) control -> UNLESS comparations COLON statements END .

    ID              reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    DEF             reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    IF              reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    UNLESS          reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    CASE            reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    WHILE           reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    COMPLEX         reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    RATIONAL        reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    FLOAT           reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    INTEGER         reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    $end            reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    END             reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    RETURN          reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    ELSE            reduce using rule 115 (control -> UNLESS comparations COLON statements END .)
    ELSIF           reduce using rule 115 (control -> UNLESS comparations COLON statements END .)


state 263

    (118) control -> UNLESS comparations statements elses END .

    ID              reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    DEF             reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    IF              reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    UNLESS          reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    CASE            reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    WHILE           reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    COMPLEX         reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    RATIONAL        reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    FLOAT           reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    INTEGER         reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    $end            reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    END             reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    RETURN          reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    ELSE            reduce using rule 118 (control -> UNLESS comparations statements elses END .)
    ELSIF           reduce using rule 118 (control -> UNLESS comparations statements elses END .)


state 264

    (125) control -> CASE ID whens else END .

    ID              reduce using rule 125 (control -> CASE ID whens else END .)
    DEF             reduce using rule 125 (control -> CASE ID whens else END .)
    IF              reduce using rule 125 (control -> CASE ID whens else END .)
    UNLESS          reduce using rule 125 (control -> CASE ID whens else END .)
    CASE            reduce using rule 125 (control -> CASE ID whens else END .)
    WHILE           reduce using rule 125 (control -> CASE ID whens else END .)
    COMPLEX         reduce using rule 125 (control -> CASE ID whens else END .)
    RATIONAL        reduce using rule 125 (control -> CASE ID whens else END .)
    FLOAT           reduce using rule 125 (control -> CASE ID whens else END .)
    INTEGER         reduce using rule 125 (control -> CASE ID whens else END .)
    $end            reduce using rule 125 (control -> CASE ID whens else END .)
    END             reduce using rule 125 (control -> CASE ID whens else END .)
    RETURN          reduce using rule 125 (control -> CASE ID whens else END .)
    ELSE            reduce using rule 125 (control -> CASE ID whens else END .)
    ELSIF           reduce using rule 125 (control -> CASE ID whens else END .)


state 265

    (120) when -> WHEN literal THEN .

    WHEN            reduce using rule 120 (when -> WHEN literal THEN .)
    END             reduce using rule 120 (when -> WHEN literal THEN .)
    ELSE            reduce using rule 120 (when -> WHEN literal THEN .)


state 266

    (127) control -> WHILE boolean DO statements END .

    ID              reduce using rule 127 (control -> WHILE boolean DO statements END .)
    DEF             reduce using rule 127 (control -> WHILE boolean DO statements END .)
    IF              reduce using rule 127 (control -> WHILE boolean DO statements END .)
    UNLESS          reduce using rule 127 (control -> WHILE boolean DO statements END .)
    CASE            reduce using rule 127 (control -> WHILE boolean DO statements END .)
    WHILE           reduce using rule 127 (control -> WHILE boolean DO statements END .)
    COMPLEX         reduce using rule 127 (control -> WHILE boolean DO statements END .)
    RATIONAL        reduce using rule 127 (control -> WHILE boolean DO statements END .)
    FLOAT           reduce using rule 127 (control -> WHILE boolean DO statements END .)
    INTEGER         reduce using rule 127 (control -> WHILE boolean DO statements END .)
    $end            reduce using rule 127 (control -> WHILE boolean DO statements END .)
    END             reduce using rule 127 (control -> WHILE boolean DO statements END .)
    RETURN          reduce using rule 127 (control -> WHILE boolean DO statements END .)
    ELSE            reduce using rule 127 (control -> WHILE boolean DO statements END .)
    ELSIF           reduce using rule 127 (control -> WHILE boolean DO statements END .)


state 267

    (128) control -> WHILE comparation DO statements END .

    ID              reduce using rule 128 (control -> WHILE comparation DO statements END .)
    DEF             reduce using rule 128 (control -> WHILE comparation DO statements END .)
    IF              reduce using rule 128 (control -> WHILE comparation DO statements END .)
    UNLESS          reduce using rule 128 (control -> WHILE comparation DO statements END .)
    CASE            reduce using rule 128 (control -> WHILE comparation DO statements END .)
    WHILE           reduce using rule 128 (control -> WHILE comparation DO statements END .)
    COMPLEX         reduce using rule 128 (control -> WHILE comparation DO statements END .)
    RATIONAL        reduce using rule 128 (control -> WHILE comparation DO statements END .)
    FLOAT           reduce using rule 128 (control -> WHILE comparation DO statements END .)
    INTEGER         reduce using rule 128 (control -> WHILE comparation DO statements END .)
    $end            reduce using rule 128 (control -> WHILE comparation DO statements END .)
    END             reduce using rule 128 (control -> WHILE comparation DO statements END .)
    RETURN          reduce using rule 128 (control -> WHILE comparation DO statements END .)
    ELSE            reduce using rule 128 (control -> WHILE comparation DO statements END .)
    ELSIF           reduce using rule 128 (control -> WHILE comparation DO statements END .)


state 268

    (129) control -> WHILE comparations DO statements END .

    ID              reduce using rule 129 (control -> WHILE comparations DO statements END .)
    DEF             reduce using rule 129 (control -> WHILE comparations DO statements END .)
    IF              reduce using rule 129 (control -> WHILE comparations DO statements END .)
    UNLESS          reduce using rule 129 (control -> WHILE comparations DO statements END .)
    CASE            reduce using rule 129 (control -> WHILE comparations DO statements END .)
    WHILE           reduce using rule 129 (control -> WHILE comparations DO statements END .)
    COMPLEX         reduce using rule 129 (control -> WHILE comparations DO statements END .)
    RATIONAL        reduce using rule 129 (control -> WHILE comparations DO statements END .)
    FLOAT           reduce using rule 129 (control -> WHILE comparations DO statements END .)
    INTEGER         reduce using rule 129 (control -> WHILE comparations DO statements END .)
    $end            reduce using rule 129 (control -> WHILE comparations DO statements END .)
    END             reduce using rule 129 (control -> WHILE comparations DO statements END .)
    RETURN          reduce using rule 129 (control -> WHILE comparations DO statements END .)
    ELSE            reduce using rule 129 (control -> WHILE comparations DO statements END .)
    ELSIF           reduce using rule 129 (control -> WHILE comparations DO statements END .)


state 269

    (148) strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .

    ID              reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    DEF             reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    IF              reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    UNLESS          reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    CASE            reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    WHILE           reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    COMPLEX         reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    RATIONAL        reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    FLOAT           reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    INTEGER         reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    $end            reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    END             reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    RETURN          reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    ELSE            reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    ELSIF           reduce using rule 148 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)


state 270

    (143) arrays -> array COMMA . arrays
    (142) arrays -> . array
    (143) arrays -> . array COMMA arrays
    (139) array -> . L_BRACKET literals R_BRACKET
    (140) array -> . L_BRACKET ids R_BRACKET
    (141) array -> . L_BRACKET elements R_BRACKET

    L_BRACKET       shift and go to state 143

    array                          shift and go to state 227
    arrays                         shift and go to state 292

state 271

    (150) strucSet -> SET PERIOD NEW L_PAREN . R_PAREN
    (151) strucSet -> SET PERIOD NEW L_PAREN . array R_PAREN
    (139) array -> . L_BRACKET literals R_BRACKET
    (140) array -> . L_BRACKET ids R_BRACKET
    (141) array -> . L_BRACKET elements R_BRACKET

    R_PAREN         shift and go to state 293
    L_BRACKET       shift and go to state 143

    array                          shift and go to state 294

state 272

    (139) array -> L_BRACKET literals R_BRACKET .

    ID              reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    DEF             reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    IF              reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    UNLESS          reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    CASE            reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    WHILE           reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    COMPLEX         reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    RATIONAL        reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    FLOAT           reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    INTEGER         reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    $end            reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    END             reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    RETURN          reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    ELSE            reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    ELSIF           reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    COMMA           reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    R_BRACKET       reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)
    R_PAREN         reduce using rule 139 (array -> L_BRACKET literals R_BRACKET .)


state 273

    (140) array -> L_BRACKET ids R_BRACKET .

    ID              reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    DEF             reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    IF              reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    UNLESS          reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    CASE            reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    WHILE           reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    COMPLEX         reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    RATIONAL        reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    FLOAT           reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    INTEGER         reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    $end            reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    END             reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    RETURN          reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    ELSE            reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    ELSIF           reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    COMMA           reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    R_BRACKET       reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)
    R_PAREN         reduce using rule 140 (array -> L_BRACKET ids R_BRACKET .)


state 274

    (141) array -> L_BRACKET elements R_BRACKET .

    ID              reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    DEF             reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    IF              reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    UNLESS          reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    CASE            reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    WHILE           reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    COMPLEX         reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    RATIONAL        reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    FLOAT           reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    INTEGER         reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    $end            reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    END             reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    RETURN          reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    ELSE            reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    ELSIF           reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    COMMA           reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    R_BRACKET       reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)
    R_PAREN         reduce using rule 141 (array -> L_BRACKET elements R_BRACKET .)


state 275

    (9) ids -> ID COMMA . ids
    (8) ids -> . ID
    (9) ids -> . ID COMMA ids

    ID              shift and go to state 295

    ids                            shift and go to state 296

state 276

    (136) elements -> element COMMA . elements
    (135) elements -> . element
    (136) elements -> . element COMMA elements
    (130) element -> . ID
    (131) element -> . STRING
    (132) element -> . boolean
    (133) element -> . numeric
    (134) element -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 298
    STRING          shift and go to state 299
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    element                        shift and go to state 233
    elements                       shift and go to state 297
    boolean                        shift and go to state 300
    numeric                        shift and go to state 301
    range                          shift and go to state 302

state 277

    (154) strucHash -> HASH PERIOD NEW L_BRACE . R_BRACE
    (155) strucHash -> HASH PERIOD NEW L_BRACE . hashelems R_BRACE
    (160) hashelems -> . hashelem COMMA hashelem
    (161) hashelems -> . hashelem COMMA hashelems
    (157) hashelem -> . COLON ID RW_DOUBLE_ARROW literal
    (158) hashelem -> . ID COLON literal
    (159) hashelem -> . STRING COLON literal

    R_BRACE         shift and go to state 303
    COLON           shift and go to state 306
    ID              shift and go to state 307
    STRING          shift and go to state 308

    hashelems                      shift and go to state 304
    hashelem                       shift and go to state 305

state 278

    (90) function -> DEF ID L_PAREN literals R_PAREN statements . END
    (93) function -> DEF ID L_PAREN literals R_PAREN statements . RETURN ID END
    (96) function -> DEF ID L_PAREN literals R_PAREN statements . RETURN literal END

    END             shift and go to state 309
    RETURN          shift and go to state 310


state 279

    (91) function -> DEF ID L_PAREN R_PAREN statements END .

    ID              reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    DEF             reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    IF              reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    UNLESS          reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    CASE            reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    WHILE           reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    COMPLEX         reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    RATIONAL        reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    FLOAT           reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    INTEGER         reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    $end            reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    END             reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    RETURN          reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    ELSE            reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)
    ELSIF           reduce using rule 91 (function -> DEF ID L_PAREN R_PAREN statements END .)


state 280

    (94) function -> DEF ID L_PAREN R_PAREN statements RETURN . ID END
    (97) function -> DEF ID L_PAREN R_PAREN statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 311
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 312
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 281

    (16) literals -> literal COMMA literals .

    R_PAREN         reduce using rule 16 (literals -> literal COMMA literals .)
    R_BRACKET       reduce using rule 16 (literals -> literal COMMA literals .)


state 282

    (95) function -> DEF ID statements RETURN ID END .

    ID              reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    DEF             reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    IF              reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    UNLESS          reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    CASE            reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    WHILE           reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    COMPLEX         reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    RATIONAL        reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    FLOAT           reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    INTEGER         reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    $end            reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    END             reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    RETURN          reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    ELSE            reduce using rule 95 (function -> DEF ID statements RETURN ID END .)
    ELSIF           reduce using rule 95 (function -> DEF ID statements RETURN ID END .)


state 283

    (98) function -> DEF ID statements RETURN literal END .

    ID              reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    DEF             reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    IF              reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    UNLESS          reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    CASE            reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    WHILE           reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    COMPLEX         reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    RATIONAL        reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    FLOAT           reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    INTEGER         reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    $end            reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    END             reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    RETURN          reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    ELSE            reduce using rule 98 (function -> DEF ID statements RETURN literal END .)
    ELSIF           reduce using rule 98 (function -> DEF ID statements RETURN literal END .)


state 284

    (99) else -> ELSE boolean statements .

    END             reduce using rule 99 (else -> ELSE boolean statements .)


state 285

    (100) else -> ELSE comparation statements .

    END             reduce using rule 100 (else -> ELSE comparation statements .)


state 286

    (101) else -> ELSE comparations statements .

    END             reduce using rule 101 (else -> ELSE comparations statements .)


state 287

    (102) elsif -> ELSIF boolean statements .

    ELSE            reduce using rule 102 (elsif -> ELSIF boolean statements .)
    ELSIF           reduce using rule 102 (elsif -> ELSIF boolean statements .)


state 288

    (103) elsif -> ELSIF comparation statements .

    ELSE            reduce using rule 103 (elsif -> ELSIF comparation statements .)
    ELSIF           reduce using rule 103 (elsif -> ELSIF comparation statements .)


state 289

    (104) elsif -> ELSIF comparations statements .

    ELSE            reduce using rule 104 (elsif -> ELSIF comparations statements .)
    ELSIF           reduce using rule 104 (elsif -> ELSIF comparations statements .)


state 290

    (162) range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .

    EQUAL           reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    NOT_EQ          reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LT_OR_EQ        reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    GT_OR_EQ        reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LESS_THAN       reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    GREATER_THAN    reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ID              reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    DEF             reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    IF              reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    UNLESS          reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    CASE            reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    WHILE           reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COMPLEX         reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    RATIONAL        reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    FLOAT           reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    INTEGER         reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    $end            reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    END             reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    RETURN          reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ELSE            reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ELSIF           reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COMMA           reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_PAREN         reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    AND             reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LOGIC_AND       reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    OR              reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LOGIC_OR        reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COLON           reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    DO              reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    WHEN            reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    THEN            reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_BRACKET       reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_BRACE         reduce using rule 162 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)


state 291

    (163) range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .

    EQUAL           reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    NOT_EQ          reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LT_OR_EQ        reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    GT_OR_EQ        reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LESS_THAN       reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    GREATER_THAN    reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ID              reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    DEF             reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    IF              reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    UNLESS          reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    CASE            reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    WHILE           reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COMPLEX         reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    RATIONAL        reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    FLOAT           reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    INTEGER         reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    $end            reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    END             reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    RETURN          reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ELSE            reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ELSIF           reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COMMA           reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_PAREN         reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    AND             reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LOGIC_AND       reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    OR              reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LOGIC_OR        reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COLON           reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    DO              reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    WHEN            reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    THEN            reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_BRACKET       reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_BRACE         reduce using rule 163 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)


state 292

    (143) arrays -> array COMMA arrays .

    R_BRACKET       reduce using rule 143 (arrays -> array COMMA arrays .)


state 293

    (150) strucSet -> SET PERIOD NEW L_PAREN R_PAREN .

    ID              reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    DEF             reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    IF              reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    UNLESS          reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    CASE            reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    WHILE           reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    COMPLEX         reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    RATIONAL        reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    FLOAT           reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    INTEGER         reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    $end            reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    END             reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    RETURN          reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    ELSE            reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    ELSIF           reduce using rule 150 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)


state 294

    (151) strucSet -> SET PERIOD NEW L_PAREN array . R_PAREN

    R_PAREN         shift and go to state 313


state 295

    (8) ids -> ID .
    (9) ids -> ID . COMMA ids

    R_BRACKET       reduce using rule 8 (ids -> ID .)
    COMMA           shift and go to state 275


state 296

    (9) ids -> ID COMMA ids .

    R_BRACKET       reduce using rule 9 (ids -> ID COMMA ids .)


state 297

    (136) elements -> element COMMA elements .

    R_BRACKET       reduce using rule 136 (elements -> element COMMA elements .)


state 298

    (130) element -> ID .

    COMMA           reduce using rule 130 (element -> ID .)
    R_BRACKET       reduce using rule 130 (element -> ID .)


state 299

    (131) element -> STRING .
    (168) range -> STRING . ELLIPSIS STRING
    (169) range -> STRING . DOUBLE_PERIOD STRING

    COMMA           reduce using rule 131 (element -> STRING .)
    R_BRACKET       reduce using rule 131 (element -> STRING .)
    ELLIPSIS        shift and go to state 109
    DOUBLE_PERIOD   shift and go to state 110


state 300

    (132) element -> boolean .

    COMMA           reduce using rule 132 (element -> boolean .)
    R_BRACKET       reduce using rule 132 (element -> boolean .)


state 301

    (133) element -> numeric .

    COMMA           reduce using rule 133 (element -> numeric .)
    R_BRACKET       reduce using rule 133 (element -> numeric .)


state 302

    (134) element -> range .

    COMMA           reduce using rule 134 (element -> range .)
    R_BRACKET       reduce using rule 134 (element -> range .)


state 303

    (154) strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .

    ID              reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    DEF             reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    IF              reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    UNLESS          reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    CASE            reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    WHILE           reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    COMPLEX         reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    RATIONAL        reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    FLOAT           reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    INTEGER         reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    $end            reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    END             reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    RETURN          reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    ELSE            reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    ELSIF           reduce using rule 154 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)


state 304

    (155) strucHash -> HASH PERIOD NEW L_BRACE hashelems . R_BRACE

    R_BRACE         shift and go to state 314


state 305

    (160) hashelems -> hashelem . COMMA hashelem
    (161) hashelems -> hashelem . COMMA hashelems

    COMMA           shift and go to state 315


state 306

    (157) hashelem -> COLON . ID RW_DOUBLE_ARROW literal

    ID              shift and go to state 316


state 307

    (158) hashelem -> ID . COLON literal

    COLON           shift and go to state 317


state 308

    (159) hashelem -> STRING . COLON literal

    COLON           shift and go to state 318


state 309

    (90) function -> DEF ID L_PAREN literals R_PAREN statements END .

    ID              reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    DEF             reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    IF              reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    UNLESS          reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    CASE            reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    WHILE           reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    COMPLEX         reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    RATIONAL        reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    FLOAT           reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    INTEGER         reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    $end            reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    END             reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    RETURN          reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    ELSE            reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    ELSIF           reduce using rule 90 (function -> DEF ID L_PAREN literals R_PAREN statements END .)


state 310

    (93) function -> DEF ID L_PAREN literals R_PAREN statements RETURN . ID END
    (96) function -> DEF ID L_PAREN literals R_PAREN statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 319
    STRING          shift and go to state 38
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 320
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 311

    (94) function -> DEF ID L_PAREN R_PAREN statements RETURN ID . END
    (11) literal -> ID .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 321

  ! END             [ reduce using rule 11 (literal -> ID .) ]


state 312

    (97) function -> DEF ID L_PAREN R_PAREN statements RETURN literal . END

    END             shift and go to state 322


state 313

    (151) strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .

    ID              reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    DEF             reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    IF              reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    UNLESS          reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    CASE            reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    WHILE           reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    COMPLEX         reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    RATIONAL        reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    FLOAT           reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    INTEGER         reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    $end            reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    END             reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    RETURN          reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    ELSE            reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    ELSIF           reduce using rule 151 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)


state 314

    (155) strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .

    ID              reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    DEF             reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    IF              reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    UNLESS          reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    CASE            reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    WHILE           reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    COMPLEX         reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    RATIONAL        reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    FLOAT           reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    INTEGER         reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    $end            reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    END             reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    RETURN          reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    ELSE            reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    ELSIF           reduce using rule 155 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)


state 315

    (160) hashelems -> hashelem COMMA . hashelem
    (161) hashelems -> hashelem COMMA . hashelems
    (157) hashelem -> . COLON ID RW_DOUBLE_ARROW literal
    (158) hashelem -> . ID COLON literal
    (159) hashelem -> . STRING COLON literal
    (160) hashelems -> . hashelem COMMA hashelem
    (161) hashelems -> . hashelem COMMA hashelems

    COLON           shift and go to state 306
    ID              shift and go to state 307
    STRING          shift and go to state 308

    hashelem                       shift and go to state 323
    hashelems                      shift and go to state 324

state 316

    (157) hashelem -> COLON ID . RW_DOUBLE_ARROW literal

    RW_DOUBLE_ARROW shift and go to state 325


state 317

    (158) hashelem -> ID COLON . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 38
    ID              shift and go to state 148
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 326
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 318

    (159) hashelem -> STRING COLON . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 38
    ID              shift and go to state 148
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 327
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 319

    (93) function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID . END
    (11) literal -> ID .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 328

  ! END             [ reduce using rule 11 (literal -> ID .) ]


state 320

    (96) function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal . END

    END             shift and go to state 329


state 321

    (94) function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .

    ID              reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    DEF             reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    IF              reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    UNLESS          reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    CASE            reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    WHILE           reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    COMPLEX         reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    RATIONAL        reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    FLOAT           reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    INTEGER         reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    $end            reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    END             reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    RETURN          reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    ELSE            reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    ELSIF           reduce using rule 94 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)


state 322

    (97) function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .

    ID              reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    DEF             reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    IF              reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    UNLESS          reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    CASE            reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    WHILE           reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    COMPLEX         reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    RATIONAL        reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    FLOAT           reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    INTEGER         reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    $end            reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    END             reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    RETURN          reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    ELSE            reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    ELSIF           reduce using rule 97 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)


state 323

    (160) hashelems -> hashelem COMMA hashelem .
    (160) hashelems -> hashelem . COMMA hashelem
    (161) hashelems -> hashelem . COMMA hashelems

    R_BRACE         reduce using rule 160 (hashelems -> hashelem COMMA hashelem .)
    COMMA           shift and go to state 315


state 324

    (161) hashelems -> hashelem COMMA hashelems .

    R_BRACE         reduce using rule 161 (hashelems -> hashelem COMMA hashelems .)


state 325

    (157) hashelem -> COLON ID RW_DOUBLE_ARROW . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (162) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (163) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (164) range -> . INTEGER ELLIPSIS INTEGER
    (165) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (166) range -> . L_PAREN STRING ELLIPSIS STRING
    (167) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (168) range -> . STRING ELLIPSIS STRING
    (169) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 38
    ID              shift and go to state 148
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    COMPLEX         shift and go to state 17
    RATIONAL        shift and go to state 18
    FLOAT           shift and go to state 19
    INTEGER         shift and go to state 41
    L_PAREN         shift and go to state 42

    literal                        shift and go to state 330
    boolean                        shift and go to state 65
    numeric                        shift and go to state 39
    range                          shift and go to state 40

state 326

    (158) hashelem -> ID COLON literal .

    COMMA           reduce using rule 158 (hashelem -> ID COLON literal .)
    R_BRACE         reduce using rule 158 (hashelem -> ID COLON literal .)


state 327

    (159) hashelem -> STRING COLON literal .

    COMMA           reduce using rule 159 (hashelem -> STRING COLON literal .)
    R_BRACE         reduce using rule 159 (hashelem -> STRING COLON literal .)


state 328

    (93) function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .

    ID              reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    DEF             reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    IF              reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    UNLESS          reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    CASE            reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    WHILE           reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    COMPLEX         reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    RATIONAL        reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    FLOAT           reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    INTEGER         reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    $end            reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    END             reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    RETURN          reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    ELSE            reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    ELSIF           reduce using rule 93 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)


state 329

    (96) function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .

    ID              reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    DEF             reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    IF              reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    UNLESS          reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    CASE            reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    WHILE           reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    COMPLEX         reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    RATIONAL        reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    FLOAT           reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    INTEGER         reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    $end            reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    END             reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    RETURN          reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    ELSE            reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    ELSIF           reduce using rule 96 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)


state 330

    (157) hashelem -> COLON ID RW_DOUBLE_ARROW literal .

    COMMA           reduce using rule 157 (hashelem -> COLON ID RW_DOUBLE_ARROW literal .)
    R_BRACE         reduce using rule 157 (hashelem -> COLON ID RW_DOUBLE_ARROW literal .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 37 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 37 resolved as shift
WARNING: shift/reduce conflict for LT_OR_EQ in state 37 resolved as shift
WARNING: shift/reduce conflict for GT_OR_EQ in state 37 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 37 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 37 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 221 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 221 resolved as shift
WARNING: shift/reduce conflict for LT_OR_EQ in state 221 resolved as shift
WARNING: shift/reduce conflict for GT_OR_EQ in state 221 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 221 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 221 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 232 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 232 resolved as shift
WARNING: shift/reduce conflict for END in state 242 resolved as shift
WARNING: shift/reduce conflict for END in state 311 resolved as shift
WARNING: shift/reduce conflict for END in state 319 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (literal -> ID)
WARNING: rejected rule (assignment -> ID ASSIGN ID) in state 56
WARNING: reduce/reduce conflict in state 178 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> literal EQUAL ID) in state 178
WARNING: reduce/reduce conflict in state 180 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> literal NOT_EQ ID) in state 180
WARNING: reduce/reduce conflict in state 182 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> literal LT_OR_EQ ID) in state 182
WARNING: reduce/reduce conflict in state 184 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> literal GT_OR_EQ ID) in state 184
WARNING: reduce/reduce conflict in state 186 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> literal LESS_THAN ID) in state 186
WARNING: reduce/reduce conflict in state 188 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> literal GREATER_THAN ID) in state 188
WARNING: reduce/reduce conflict in state 189 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> ID EQUAL ID) in state 189
WARNING: reduce/reduce conflict in state 191 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> ID NOT_EQ ID) in state 191
WARNING: reduce/reduce conflict in state 193 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> ID LT_OR_EQ ID) in state 193
WARNING: reduce/reduce conflict in state 195 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> ID GT_OR_EQ ID) in state 195
WARNING: reduce/reduce conflict in state 197 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> ID LESS_THAN ID) in state 197
WARNING: reduce/reduce conflict in state 199 resolved using rule (literal -> ID)
WARNING: rejected rule (comparation -> ID GREATER_THAN ID) in state 199
WARNING: reduce/reduce conflict in state 232 resolved using rule (ids -> ID)
WARNING: rejected rule (literal -> ID) in state 232
WARNING: reduce/reduce conflict in state 232 resolved using rule (ids -> ID)
WARNING: rejected rule (element -> ID) in state 232
WARNING: reduce/reduce conflict in state 234 resolved using rule (literal -> STRING)
WARNING: rejected rule (element -> STRING) in state 234
WARNING: reduce/reduce conflict in state 235 resolved using rule (literal -> boolean)
WARNING: rejected rule (element -> boolean) in state 235
WARNING: reduce/reduce conflict in state 236 resolved using rule (literal -> numeric)
WARNING: rejected rule (element -> numeric) in state 236
WARNING: reduce/reduce conflict in state 237 resolved using rule (literal -> range)
WARNING: rejected rule (element -> range) in state 237
WARNING: Rule (assignment -> ID ASSIGN ID) is never reduced
WARNING: Rule (comparation -> literal EQUAL ID) is never reduced
WARNING: Rule (comparation -> literal NOT_EQ ID) is never reduced
WARNING: Rule (comparation -> literal LT_OR_EQ ID) is never reduced
WARNING: Rule (comparation -> literal GT_OR_EQ ID) is never reduced
WARNING: Rule (comparation -> literal LESS_THAN ID) is never reduced
WARNING: Rule (comparation -> literal GREATER_THAN ID) is never reduced
WARNING: Rule (comparation -> ID EQUAL ID) is never reduced
WARNING: Rule (comparation -> ID NOT_EQ ID) is never reduced
WARNING: Rule (comparation -> ID LT_OR_EQ ID) is never reduced
WARNING: Rule (comparation -> ID GT_OR_EQ ID) is never reduced
WARNING: Rule (comparation -> ID LESS_THAN ID) is never reduced
WARNING: Rule (comparation -> ID GREATER_THAN ID) is never reduced
