Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARRAY
    AT_SIGN
    BEGIN
    BREAK
    CLASS
    DOLLAR_SIGN
    ENSURE
    FOR
    IN
    LINE_COMMENT
    LOGIC_NOT
    NEXT
    NOT
    RETRY
    RW_ARROW
    SELF
    SEMICOLON
    SUPER
    TILDE
    UNDERSCORE
    UNTIL
    VERTICAL_BAR

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statement -> assignment
Rule 3     statement -> function
Rule 4     statement -> control
Rule 5     statement -> arithmetic
Rule 6     statements -> statement
Rule 7     statements -> statement statements
Rule 8     ids -> ID
Rule 9     ids -> ID COMMA ids
Rule 10    literal -> STRING
Rule 11    literal -> ID
Rule 12    literal -> boolean
Rule 13    literal -> numeric
Rule 14    literal -> range
Rule 15    literals -> literal
Rule 16    literals -> literal COMMA literals
Rule 17    boolean -> TRUE
Rule 18    boolean -> FALSE
Rule 19    numeric -> COMPLEX
Rule 20    numeric -> RATIONAL
Rule 21    numeric -> FLOAT
Rule 22    numeric -> INTEGER
Rule 23    value -> numeric
Rule 24    value -> ID
Rule 25    arithmetic -> value PLUS value
Rule 26    arithmetic -> value PLUS arithmetic
Rule 27    arithmetic -> value MINUS value
Rule 28    arithmetic -> value MINUS arithmetic
Rule 29    arithmetic -> value EXPO value
Rule 30    arithmetic -> value EXPO arithmetic
Rule 31    arithmetic -> value MULT value
Rule 32    arithmetic -> value MULT arithmetic
Rule 33    arithmetic -> value DIV value
Rule 34    arithmetic -> value DIV arithmetic
Rule 35    arithmetic -> value MODULO value
Rule 36    arithmetic -> value MODULO arithmetic
Rule 37    comparation -> literal EQUAL literal
Rule 38    comparation -> ID EQUAL ID
Rule 39    comparation -> literal NOT_EQ literal
Rule 40    comparation -> ID NOT_EQ ID
Rule 41    comparation -> literal LT_OR_EQ literal
Rule 42    comparation -> ID LT_OR_EQ ID
Rule 43    comparation -> literal GT_OR_EQ literal
Rule 44    comparation -> ID GT_OR_EQ ID
Rule 45    comparation -> literal LESS_THAN literal
Rule 46    comparation -> ID LESS_THAN ID
Rule 47    comparation -> literal GREATER_THAN literal
Rule 48    comparation -> ID GREATER_THAN ID
Rule 49    comparations -> comparation AND comparation
Rule 50    comparations -> comparation LOGIC_AND comparation
Rule 51    comparations -> comparation AND comparations
Rule 52    comparations -> comparation LOGIC_AND comparations
Rule 53    comparations -> comparation OR comparation
Rule 54    comparations -> comparation LOGIC_OR comparation
Rule 55    comparations -> comparation OR comparations
Rule 56    comparations -> comparation LOGIC_OR comparations
Rule 57    comparations -> boolean AND boolean
Rule 58    comparations -> boolean LOGIC_AND boolean
Rule 59    comparations -> boolean OR boolean
Rule 60    comparations -> boolean LOGIC_OR boolean
Rule 61    assignment -> ID ASSIGN ID
Rule 62    assignment -> ID ASSIGN NIL
Rule 63    assignment -> ID ASSIGN struc
Rule 64    assignment -> ID ASSIGN literal
Rule 65    assignment -> ID ASSIGN arithmetic
Rule 66    assignment -> ID ADD_ASSIGN ID
Rule 67    assignment -> ID ADD_ASSIGN numeric
Rule 68    assignment -> ID SUBS_ASSIGN ID
Rule 69    assignment -> ID SUBS_ASSIGN numeric
Rule 70    assignment -> ID MULT_ASSIGN ID
Rule 71    assignment -> ID MULT_ASSIGN numeric
Rule 72    assignment -> ID DIV_ASSIGN ID
Rule 73    assignment -> ID DIV_ASSIGN numeric
Rule 74    assignment -> ID MOD_ASSIGN ID
Rule 75    assignment -> ID MOD_ASSIGN numeric
Rule 76    function -> DEF ID L_PAREN literals R_PAREN statements END
Rule 77    function -> DEF ID L_PAREN R_PAREN statements END
Rule 78    function -> DEF ID statements END
Rule 79    function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END
Rule 80    function -> DEF ID L_PAREN R_PAREN statements RETURN ID END
Rule 81    function -> DEF ID statements RETURN ID END
Rule 82    function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END
Rule 83    function -> DEF ID L_PAREN R_PAREN statements RETURN literal END
Rule 84    function -> DEF ID statements RETURN literal END
Rule 85    else -> ELSE boolean statements
Rule 86    else -> ELSE comparation statements
Rule 87    else -> ELSE comparations statements
Rule 88    elsif -> ELSIF boolean statements
Rule 89    elsif -> ELSIF comparation statements
Rule 90    elsif -> ELSIF comparations statements
Rule 91    elses -> else
Rule 92    elses -> elsif elses
Rule 93    control -> IF boolean statements END
Rule 94    control -> IF comparation statements END
Rule 95    control -> IF comparations statements END
Rule 96    control -> IF boolean statements elses END
Rule 97    control -> IF comparation statements elses END
Rule 98    control -> IF comparations statements elses END
Rule 99    control -> UNLESS boolean COLON statements END
Rule 100   control -> UNLESS comparation COLON statements END
Rule 101   control -> UNLESS comparations COLON statements END
Rule 102   control -> UNLESS boolean statements elses END
Rule 103   control -> UNLESS comparation statements elses END
Rule 104   control -> UNLESS comparations statements elses END
Rule 105   when -> WHEN literal
Rule 106   when -> WHEN literal THEN
Rule 107   when -> WHEN comparation
Rule 108   when -> WHEN comparations
Rule 109   whens -> when
Rule 110   whens -> when whens
Rule 111   control -> CASE ID whens else END
Rule 112   control -> CASE ID whens END
Rule 113   control -> WHILE boolean DO statements END
Rule 114   control -> WHILE comparation DO statements END
Rule 115   control -> WHILE comparations DO statements END
Rule 116   element -> ID
Rule 117   element -> STRING
Rule 118   element -> boolean
Rule 119   element -> numeric
Rule 120   element -> range
Rule 121   elements -> element
Rule 122   elements -> element COMMA elements
Rule 123   array -> L_BRACKET literals R_BRACKET
Rule 124   array -> L_BRACKET ids R_BRACKET
Rule 125   array -> L_BRACKET elements R_BRACKET
Rule 126   arrays -> array
Rule 127   arrays -> array COMMA arrays
Rule 128   struc -> strucMatrix
Rule 129   struc -> strucSet
Rule 130   struc -> strucHash
Rule 131   strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET
Rule 132   strucSet -> SET PERIOD NEW
Rule 133   strucSet -> SET PERIOD NEW L_PAREN R_PAREN
Rule 134   strucSet -> SET PERIOD NEW L_PAREN array R_PAREN
Rule 135   strucSet -> SET array
Rule 136   strucHash -> HASH PERIOD NEW
Rule 137   strucHash -> HASH PERIOD NEW L_BRACE R_BRACE
Rule 138   strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE
Rule 139   strucHash -> HASH array
Rule 140   hashelem -> COLON ID RW_DOUBLE_ARROW literal
Rule 141   hashelem -> ID COLON literal
Rule 142   hashelem -> STRING COLON literal
Rule 143   hashelems -> hashelem COMMA hashelem
Rule 144   hashelems -> hashelem COMMA hashelems
Rule 145   range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
Rule 146   range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
Rule 147   range -> INTEGER ELLIPSIS INTEGER
Rule 148   range -> INTEGER DOUBLE_PERIOD INTEGER
Rule 149   range -> L_PAREN STRING ELLIPSIS STRING
Rule 150   range -> L_PAREN STRING DOUBLE_PERIOD STRING
Rule 151   range -> STRING ELLIPSIS STRING
Rule 152   range -> STRING DOUBLE_PERIOD STRING

Terminals, with rules where they appear

ADD_ASSIGN           : 66 67
AMPERSAND            : 
AND                  : 49 51 57
ARRAY                : 
ASSIGN               : 61 62 63 64 65
AT_SIGN              : 
BEGIN                : 
BREAK                : 
CASE                 : 111 112
CLASS                : 
COLON                : 99 100 101 140 141 142
COMMA                : 9 16 122 127 143 144
COMPLEX              : 19
DEF                  : 76 77 78 79 80 81 82 83 84
DIV                  : 33 34
DIV_ASSIGN           : 72 73
DO                   : 113 114 115
DOLLAR_SIGN          : 
DOUBLE_PERIOD        : 146 148 150 152
ELLIPSIS             : 145 147 149 151
ELSE                 : 85 86 87
ELSIF                : 88 89 90
END                  : 76 77 78 79 80 81 82 83 84 93 94 95 96 97 98 99 100 101 102 103 104 111 112 113 114 115
ENSURE               : 
EQUAL                : 37 38
EXPO                 : 29 30
FALSE                : 18
FLOAT                : 21
FOR                  : 
GREATER_THAN         : 47 48
GT_OR_EQ             : 43 44
HASH                 : 136 137 138 139
ID                   : 8 9 11 24 38 38 40 40 42 42 44 44 46 46 48 48 61 61 62 63 64 65 66 66 67 68 68 69 70 70 71 72 72 73 74 74 75 76 77 78 79 79 80 80 81 81 82 83 84 111 112 116 140 141
IF                   : 93 94 95 96 97 98
IN                   : 
INTEGER              : 22 145 145 146 146 147 147 148 148
LESS_THAN            : 45 46
LINE_COMMENT         : 
LOGIC_AND            : 50 52 58
LOGIC_NOT            : 
LOGIC_OR             : 54 56 60
LT_OR_EQ             : 41 42
L_BRACE              : 137 138
L_BRACKET            : 123 124 125 131
L_PAREN              : 76 77 79 80 82 83 133 134 145 146 149 150
MATRIX               : 131
MINUS                : 27 28
MODULO               : 35 36
MOD_ASSIGN           : 74 75
MULT                 : 31 32
MULT_ASSIGN          : 70 71
NEW                  : 132 133 134 136 137 138
NEXT                 : 
NIL                  : 62
NOT                  : 
NOT_EQ               : 39 40
OR                   : 53 55 59
PERIOD               : 132 133 134 136 137 138
PLUS                 : 25 26
RATIONAL             : 20
RETRY                : 
RETURN               : 79 80 81 82 83 84
RW_ARROW             : 
RW_DOUBLE_ARROW      : 140
R_BRACE              : 137 138
R_BRACKET            : 123 124 125 131
R_PAREN              : 76 77 79 80 82 83 133 134 145 146
SELF                 : 
SEMICOLON            : 
SET                  : 132 133 134 135
STRING               : 10 117 142 149 149 150 150 151 151 152 152
SUBS_ASSIGN          : 68 69
SUPER                : 
THEN                 : 106
TILDE                : 
TRUE                 : 17
UNDERSCORE           : 
UNLESS               : 99 100 101 102 103 104
UNTIL                : 
VERTICAL_BAR         : 
WHEN                 : 105 106 107 108
WHILE                : 113 114 115
error                : 

Nonterminals, with rules where they appear

arithmetic           : 5 26 28 30 32 34 36 65
array                : 126 127 134 135 139
arrays               : 127 131
assignment           : 2
boolean              : 12 57 57 58 58 59 59 60 60 85 88 93 96 99 102 113 118
comparation          : 49 49 50 50 51 52 53 53 54 54 55 56 86 89 94 97 100 103 107 114
comparations         : 51 52 55 56 87 90 95 98 101 104 108 115
control              : 4
element              : 121 122
elements             : 122 125
else                 : 91 111
elses                : 92 96 97 98 102 103 104
elsif                : 92
function             : 3
hashelem             : 143 143 144
hashelems            : 138 144
ids                  : 9 124
init                 : 0
literal              : 15 16 37 37 39 39 41 41 43 43 45 45 47 47 64 82 83 84 105 106 140 141 142
literals             : 16 76 79 82 123
numeric              : 13 23 67 69 71 73 75 119
range                : 14 120
statement            : 6 7
statements           : 1 7 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 93 94 95 96 97 98 99 100 101 102 103 104 113 114 115
struc                : 63
strucHash            : 130
strucMatrix          : 128
strucSet             : 129
value                : 25 25 26 27 27 28 29 29 30 31 31 32 33 33 34 35 35 36
when                 : 109 110
whens                : 110 111 112

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    init                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .

    $end            reduce using rule 1 (init -> statements .)


state 3

    (6) statements -> statement .
    (7) statements -> statement . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    $end            reduce using rule 6 (statements -> statement .)
    END             reduce using rule 6 (statements -> statement .)
    RETURN          reduce using rule 6 (statements -> statement .)
    ELSE            reduce using rule 6 (statements -> statement .)
    ELSIF           reduce using rule 6 (statements -> statement .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statement                      shift and go to state 3
    statements                     shift and go to state 20
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 4

    (2) statement -> assignment .

    ID              reduce using rule 2 (statement -> assignment .)
    DEF             reduce using rule 2 (statement -> assignment .)
    IF              reduce using rule 2 (statement -> assignment .)
    UNLESS          reduce using rule 2 (statement -> assignment .)
    CASE            reduce using rule 2 (statement -> assignment .)
    WHILE           reduce using rule 2 (statement -> assignment .)
    COMPLEX         reduce using rule 2 (statement -> assignment .)
    RATIONAL        reduce using rule 2 (statement -> assignment .)
    FLOAT           reduce using rule 2 (statement -> assignment .)
    INTEGER         reduce using rule 2 (statement -> assignment .)
    $end            reduce using rule 2 (statement -> assignment .)
    END             reduce using rule 2 (statement -> assignment .)
    RETURN          reduce using rule 2 (statement -> assignment .)
    ELSE            reduce using rule 2 (statement -> assignment .)
    ELSIF           reduce using rule 2 (statement -> assignment .)


state 5

    (3) statement -> function .

    ID              reduce using rule 3 (statement -> function .)
    DEF             reduce using rule 3 (statement -> function .)
    IF              reduce using rule 3 (statement -> function .)
    UNLESS          reduce using rule 3 (statement -> function .)
    CASE            reduce using rule 3 (statement -> function .)
    WHILE           reduce using rule 3 (statement -> function .)
    COMPLEX         reduce using rule 3 (statement -> function .)
    RATIONAL        reduce using rule 3 (statement -> function .)
    FLOAT           reduce using rule 3 (statement -> function .)
    INTEGER         reduce using rule 3 (statement -> function .)
    $end            reduce using rule 3 (statement -> function .)
    END             reduce using rule 3 (statement -> function .)
    RETURN          reduce using rule 3 (statement -> function .)
    ELSE            reduce using rule 3 (statement -> function .)
    ELSIF           reduce using rule 3 (statement -> function .)


state 6

    (4) statement -> control .

    ID              reduce using rule 4 (statement -> control .)
    DEF             reduce using rule 4 (statement -> control .)
    IF              reduce using rule 4 (statement -> control .)
    UNLESS          reduce using rule 4 (statement -> control .)
    CASE            reduce using rule 4 (statement -> control .)
    WHILE           reduce using rule 4 (statement -> control .)
    COMPLEX         reduce using rule 4 (statement -> control .)
    RATIONAL        reduce using rule 4 (statement -> control .)
    FLOAT           reduce using rule 4 (statement -> control .)
    INTEGER         reduce using rule 4 (statement -> control .)
    $end            reduce using rule 4 (statement -> control .)
    END             reduce using rule 4 (statement -> control .)
    RETURN          reduce using rule 4 (statement -> control .)
    ELSE            reduce using rule 4 (statement -> control .)
    ELSIF           reduce using rule 4 (statement -> control .)


state 7

    (5) statement -> arithmetic .

    ID              reduce using rule 5 (statement -> arithmetic .)
    DEF             reduce using rule 5 (statement -> arithmetic .)
    IF              reduce using rule 5 (statement -> arithmetic .)
    UNLESS          reduce using rule 5 (statement -> arithmetic .)
    CASE            reduce using rule 5 (statement -> arithmetic .)
    WHILE           reduce using rule 5 (statement -> arithmetic .)
    COMPLEX         reduce using rule 5 (statement -> arithmetic .)
    RATIONAL        reduce using rule 5 (statement -> arithmetic .)
    FLOAT           reduce using rule 5 (statement -> arithmetic .)
    INTEGER         reduce using rule 5 (statement -> arithmetic .)
    $end            reduce using rule 5 (statement -> arithmetic .)
    END             reduce using rule 5 (statement -> arithmetic .)
    RETURN          reduce using rule 5 (statement -> arithmetic .)
    ELSE            reduce using rule 5 (statement -> arithmetic .)
    ELSIF           reduce using rule 5 (statement -> arithmetic .)


state 8

    (61) assignment -> ID . ASSIGN ID
    (62) assignment -> ID . ASSIGN NIL
    (63) assignment -> ID . ASSIGN struc
    (64) assignment -> ID . ASSIGN literal
    (65) assignment -> ID . ASSIGN arithmetic
    (66) assignment -> ID . ADD_ASSIGN ID
    (67) assignment -> ID . ADD_ASSIGN numeric
    (68) assignment -> ID . SUBS_ASSIGN ID
    (69) assignment -> ID . SUBS_ASSIGN numeric
    (70) assignment -> ID . MULT_ASSIGN ID
    (71) assignment -> ID . MULT_ASSIGN numeric
    (72) assignment -> ID . DIV_ASSIGN ID
    (73) assignment -> ID . DIV_ASSIGN numeric
    (74) assignment -> ID . MOD_ASSIGN ID
    (75) assignment -> ID . MOD_ASSIGN numeric
    (24) value -> ID .

    ASSIGN          shift and go to state 21
    ADD_ASSIGN      shift and go to state 22
    SUBS_ASSIGN     shift and go to state 23
    MULT_ASSIGN     shift and go to state 24
    DIV_ASSIGN      shift and go to state 25
    MOD_ASSIGN      shift and go to state 26
    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    EXPO            reduce using rule 24 (value -> ID .)
    MULT            reduce using rule 24 (value -> ID .)
    DIV             reduce using rule 24 (value -> ID .)
    MODULO          reduce using rule 24 (value -> ID .)


state 9

    (23) value -> numeric .

    PLUS            reduce using rule 23 (value -> numeric .)
    MINUS           reduce using rule 23 (value -> numeric .)
    EXPO            reduce using rule 23 (value -> numeric .)
    MULT            reduce using rule 23 (value -> numeric .)
    DIV             reduce using rule 23 (value -> numeric .)
    MODULO          reduce using rule 23 (value -> numeric .)
    ID              reduce using rule 23 (value -> numeric .)
    DEF             reduce using rule 23 (value -> numeric .)
    IF              reduce using rule 23 (value -> numeric .)
    UNLESS          reduce using rule 23 (value -> numeric .)
    CASE            reduce using rule 23 (value -> numeric .)
    WHILE           reduce using rule 23 (value -> numeric .)
    COMPLEX         reduce using rule 23 (value -> numeric .)
    RATIONAL        reduce using rule 23 (value -> numeric .)
    FLOAT           reduce using rule 23 (value -> numeric .)
    INTEGER         reduce using rule 23 (value -> numeric .)
    $end            reduce using rule 23 (value -> numeric .)
    END             reduce using rule 23 (value -> numeric .)
    RETURN          reduce using rule 23 (value -> numeric .)
    ELSE            reduce using rule 23 (value -> numeric .)
    ELSIF           reduce using rule 23 (value -> numeric .)


state 10

    (76) function -> DEF . ID L_PAREN literals R_PAREN statements END
    (77) function -> DEF . ID L_PAREN R_PAREN statements END
    (78) function -> DEF . ID statements END
    (79) function -> DEF . ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> DEF . ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> DEF . ID statements RETURN ID END
    (82) function -> DEF . ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> DEF . ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> DEF . ID statements RETURN literal END

    ID              shift and go to state 27


state 11

    (93) control -> IF . boolean statements END
    (94) control -> IF . comparation statements END
    (95) control -> IF . comparations statements END
    (96) control -> IF . boolean statements elses END
    (97) control -> IF . comparation statements elses END
    (98) control -> IF . comparations statements elses END
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 34
    STRING          shift and go to state 35
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    boolean                        shift and go to state 28
    comparation                    shift and go to state 29
    comparations                   shift and go to state 30
    literal                        shift and go to state 33
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 12

    (99) control -> UNLESS . boolean COLON statements END
    (100) control -> UNLESS . comparation COLON statements END
    (101) control -> UNLESS . comparations COLON statements END
    (102) control -> UNLESS . boolean statements elses END
    (103) control -> UNLESS . comparation statements elses END
    (104) control -> UNLESS . comparations statements elses END
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 34
    STRING          shift and go to state 35
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    boolean                        shift and go to state 40
    comparation                    shift and go to state 41
    comparations                   shift and go to state 42
    literal                        shift and go to state 33
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 13

    (111) control -> CASE . ID whens else END
    (112) control -> CASE . ID whens END

    ID              shift and go to state 43


state 14

    (113) control -> WHILE . boolean DO statements END
    (114) control -> WHILE . comparation DO statements END
    (115) control -> WHILE . comparations DO statements END
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 34
    STRING          shift and go to state 35
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    boolean                        shift and go to state 44
    comparation                    shift and go to state 45
    comparations                   shift and go to state 46
    literal                        shift and go to state 33
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 15

    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXPO            shift and go to state 49
    MULT            shift and go to state 50
    DIV             shift and go to state 51
    MODULO          shift and go to state 52


state 16

    (19) numeric -> COMPLEX .

    PLUS            reduce using rule 19 (numeric -> COMPLEX .)
    MINUS           reduce using rule 19 (numeric -> COMPLEX .)
    EXPO            reduce using rule 19 (numeric -> COMPLEX .)
    MULT            reduce using rule 19 (numeric -> COMPLEX .)
    DIV             reduce using rule 19 (numeric -> COMPLEX .)
    MODULO          reduce using rule 19 (numeric -> COMPLEX .)
    EQUAL           reduce using rule 19 (numeric -> COMPLEX .)
    NOT_EQ          reduce using rule 19 (numeric -> COMPLEX .)
    LT_OR_EQ        reduce using rule 19 (numeric -> COMPLEX .)
    GT_OR_EQ        reduce using rule 19 (numeric -> COMPLEX .)
    LESS_THAN       reduce using rule 19 (numeric -> COMPLEX .)
    GREATER_THAN    reduce using rule 19 (numeric -> COMPLEX .)
    ID              reduce using rule 19 (numeric -> COMPLEX .)
    DEF             reduce using rule 19 (numeric -> COMPLEX .)
    IF              reduce using rule 19 (numeric -> COMPLEX .)
    UNLESS          reduce using rule 19 (numeric -> COMPLEX .)
    CASE            reduce using rule 19 (numeric -> COMPLEX .)
    WHILE           reduce using rule 19 (numeric -> COMPLEX .)
    COMPLEX         reduce using rule 19 (numeric -> COMPLEX .)
    RATIONAL        reduce using rule 19 (numeric -> COMPLEX .)
    FLOAT           reduce using rule 19 (numeric -> COMPLEX .)
    INTEGER         reduce using rule 19 (numeric -> COMPLEX .)
    $end            reduce using rule 19 (numeric -> COMPLEX .)
    END             reduce using rule 19 (numeric -> COMPLEX .)
    RETURN          reduce using rule 19 (numeric -> COMPLEX .)
    ELSE            reduce using rule 19 (numeric -> COMPLEX .)
    ELSIF           reduce using rule 19 (numeric -> COMPLEX .)
    COMMA           reduce using rule 19 (numeric -> COMPLEX .)
    R_PAREN         reduce using rule 19 (numeric -> COMPLEX .)
    AND             reduce using rule 19 (numeric -> COMPLEX .)
    LOGIC_AND       reduce using rule 19 (numeric -> COMPLEX .)
    OR              reduce using rule 19 (numeric -> COMPLEX .)
    LOGIC_OR        reduce using rule 19 (numeric -> COMPLEX .)
    COLON           reduce using rule 19 (numeric -> COMPLEX .)
    DO              reduce using rule 19 (numeric -> COMPLEX .)
    WHEN            reduce using rule 19 (numeric -> COMPLEX .)
    THEN            reduce using rule 19 (numeric -> COMPLEX .)
    R_BRACKET       reduce using rule 19 (numeric -> COMPLEX .)
    R_BRACE         reduce using rule 19 (numeric -> COMPLEX .)


state 17

    (20) numeric -> RATIONAL .

    PLUS            reduce using rule 20 (numeric -> RATIONAL .)
    MINUS           reduce using rule 20 (numeric -> RATIONAL .)
    EXPO            reduce using rule 20 (numeric -> RATIONAL .)
    MULT            reduce using rule 20 (numeric -> RATIONAL .)
    DIV             reduce using rule 20 (numeric -> RATIONAL .)
    MODULO          reduce using rule 20 (numeric -> RATIONAL .)
    EQUAL           reduce using rule 20 (numeric -> RATIONAL .)
    NOT_EQ          reduce using rule 20 (numeric -> RATIONAL .)
    LT_OR_EQ        reduce using rule 20 (numeric -> RATIONAL .)
    GT_OR_EQ        reduce using rule 20 (numeric -> RATIONAL .)
    LESS_THAN       reduce using rule 20 (numeric -> RATIONAL .)
    GREATER_THAN    reduce using rule 20 (numeric -> RATIONAL .)
    ID              reduce using rule 20 (numeric -> RATIONAL .)
    DEF             reduce using rule 20 (numeric -> RATIONAL .)
    IF              reduce using rule 20 (numeric -> RATIONAL .)
    UNLESS          reduce using rule 20 (numeric -> RATIONAL .)
    CASE            reduce using rule 20 (numeric -> RATIONAL .)
    WHILE           reduce using rule 20 (numeric -> RATIONAL .)
    COMPLEX         reduce using rule 20 (numeric -> RATIONAL .)
    RATIONAL        reduce using rule 20 (numeric -> RATIONAL .)
    FLOAT           reduce using rule 20 (numeric -> RATIONAL .)
    INTEGER         reduce using rule 20 (numeric -> RATIONAL .)
    $end            reduce using rule 20 (numeric -> RATIONAL .)
    END             reduce using rule 20 (numeric -> RATIONAL .)
    RETURN          reduce using rule 20 (numeric -> RATIONAL .)
    ELSE            reduce using rule 20 (numeric -> RATIONAL .)
    ELSIF           reduce using rule 20 (numeric -> RATIONAL .)
    COMMA           reduce using rule 20 (numeric -> RATIONAL .)
    R_PAREN         reduce using rule 20 (numeric -> RATIONAL .)
    AND             reduce using rule 20 (numeric -> RATIONAL .)
    LOGIC_AND       reduce using rule 20 (numeric -> RATIONAL .)
    OR              reduce using rule 20 (numeric -> RATIONAL .)
    LOGIC_OR        reduce using rule 20 (numeric -> RATIONAL .)
    COLON           reduce using rule 20 (numeric -> RATIONAL .)
    DO              reduce using rule 20 (numeric -> RATIONAL .)
    WHEN            reduce using rule 20 (numeric -> RATIONAL .)
    THEN            reduce using rule 20 (numeric -> RATIONAL .)
    R_BRACKET       reduce using rule 20 (numeric -> RATIONAL .)
    R_BRACE         reduce using rule 20 (numeric -> RATIONAL .)


state 18

    (21) numeric -> FLOAT .

    PLUS            reduce using rule 21 (numeric -> FLOAT .)
    MINUS           reduce using rule 21 (numeric -> FLOAT .)
    EXPO            reduce using rule 21 (numeric -> FLOAT .)
    MULT            reduce using rule 21 (numeric -> FLOAT .)
    DIV             reduce using rule 21 (numeric -> FLOAT .)
    MODULO          reduce using rule 21 (numeric -> FLOAT .)
    EQUAL           reduce using rule 21 (numeric -> FLOAT .)
    NOT_EQ          reduce using rule 21 (numeric -> FLOAT .)
    LT_OR_EQ        reduce using rule 21 (numeric -> FLOAT .)
    GT_OR_EQ        reduce using rule 21 (numeric -> FLOAT .)
    LESS_THAN       reduce using rule 21 (numeric -> FLOAT .)
    GREATER_THAN    reduce using rule 21 (numeric -> FLOAT .)
    ID              reduce using rule 21 (numeric -> FLOAT .)
    DEF             reduce using rule 21 (numeric -> FLOAT .)
    IF              reduce using rule 21 (numeric -> FLOAT .)
    UNLESS          reduce using rule 21 (numeric -> FLOAT .)
    CASE            reduce using rule 21 (numeric -> FLOAT .)
    WHILE           reduce using rule 21 (numeric -> FLOAT .)
    COMPLEX         reduce using rule 21 (numeric -> FLOAT .)
    RATIONAL        reduce using rule 21 (numeric -> FLOAT .)
    FLOAT           reduce using rule 21 (numeric -> FLOAT .)
    INTEGER         reduce using rule 21 (numeric -> FLOAT .)
    $end            reduce using rule 21 (numeric -> FLOAT .)
    END             reduce using rule 21 (numeric -> FLOAT .)
    RETURN          reduce using rule 21 (numeric -> FLOAT .)
    ELSE            reduce using rule 21 (numeric -> FLOAT .)
    ELSIF           reduce using rule 21 (numeric -> FLOAT .)
    COMMA           reduce using rule 21 (numeric -> FLOAT .)
    R_PAREN         reduce using rule 21 (numeric -> FLOAT .)
    AND             reduce using rule 21 (numeric -> FLOAT .)
    LOGIC_AND       reduce using rule 21 (numeric -> FLOAT .)
    OR              reduce using rule 21 (numeric -> FLOAT .)
    LOGIC_OR        reduce using rule 21 (numeric -> FLOAT .)
    COLON           reduce using rule 21 (numeric -> FLOAT .)
    DO              reduce using rule 21 (numeric -> FLOAT .)
    WHEN            reduce using rule 21 (numeric -> FLOAT .)
    THEN            reduce using rule 21 (numeric -> FLOAT .)
    R_BRACKET       reduce using rule 21 (numeric -> FLOAT .)
    R_BRACE         reduce using rule 21 (numeric -> FLOAT .)


state 19

    (22) numeric -> INTEGER .

    PLUS            reduce using rule 22 (numeric -> INTEGER .)
    MINUS           reduce using rule 22 (numeric -> INTEGER .)
    EXPO            reduce using rule 22 (numeric -> INTEGER .)
    MULT            reduce using rule 22 (numeric -> INTEGER .)
    DIV             reduce using rule 22 (numeric -> INTEGER .)
    MODULO          reduce using rule 22 (numeric -> INTEGER .)
    ID              reduce using rule 22 (numeric -> INTEGER .)
    DEF             reduce using rule 22 (numeric -> INTEGER .)
    IF              reduce using rule 22 (numeric -> INTEGER .)
    UNLESS          reduce using rule 22 (numeric -> INTEGER .)
    CASE            reduce using rule 22 (numeric -> INTEGER .)
    WHILE           reduce using rule 22 (numeric -> INTEGER .)
    COMPLEX         reduce using rule 22 (numeric -> INTEGER .)
    RATIONAL        reduce using rule 22 (numeric -> INTEGER .)
    FLOAT           reduce using rule 22 (numeric -> INTEGER .)
    INTEGER         reduce using rule 22 (numeric -> INTEGER .)
    $end            reduce using rule 22 (numeric -> INTEGER .)
    END             reduce using rule 22 (numeric -> INTEGER .)
    RETURN          reduce using rule 22 (numeric -> INTEGER .)
    ELSE            reduce using rule 22 (numeric -> INTEGER .)
    ELSIF           reduce using rule 22 (numeric -> INTEGER .)


state 20

    (7) statements -> statement statements .

    $end            reduce using rule 7 (statements -> statement statements .)
    END             reduce using rule 7 (statements -> statement statements .)
    RETURN          reduce using rule 7 (statements -> statement statements .)
    ELSE            reduce using rule 7 (statements -> statement statements .)
    ELSIF           reduce using rule 7 (statements -> statement statements .)


state 21

    (61) assignment -> ID ASSIGN . ID
    (62) assignment -> ID ASSIGN . NIL
    (63) assignment -> ID ASSIGN . struc
    (64) assignment -> ID ASSIGN . literal
    (65) assignment -> ID ASSIGN . arithmetic
    (128) struc -> . strucMatrix
    (129) struc -> . strucSet
    (130) struc -> . strucHash
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (131) strucMatrix -> . MATRIX L_BRACKET arrays R_BRACKET
    (132) strucSet -> . SET PERIOD NEW
    (133) strucSet -> . SET PERIOD NEW L_PAREN R_PAREN
    (134) strucSet -> . SET PERIOD NEW L_PAREN array R_PAREN
    (135) strucSet -> . SET array
    (136) strucHash -> . HASH PERIOD NEW
    (137) strucHash -> . HASH PERIOD NEW L_BRACE R_BRACE
    (138) strucHash -> . HASH PERIOD NEW L_BRACE hashelems R_BRACE
    (139) strucHash -> . HASH array
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING
    (23) value -> . numeric
    (24) value -> . ID

    ID              shift and go to state 53
    NIL             shift and go to state 54
    STRING          shift and go to state 35
    MATRIX          shift and go to state 63
    SET             shift and go to state 64
    HASH            shift and go to state 65
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    struc                          shift and go to state 55
    literal                        shift and go to state 56
    arithmetic                     shift and go to state 57
    strucMatrix                    shift and go to state 58
    strucSet                       shift and go to state 59
    strucHash                      shift and go to state 60
    boolean                        shift and go to state 61
    numeric                        shift and go to state 62
    range                          shift and go to state 37
    value                          shift and go to state 15

state 22

    (66) assignment -> ID ADD_ASSIGN . ID
    (67) assignment -> ID ADD_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 66
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    numeric                        shift and go to state 67

state 23

    (68) assignment -> ID SUBS_ASSIGN . ID
    (69) assignment -> ID SUBS_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 68
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    numeric                        shift and go to state 69

state 24

    (70) assignment -> ID MULT_ASSIGN . ID
    (71) assignment -> ID MULT_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 70
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    numeric                        shift and go to state 71

state 25

    (72) assignment -> ID DIV_ASSIGN . ID
    (73) assignment -> ID DIV_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 72
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    numeric                        shift and go to state 73

state 26

    (74) assignment -> ID MOD_ASSIGN . ID
    (75) assignment -> ID MOD_ASSIGN . numeric
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 74
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    numeric                        shift and go to state 75

state 27

    (76) function -> DEF ID . L_PAREN literals R_PAREN statements END
    (77) function -> DEF ID . L_PAREN R_PAREN statements END
    (78) function -> DEF ID . statements END
    (79) function -> DEF ID . L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> DEF ID . L_PAREN R_PAREN statements RETURN ID END
    (81) function -> DEF ID . statements RETURN ID END
    (82) function -> DEF ID . L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> DEF ID . L_PAREN R_PAREN statements RETURN literal END
    (84) function -> DEF ID . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    L_PAREN         shift and go to state 76
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 77
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 28

    (93) control -> IF boolean . statements END
    (96) control -> IF boolean . statements elses END
    (57) comparations -> boolean . AND boolean
    (58) comparations -> boolean . LOGIC_AND boolean
    (59) comparations -> boolean . OR boolean
    (60) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 79
    LOGIC_AND       shift and go to state 80
    OR              shift and go to state 81
    LOGIC_OR        shift and go to state 82
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 78
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 29

    (94) control -> IF comparation . statements END
    (97) control -> IF comparation . statements elses END
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 83
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 30

    (95) control -> IF comparations . statements END
    (98) control -> IF comparations . statements elses END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 88
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 31

    (17) boolean -> TRUE .

    AND             reduce using rule 17 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 17 (boolean -> TRUE .)
    OR              reduce using rule 17 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 17 (boolean -> TRUE .)
    ID              reduce using rule 17 (boolean -> TRUE .)
    DEF             reduce using rule 17 (boolean -> TRUE .)
    IF              reduce using rule 17 (boolean -> TRUE .)
    UNLESS          reduce using rule 17 (boolean -> TRUE .)
    CASE            reduce using rule 17 (boolean -> TRUE .)
    WHILE           reduce using rule 17 (boolean -> TRUE .)
    COMPLEX         reduce using rule 17 (boolean -> TRUE .)
    RATIONAL        reduce using rule 17 (boolean -> TRUE .)
    FLOAT           reduce using rule 17 (boolean -> TRUE .)
    INTEGER         reduce using rule 17 (boolean -> TRUE .)
    EQUAL           reduce using rule 17 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 17 (boolean -> TRUE .)
    LT_OR_EQ        reduce using rule 17 (boolean -> TRUE .)
    GT_OR_EQ        reduce using rule 17 (boolean -> TRUE .)
    LESS_THAN       reduce using rule 17 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 17 (boolean -> TRUE .)
    COLON           reduce using rule 17 (boolean -> TRUE .)
    DO              reduce using rule 17 (boolean -> TRUE .)
    $end            reduce using rule 17 (boolean -> TRUE .)
    END             reduce using rule 17 (boolean -> TRUE .)
    RETURN          reduce using rule 17 (boolean -> TRUE .)
    ELSE            reduce using rule 17 (boolean -> TRUE .)
    ELSIF           reduce using rule 17 (boolean -> TRUE .)
    COMMA           reduce using rule 17 (boolean -> TRUE .)
    R_PAREN         reduce using rule 17 (boolean -> TRUE .)
    WHEN            reduce using rule 17 (boolean -> TRUE .)
    THEN            reduce using rule 17 (boolean -> TRUE .)
    R_BRACKET       reduce using rule 17 (boolean -> TRUE .)
    R_BRACE         reduce using rule 17 (boolean -> TRUE .)


state 32

    (18) boolean -> FALSE .

    AND             reduce using rule 18 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 18 (boolean -> FALSE .)
    OR              reduce using rule 18 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 18 (boolean -> FALSE .)
    ID              reduce using rule 18 (boolean -> FALSE .)
    DEF             reduce using rule 18 (boolean -> FALSE .)
    IF              reduce using rule 18 (boolean -> FALSE .)
    UNLESS          reduce using rule 18 (boolean -> FALSE .)
    CASE            reduce using rule 18 (boolean -> FALSE .)
    WHILE           reduce using rule 18 (boolean -> FALSE .)
    COMPLEX         reduce using rule 18 (boolean -> FALSE .)
    RATIONAL        reduce using rule 18 (boolean -> FALSE .)
    FLOAT           reduce using rule 18 (boolean -> FALSE .)
    INTEGER         reduce using rule 18 (boolean -> FALSE .)
    EQUAL           reduce using rule 18 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 18 (boolean -> FALSE .)
    LT_OR_EQ        reduce using rule 18 (boolean -> FALSE .)
    GT_OR_EQ        reduce using rule 18 (boolean -> FALSE .)
    LESS_THAN       reduce using rule 18 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 18 (boolean -> FALSE .)
    COLON           reduce using rule 18 (boolean -> FALSE .)
    DO              reduce using rule 18 (boolean -> FALSE .)
    $end            reduce using rule 18 (boolean -> FALSE .)
    END             reduce using rule 18 (boolean -> FALSE .)
    RETURN          reduce using rule 18 (boolean -> FALSE .)
    ELSE            reduce using rule 18 (boolean -> FALSE .)
    ELSIF           reduce using rule 18 (boolean -> FALSE .)
    COMMA           reduce using rule 18 (boolean -> FALSE .)
    R_PAREN         reduce using rule 18 (boolean -> FALSE .)
    WHEN            reduce using rule 18 (boolean -> FALSE .)
    THEN            reduce using rule 18 (boolean -> FALSE .)
    R_BRACKET       reduce using rule 18 (boolean -> FALSE .)
    R_BRACE         reduce using rule 18 (boolean -> FALSE .)


state 33

    (37) comparation -> literal . EQUAL literal
    (39) comparation -> literal . NOT_EQ literal
    (41) comparation -> literal . LT_OR_EQ literal
    (43) comparation -> literal . GT_OR_EQ literal
    (45) comparation -> literal . LESS_THAN literal
    (47) comparation -> literal . GREATER_THAN literal

    EQUAL           shift and go to state 89
    NOT_EQ          shift and go to state 90
    LT_OR_EQ        shift and go to state 91
    GT_OR_EQ        shift and go to state 92
    LESS_THAN       shift and go to state 93
    GREATER_THAN    shift and go to state 94


state 34

    (38) comparation -> ID . EQUAL ID
    (40) comparation -> ID . NOT_EQ ID
    (42) comparation -> ID . LT_OR_EQ ID
    (44) comparation -> ID . GT_OR_EQ ID
    (46) comparation -> ID . LESS_THAN ID
    (48) comparation -> ID . GREATER_THAN ID
    (11) literal -> ID .

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LT_OR_EQ resolved as shift
  ! shift/reduce conflict for GT_OR_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
    EQUAL           shift and go to state 95
    NOT_EQ          shift and go to state 96
    LT_OR_EQ        shift and go to state 97
    GT_OR_EQ        shift and go to state 98
    LESS_THAN       shift and go to state 99
    GREATER_THAN    shift and go to state 100

  ! EQUAL           [ reduce using rule 11 (literal -> ID .) ]
  ! NOT_EQ          [ reduce using rule 11 (literal -> ID .) ]
  ! LT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! GT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! LESS_THAN       [ reduce using rule 11 (literal -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 11 (literal -> ID .) ]


state 35

    (10) literal -> STRING .
    (151) range -> STRING . ELLIPSIS STRING
    (152) range -> STRING . DOUBLE_PERIOD STRING

    EQUAL           reduce using rule 10 (literal -> STRING .)
    NOT_EQ          reduce using rule 10 (literal -> STRING .)
    LT_OR_EQ        reduce using rule 10 (literal -> STRING .)
    GT_OR_EQ        reduce using rule 10 (literal -> STRING .)
    LESS_THAN       reduce using rule 10 (literal -> STRING .)
    GREATER_THAN    reduce using rule 10 (literal -> STRING .)
    ID              reduce using rule 10 (literal -> STRING .)
    DEF             reduce using rule 10 (literal -> STRING .)
    IF              reduce using rule 10 (literal -> STRING .)
    UNLESS          reduce using rule 10 (literal -> STRING .)
    CASE            reduce using rule 10 (literal -> STRING .)
    WHILE           reduce using rule 10 (literal -> STRING .)
    COMPLEX         reduce using rule 10 (literal -> STRING .)
    RATIONAL        reduce using rule 10 (literal -> STRING .)
    FLOAT           reduce using rule 10 (literal -> STRING .)
    INTEGER         reduce using rule 10 (literal -> STRING .)
    $end            reduce using rule 10 (literal -> STRING .)
    END             reduce using rule 10 (literal -> STRING .)
    RETURN          reduce using rule 10 (literal -> STRING .)
    ELSE            reduce using rule 10 (literal -> STRING .)
    ELSIF           reduce using rule 10 (literal -> STRING .)
    COMMA           reduce using rule 10 (literal -> STRING .)
    R_PAREN         reduce using rule 10 (literal -> STRING .)
    AND             reduce using rule 10 (literal -> STRING .)
    LOGIC_AND       reduce using rule 10 (literal -> STRING .)
    OR              reduce using rule 10 (literal -> STRING .)
    LOGIC_OR        reduce using rule 10 (literal -> STRING .)
    COLON           reduce using rule 10 (literal -> STRING .)
    DO              reduce using rule 10 (literal -> STRING .)
    WHEN            reduce using rule 10 (literal -> STRING .)
    THEN            reduce using rule 10 (literal -> STRING .)
    R_BRACKET       reduce using rule 10 (literal -> STRING .)
    R_BRACE         reduce using rule 10 (literal -> STRING .)
    ELLIPSIS        shift and go to state 101
    DOUBLE_PERIOD   shift and go to state 102


state 36

    (13) literal -> numeric .

    EQUAL           reduce using rule 13 (literal -> numeric .)
    NOT_EQ          reduce using rule 13 (literal -> numeric .)
    LT_OR_EQ        reduce using rule 13 (literal -> numeric .)
    GT_OR_EQ        reduce using rule 13 (literal -> numeric .)
    LESS_THAN       reduce using rule 13 (literal -> numeric .)
    GREATER_THAN    reduce using rule 13 (literal -> numeric .)
    COMMA           reduce using rule 13 (literal -> numeric .)
    R_PAREN         reduce using rule 13 (literal -> numeric .)
    AND             reduce using rule 13 (literal -> numeric .)
    LOGIC_AND       reduce using rule 13 (literal -> numeric .)
    OR              reduce using rule 13 (literal -> numeric .)
    LOGIC_OR        reduce using rule 13 (literal -> numeric .)
    ID              reduce using rule 13 (literal -> numeric .)
    DEF             reduce using rule 13 (literal -> numeric .)
    IF              reduce using rule 13 (literal -> numeric .)
    UNLESS          reduce using rule 13 (literal -> numeric .)
    CASE            reduce using rule 13 (literal -> numeric .)
    WHILE           reduce using rule 13 (literal -> numeric .)
    COMPLEX         reduce using rule 13 (literal -> numeric .)
    RATIONAL        reduce using rule 13 (literal -> numeric .)
    FLOAT           reduce using rule 13 (literal -> numeric .)
    INTEGER         reduce using rule 13 (literal -> numeric .)
    COLON           reduce using rule 13 (literal -> numeric .)
    DO              reduce using rule 13 (literal -> numeric .)
    WHEN            reduce using rule 13 (literal -> numeric .)
    END             reduce using rule 13 (literal -> numeric .)
    ELSE            reduce using rule 13 (literal -> numeric .)
    THEN            reduce using rule 13 (literal -> numeric .)
    R_BRACKET       reduce using rule 13 (literal -> numeric .)
    R_BRACE         reduce using rule 13 (literal -> numeric .)


state 37

    (14) literal -> range .

    EQUAL           reduce using rule 14 (literal -> range .)
    NOT_EQ          reduce using rule 14 (literal -> range .)
    LT_OR_EQ        reduce using rule 14 (literal -> range .)
    GT_OR_EQ        reduce using rule 14 (literal -> range .)
    LESS_THAN       reduce using rule 14 (literal -> range .)
    GREATER_THAN    reduce using rule 14 (literal -> range .)
    ID              reduce using rule 14 (literal -> range .)
    DEF             reduce using rule 14 (literal -> range .)
    IF              reduce using rule 14 (literal -> range .)
    UNLESS          reduce using rule 14 (literal -> range .)
    CASE            reduce using rule 14 (literal -> range .)
    WHILE           reduce using rule 14 (literal -> range .)
    COMPLEX         reduce using rule 14 (literal -> range .)
    RATIONAL        reduce using rule 14 (literal -> range .)
    FLOAT           reduce using rule 14 (literal -> range .)
    INTEGER         reduce using rule 14 (literal -> range .)
    $end            reduce using rule 14 (literal -> range .)
    END             reduce using rule 14 (literal -> range .)
    RETURN          reduce using rule 14 (literal -> range .)
    ELSE            reduce using rule 14 (literal -> range .)
    ELSIF           reduce using rule 14 (literal -> range .)
    COMMA           reduce using rule 14 (literal -> range .)
    R_PAREN         reduce using rule 14 (literal -> range .)
    AND             reduce using rule 14 (literal -> range .)
    LOGIC_AND       reduce using rule 14 (literal -> range .)
    OR              reduce using rule 14 (literal -> range .)
    LOGIC_OR        reduce using rule 14 (literal -> range .)
    COLON           reduce using rule 14 (literal -> range .)
    DO              reduce using rule 14 (literal -> range .)
    WHEN            reduce using rule 14 (literal -> range .)
    THEN            reduce using rule 14 (literal -> range .)
    R_BRACKET       reduce using rule 14 (literal -> range .)
    R_BRACE         reduce using rule 14 (literal -> range .)


state 38

    (22) numeric -> INTEGER .
    (147) range -> INTEGER . ELLIPSIS INTEGER
    (148) range -> INTEGER . DOUBLE_PERIOD INTEGER

    EQUAL           reduce using rule 22 (numeric -> INTEGER .)
    NOT_EQ          reduce using rule 22 (numeric -> INTEGER .)
    LT_OR_EQ        reduce using rule 22 (numeric -> INTEGER .)
    GT_OR_EQ        reduce using rule 22 (numeric -> INTEGER .)
    LESS_THAN       reduce using rule 22 (numeric -> INTEGER .)
    GREATER_THAN    reduce using rule 22 (numeric -> INTEGER .)
    ID              reduce using rule 22 (numeric -> INTEGER .)
    DEF             reduce using rule 22 (numeric -> INTEGER .)
    IF              reduce using rule 22 (numeric -> INTEGER .)
    UNLESS          reduce using rule 22 (numeric -> INTEGER .)
    CASE            reduce using rule 22 (numeric -> INTEGER .)
    WHILE           reduce using rule 22 (numeric -> INTEGER .)
    COMPLEX         reduce using rule 22 (numeric -> INTEGER .)
    RATIONAL        reduce using rule 22 (numeric -> INTEGER .)
    FLOAT           reduce using rule 22 (numeric -> INTEGER .)
    INTEGER         reduce using rule 22 (numeric -> INTEGER .)
    $end            reduce using rule 22 (numeric -> INTEGER .)
    END             reduce using rule 22 (numeric -> INTEGER .)
    RETURN          reduce using rule 22 (numeric -> INTEGER .)
    ELSE            reduce using rule 22 (numeric -> INTEGER .)
    ELSIF           reduce using rule 22 (numeric -> INTEGER .)
    PLUS            reduce using rule 22 (numeric -> INTEGER .)
    MINUS           reduce using rule 22 (numeric -> INTEGER .)
    EXPO            reduce using rule 22 (numeric -> INTEGER .)
    MULT            reduce using rule 22 (numeric -> INTEGER .)
    DIV             reduce using rule 22 (numeric -> INTEGER .)
    MODULO          reduce using rule 22 (numeric -> INTEGER .)
    COMMA           reduce using rule 22 (numeric -> INTEGER .)
    R_PAREN         reduce using rule 22 (numeric -> INTEGER .)
    AND             reduce using rule 22 (numeric -> INTEGER .)
    LOGIC_AND       reduce using rule 22 (numeric -> INTEGER .)
    OR              reduce using rule 22 (numeric -> INTEGER .)
    LOGIC_OR        reduce using rule 22 (numeric -> INTEGER .)
    COLON           reduce using rule 22 (numeric -> INTEGER .)
    DO              reduce using rule 22 (numeric -> INTEGER .)
    WHEN            reduce using rule 22 (numeric -> INTEGER .)
    THEN            reduce using rule 22 (numeric -> INTEGER .)
    R_BRACKET       reduce using rule 22 (numeric -> INTEGER .)
    R_BRACE         reduce using rule 22 (numeric -> INTEGER .)
    ELLIPSIS        shift and go to state 103
    DOUBLE_PERIOD   shift and go to state 104


state 39

    (145) range -> L_PAREN . INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> L_PAREN . INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (149) range -> L_PAREN . STRING ELLIPSIS STRING
    (150) range -> L_PAREN . STRING DOUBLE_PERIOD STRING

    INTEGER         shift and go to state 105
    STRING          shift and go to state 106


state 40

    (99) control -> UNLESS boolean . COLON statements END
    (102) control -> UNLESS boolean . statements elses END
    (57) comparations -> boolean . AND boolean
    (58) comparations -> boolean . LOGIC_AND boolean
    (59) comparations -> boolean . OR boolean
    (60) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    COLON           shift and go to state 107
    AND             shift and go to state 79
    LOGIC_AND       shift and go to state 80
    OR              shift and go to state 81
    LOGIC_OR        shift and go to state 82
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 108
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 41

    (100) control -> UNLESS comparation . COLON statements END
    (103) control -> UNLESS comparation . statements elses END
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    COLON           shift and go to state 109
    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 110
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 42

    (101) control -> UNLESS comparations . COLON statements END
    (104) control -> UNLESS comparations . statements elses END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    COLON           shift and go to state 111
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 112
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 43

    (111) control -> CASE ID . whens else END
    (112) control -> CASE ID . whens END
    (109) whens -> . when
    (110) whens -> . when whens
    (105) when -> . WHEN literal
    (106) when -> . WHEN literal THEN
    (107) when -> . WHEN comparation
    (108) when -> . WHEN comparations

    WHEN            shift and go to state 115

    whens                          shift and go to state 113
    when                           shift and go to state 114

state 44

    (113) control -> WHILE boolean . DO statements END
    (57) comparations -> boolean . AND boolean
    (58) comparations -> boolean . LOGIC_AND boolean
    (59) comparations -> boolean . OR boolean
    (60) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .

    DO              shift and go to state 116
    AND             shift and go to state 79
    LOGIC_AND       shift and go to state 80
    OR              shift and go to state 81
    LOGIC_OR        shift and go to state 82
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)


state 45

    (114) control -> WHILE comparation . DO statements END
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations

    DO              shift and go to state 117
    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87


state 46

    (115) control -> WHILE comparations . DO statements END

    DO              shift and go to state 118


state 47

    (25) arithmetic -> value PLUS . value
    (26) arithmetic -> value PLUS . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 121
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    value                          shift and go to state 119
    arithmetic                     shift and go to state 120
    numeric                        shift and go to state 9

state 48

    (27) arithmetic -> value MINUS . value
    (28) arithmetic -> value MINUS . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 121
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    value                          shift and go to state 122
    arithmetic                     shift and go to state 123
    numeric                        shift and go to state 9

state 49

    (29) arithmetic -> value EXPO . value
    (30) arithmetic -> value EXPO . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 121
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    value                          shift and go to state 124
    arithmetic                     shift and go to state 125
    numeric                        shift and go to state 9

state 50

    (31) arithmetic -> value MULT . value
    (32) arithmetic -> value MULT . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 121
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    value                          shift and go to state 126
    arithmetic                     shift and go to state 127
    numeric                        shift and go to state 9

state 51

    (33) arithmetic -> value DIV . value
    (34) arithmetic -> value DIV . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 121
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    value                          shift and go to state 128
    arithmetic                     shift and go to state 129
    numeric                        shift and go to state 9

state 52

    (35) arithmetic -> value MODULO . value
    (36) arithmetic -> value MODULO . arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 121
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    value                          shift and go to state 130
    arithmetic                     shift and go to state 131
    numeric                        shift and go to state 9

state 53

    (61) assignment -> ID ASSIGN ID .
    (11) literal -> ID .
    (24) value -> ID .

  ! reduce/reduce conflict for ID resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for UNLESS resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for COMPLEX resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RATIONAL resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for INTEGER resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for END resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (literal -> ID .)
  ! reduce/reduce conflict for ELSIF resolved using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    $end            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    RETURN          reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)
    ELSIF           reduce using rule 11 (literal -> ID .)
    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    EXPO            reduce using rule 24 (value -> ID .)
    MULT            reduce using rule 24 (value -> ID .)
    DIV             reduce using rule 24 (value -> ID .)
    MODULO          reduce using rule 24 (value -> ID .)

  ! ID              [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! DEF             [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! IF              [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! UNLESS          [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! CASE            [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! WHILE           [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! COMPLEX         [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! RATIONAL        [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! FLOAT           [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! INTEGER         [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! $end            [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! END             [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! RETURN          [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! ELSE            [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]
  ! ELSIF           [ reduce using rule 61 (assignment -> ID ASSIGN ID .) ]


state 54

    (62) assignment -> ID ASSIGN NIL .

    ID              reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    DEF             reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    IF              reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    UNLESS          reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    CASE            reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    WHILE           reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    COMPLEX         reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    RATIONAL        reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    FLOAT           reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    INTEGER         reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    $end            reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    END             reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    RETURN          reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    ELSE            reduce using rule 62 (assignment -> ID ASSIGN NIL .)
    ELSIF           reduce using rule 62 (assignment -> ID ASSIGN NIL .)


state 55

    (63) assignment -> ID ASSIGN struc .

    ID              reduce using rule 63 (assignment -> ID ASSIGN struc .)
    DEF             reduce using rule 63 (assignment -> ID ASSIGN struc .)
    IF              reduce using rule 63 (assignment -> ID ASSIGN struc .)
    UNLESS          reduce using rule 63 (assignment -> ID ASSIGN struc .)
    CASE            reduce using rule 63 (assignment -> ID ASSIGN struc .)
    WHILE           reduce using rule 63 (assignment -> ID ASSIGN struc .)
    COMPLEX         reduce using rule 63 (assignment -> ID ASSIGN struc .)
    RATIONAL        reduce using rule 63 (assignment -> ID ASSIGN struc .)
    FLOAT           reduce using rule 63 (assignment -> ID ASSIGN struc .)
    INTEGER         reduce using rule 63 (assignment -> ID ASSIGN struc .)
    $end            reduce using rule 63 (assignment -> ID ASSIGN struc .)
    END             reduce using rule 63 (assignment -> ID ASSIGN struc .)
    RETURN          reduce using rule 63 (assignment -> ID ASSIGN struc .)
    ELSE            reduce using rule 63 (assignment -> ID ASSIGN struc .)
    ELSIF           reduce using rule 63 (assignment -> ID ASSIGN struc .)


state 56

    (64) assignment -> ID ASSIGN literal .

    ID              reduce using rule 64 (assignment -> ID ASSIGN literal .)
    DEF             reduce using rule 64 (assignment -> ID ASSIGN literal .)
    IF              reduce using rule 64 (assignment -> ID ASSIGN literal .)
    UNLESS          reduce using rule 64 (assignment -> ID ASSIGN literal .)
    CASE            reduce using rule 64 (assignment -> ID ASSIGN literal .)
    WHILE           reduce using rule 64 (assignment -> ID ASSIGN literal .)
    COMPLEX         reduce using rule 64 (assignment -> ID ASSIGN literal .)
    RATIONAL        reduce using rule 64 (assignment -> ID ASSIGN literal .)
    FLOAT           reduce using rule 64 (assignment -> ID ASSIGN literal .)
    INTEGER         reduce using rule 64 (assignment -> ID ASSIGN literal .)
    $end            reduce using rule 64 (assignment -> ID ASSIGN literal .)
    END             reduce using rule 64 (assignment -> ID ASSIGN literal .)
    RETURN          reduce using rule 64 (assignment -> ID ASSIGN literal .)
    ELSE            reduce using rule 64 (assignment -> ID ASSIGN literal .)
    ELSIF           reduce using rule 64 (assignment -> ID ASSIGN literal .)


state 57

    (65) assignment -> ID ASSIGN arithmetic .

    ID              reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    DEF             reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    IF              reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    UNLESS          reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    CASE            reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    WHILE           reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    COMPLEX         reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    RATIONAL        reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    FLOAT           reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    INTEGER         reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    $end            reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    END             reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    RETURN          reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    ELSE            reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)
    ELSIF           reduce using rule 65 (assignment -> ID ASSIGN arithmetic .)


state 58

    (128) struc -> strucMatrix .

    ID              reduce using rule 128 (struc -> strucMatrix .)
    DEF             reduce using rule 128 (struc -> strucMatrix .)
    IF              reduce using rule 128 (struc -> strucMatrix .)
    UNLESS          reduce using rule 128 (struc -> strucMatrix .)
    CASE            reduce using rule 128 (struc -> strucMatrix .)
    WHILE           reduce using rule 128 (struc -> strucMatrix .)
    COMPLEX         reduce using rule 128 (struc -> strucMatrix .)
    RATIONAL        reduce using rule 128 (struc -> strucMatrix .)
    FLOAT           reduce using rule 128 (struc -> strucMatrix .)
    INTEGER         reduce using rule 128 (struc -> strucMatrix .)
    $end            reduce using rule 128 (struc -> strucMatrix .)
    END             reduce using rule 128 (struc -> strucMatrix .)
    RETURN          reduce using rule 128 (struc -> strucMatrix .)
    ELSE            reduce using rule 128 (struc -> strucMatrix .)
    ELSIF           reduce using rule 128 (struc -> strucMatrix .)


state 59

    (129) struc -> strucSet .

    ID              reduce using rule 129 (struc -> strucSet .)
    DEF             reduce using rule 129 (struc -> strucSet .)
    IF              reduce using rule 129 (struc -> strucSet .)
    UNLESS          reduce using rule 129 (struc -> strucSet .)
    CASE            reduce using rule 129 (struc -> strucSet .)
    WHILE           reduce using rule 129 (struc -> strucSet .)
    COMPLEX         reduce using rule 129 (struc -> strucSet .)
    RATIONAL        reduce using rule 129 (struc -> strucSet .)
    FLOAT           reduce using rule 129 (struc -> strucSet .)
    INTEGER         reduce using rule 129 (struc -> strucSet .)
    $end            reduce using rule 129 (struc -> strucSet .)
    END             reduce using rule 129 (struc -> strucSet .)
    RETURN          reduce using rule 129 (struc -> strucSet .)
    ELSE            reduce using rule 129 (struc -> strucSet .)
    ELSIF           reduce using rule 129 (struc -> strucSet .)


state 60

    (130) struc -> strucHash .

    ID              reduce using rule 130 (struc -> strucHash .)
    DEF             reduce using rule 130 (struc -> strucHash .)
    IF              reduce using rule 130 (struc -> strucHash .)
    UNLESS          reduce using rule 130 (struc -> strucHash .)
    CASE            reduce using rule 130 (struc -> strucHash .)
    WHILE           reduce using rule 130 (struc -> strucHash .)
    COMPLEX         reduce using rule 130 (struc -> strucHash .)
    RATIONAL        reduce using rule 130 (struc -> strucHash .)
    FLOAT           reduce using rule 130 (struc -> strucHash .)
    INTEGER         reduce using rule 130 (struc -> strucHash .)
    $end            reduce using rule 130 (struc -> strucHash .)
    END             reduce using rule 130 (struc -> strucHash .)
    RETURN          reduce using rule 130 (struc -> strucHash .)
    ELSE            reduce using rule 130 (struc -> strucHash .)
    ELSIF           reduce using rule 130 (struc -> strucHash .)


state 61

    (12) literal -> boolean .

    ID              reduce using rule 12 (literal -> boolean .)
    DEF             reduce using rule 12 (literal -> boolean .)
    IF              reduce using rule 12 (literal -> boolean .)
    UNLESS          reduce using rule 12 (literal -> boolean .)
    CASE            reduce using rule 12 (literal -> boolean .)
    WHILE           reduce using rule 12 (literal -> boolean .)
    COMPLEX         reduce using rule 12 (literal -> boolean .)
    RATIONAL        reduce using rule 12 (literal -> boolean .)
    FLOAT           reduce using rule 12 (literal -> boolean .)
    INTEGER         reduce using rule 12 (literal -> boolean .)
    $end            reduce using rule 12 (literal -> boolean .)
    END             reduce using rule 12 (literal -> boolean .)
    RETURN          reduce using rule 12 (literal -> boolean .)
    ELSE            reduce using rule 12 (literal -> boolean .)
    ELSIF           reduce using rule 12 (literal -> boolean .)
    COMMA           reduce using rule 12 (literal -> boolean .)
    R_PAREN         reduce using rule 12 (literal -> boolean .)
    AND             reduce using rule 12 (literal -> boolean .)
    LOGIC_AND       reduce using rule 12 (literal -> boolean .)
    OR              reduce using rule 12 (literal -> boolean .)
    LOGIC_OR        reduce using rule 12 (literal -> boolean .)
    COLON           reduce using rule 12 (literal -> boolean .)
    DO              reduce using rule 12 (literal -> boolean .)
    WHEN            reduce using rule 12 (literal -> boolean .)
    R_BRACKET       reduce using rule 12 (literal -> boolean .)
    R_BRACE         reduce using rule 12 (literal -> boolean .)


state 62

    (13) literal -> numeric .
    (23) value -> numeric .

    ID              reduce using rule 13 (literal -> numeric .)
    DEF             reduce using rule 13 (literal -> numeric .)
    IF              reduce using rule 13 (literal -> numeric .)
    UNLESS          reduce using rule 13 (literal -> numeric .)
    CASE            reduce using rule 13 (literal -> numeric .)
    WHILE           reduce using rule 13 (literal -> numeric .)
    COMPLEX         reduce using rule 13 (literal -> numeric .)
    RATIONAL        reduce using rule 13 (literal -> numeric .)
    FLOAT           reduce using rule 13 (literal -> numeric .)
    INTEGER         reduce using rule 13 (literal -> numeric .)
    $end            reduce using rule 13 (literal -> numeric .)
    END             reduce using rule 13 (literal -> numeric .)
    RETURN          reduce using rule 13 (literal -> numeric .)
    ELSE            reduce using rule 13 (literal -> numeric .)
    ELSIF           reduce using rule 13 (literal -> numeric .)
    PLUS            reduce using rule 23 (value -> numeric .)
    MINUS           reduce using rule 23 (value -> numeric .)
    EXPO            reduce using rule 23 (value -> numeric .)
    MULT            reduce using rule 23 (value -> numeric .)
    DIV             reduce using rule 23 (value -> numeric .)
    MODULO          reduce using rule 23 (value -> numeric .)


state 63

    (131) strucMatrix -> MATRIX . L_BRACKET arrays R_BRACKET

    L_BRACKET       shift and go to state 132


state 64

    (132) strucSet -> SET . PERIOD NEW
    (133) strucSet -> SET . PERIOD NEW L_PAREN R_PAREN
    (134) strucSet -> SET . PERIOD NEW L_PAREN array R_PAREN
    (135) strucSet -> SET . array
    (123) array -> . L_BRACKET literals R_BRACKET
    (124) array -> . L_BRACKET ids R_BRACKET
    (125) array -> . L_BRACKET elements R_BRACKET

    PERIOD          shift and go to state 133
    L_BRACKET       shift and go to state 135

    array                          shift and go to state 134

state 65

    (136) strucHash -> HASH . PERIOD NEW
    (137) strucHash -> HASH . PERIOD NEW L_BRACE R_BRACE
    (138) strucHash -> HASH . PERIOD NEW L_BRACE hashelems R_BRACE
    (139) strucHash -> HASH . array
    (123) array -> . L_BRACKET literals R_BRACKET
    (124) array -> . L_BRACKET ids R_BRACKET
    (125) array -> . L_BRACKET elements R_BRACKET

    PERIOD          shift and go to state 136
    L_BRACKET       shift and go to state 135

    array                          shift and go to state 137

state 66

    (66) assignment -> ID ADD_ASSIGN ID .

    ID              reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    DEF             reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    IF              reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    UNLESS          reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    CASE            reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    WHILE           reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    COMPLEX         reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    RATIONAL        reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    FLOAT           reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    INTEGER         reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    $end            reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    END             reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    RETURN          reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    ELSE            reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)
    ELSIF           reduce using rule 66 (assignment -> ID ADD_ASSIGN ID .)


state 67

    (67) assignment -> ID ADD_ASSIGN numeric .

    ID              reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    DEF             reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    IF              reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    UNLESS          reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    CASE            reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    WHILE           reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    COMPLEX         reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    RATIONAL        reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    FLOAT           reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    INTEGER         reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    $end            reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    END             reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    RETURN          reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    ELSE            reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)
    ELSIF           reduce using rule 67 (assignment -> ID ADD_ASSIGN numeric .)


state 68

    (68) assignment -> ID SUBS_ASSIGN ID .

    ID              reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    DEF             reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    IF              reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    UNLESS          reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    CASE            reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    WHILE           reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    COMPLEX         reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    RATIONAL        reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    FLOAT           reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    INTEGER         reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    $end            reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    END             reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    RETURN          reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    ELSE            reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)
    ELSIF           reduce using rule 68 (assignment -> ID SUBS_ASSIGN ID .)


state 69

    (69) assignment -> ID SUBS_ASSIGN numeric .

    ID              reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    DEF             reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    IF              reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    UNLESS          reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    CASE            reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    WHILE           reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    COMPLEX         reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    RATIONAL        reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    FLOAT           reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    INTEGER         reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    $end            reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    END             reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    RETURN          reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    ELSE            reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)
    ELSIF           reduce using rule 69 (assignment -> ID SUBS_ASSIGN numeric .)


state 70

    (70) assignment -> ID MULT_ASSIGN ID .

    ID              reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    DEF             reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    IF              reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    UNLESS          reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    CASE            reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    WHILE           reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    COMPLEX         reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    RATIONAL        reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    FLOAT           reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    INTEGER         reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    $end            reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    END             reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    RETURN          reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    ELSE            reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)
    ELSIF           reduce using rule 70 (assignment -> ID MULT_ASSIGN ID .)


state 71

    (71) assignment -> ID MULT_ASSIGN numeric .

    ID              reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    DEF             reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    IF              reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    UNLESS          reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    CASE            reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    WHILE           reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    COMPLEX         reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    RATIONAL        reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    FLOAT           reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    INTEGER         reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    $end            reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    END             reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    RETURN          reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    ELSE            reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)
    ELSIF           reduce using rule 71 (assignment -> ID MULT_ASSIGN numeric .)


state 72

    (72) assignment -> ID DIV_ASSIGN ID .

    ID              reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    DEF             reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    IF              reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    UNLESS          reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    CASE            reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    WHILE           reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    COMPLEX         reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    RATIONAL        reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    FLOAT           reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    INTEGER         reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    $end            reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    END             reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    RETURN          reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    ELSE            reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)
    ELSIF           reduce using rule 72 (assignment -> ID DIV_ASSIGN ID .)


state 73

    (73) assignment -> ID DIV_ASSIGN numeric .

    ID              reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    DEF             reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    IF              reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    UNLESS          reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    CASE            reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    WHILE           reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    COMPLEX         reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    RATIONAL        reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    FLOAT           reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    INTEGER         reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    $end            reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    END             reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    RETURN          reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    ELSE            reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)
    ELSIF           reduce using rule 73 (assignment -> ID DIV_ASSIGN numeric .)


state 74

    (74) assignment -> ID MOD_ASSIGN ID .

    ID              reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    DEF             reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    IF              reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    UNLESS          reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    CASE            reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    WHILE           reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    COMPLEX         reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    RATIONAL        reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    FLOAT           reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    INTEGER         reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    $end            reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    END             reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    RETURN          reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    ELSE            reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)
    ELSIF           reduce using rule 74 (assignment -> ID MOD_ASSIGN ID .)


state 75

    (75) assignment -> ID MOD_ASSIGN numeric .

    ID              reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    DEF             reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    IF              reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    UNLESS          reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    CASE            reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    WHILE           reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    COMPLEX         reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    RATIONAL        reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    FLOAT           reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    INTEGER         reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    $end            reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    END             reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    RETURN          reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    ELSE            reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)
    ELSIF           reduce using rule 75 (assignment -> ID MOD_ASSIGN numeric .)


state 76

    (76) function -> DEF ID L_PAREN . literals R_PAREN statements END
    (77) function -> DEF ID L_PAREN . R_PAREN statements END
    (79) function -> DEF ID L_PAREN . literals R_PAREN statements RETURN ID END
    (80) function -> DEF ID L_PAREN . R_PAREN statements RETURN ID END
    (82) function -> DEF ID L_PAREN . literals R_PAREN statements RETURN literal END
    (83) function -> DEF ID L_PAREN . R_PAREN statements RETURN literal END
    (15) literals -> . literal
    (16) literals -> . literal COMMA literals
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    R_PAREN         shift and go to state 140
    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literals                       shift and go to state 139
    literal                        shift and go to state 141
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 77

    (78) function -> DEF ID statements . END
    (81) function -> DEF ID statements . RETURN ID END
    (84) function -> DEF ID statements . RETURN literal END

    END             shift and go to state 142
    RETURN          shift and go to state 143


state 78

    (93) control -> IF boolean statements . END
    (96) control -> IF boolean statements . elses END
    (91) elses -> . else
    (92) elses -> . elsif elses
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements
    (88) elsif -> . ELSIF boolean statements
    (89) elsif -> . ELSIF comparation statements
    (90) elsif -> . ELSIF comparations statements

    END             shift and go to state 144
    ELSE            shift and go to state 148
    ELSIF           shift and go to state 149

    elses                          shift and go to state 145
    else                           shift and go to state 146
    elsif                          shift and go to state 147

state 79

    (57) comparations -> boolean AND . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32

    boolean                        shift and go to state 150

state 80

    (58) comparations -> boolean LOGIC_AND . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32

    boolean                        shift and go to state 151

state 81

    (59) comparations -> boolean OR . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32

    boolean                        shift and go to state 152

state 82

    (60) comparations -> boolean LOGIC_OR . boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32

    boolean                        shift and go to state 153

state 83

    (94) control -> IF comparation statements . END
    (97) control -> IF comparation statements . elses END
    (91) elses -> . else
    (92) elses -> . elsif elses
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements
    (88) elsif -> . ELSIF boolean statements
    (89) elsif -> . ELSIF comparation statements
    (90) elsif -> . ELSIF comparations statements

    END             shift and go to state 154
    ELSE            shift and go to state 148
    ELSIF           shift and go to state 149

    elses                          shift and go to state 155
    else                           shift and go to state 146
    elsif                          shift and go to state 147

state 84

    (49) comparations -> comparation AND . comparation
    (51) comparations -> comparation AND . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    comparation                    shift and go to state 156
    comparations                   shift and go to state 157
    literal                        shift and go to state 33
    boolean                        shift and go to state 158
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 85

    (50) comparations -> comparation LOGIC_AND . comparation
    (52) comparations -> comparation LOGIC_AND . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    comparation                    shift and go to state 159
    comparations                   shift and go to state 160
    literal                        shift and go to state 33
    boolean                        shift and go to state 158
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 86

    (53) comparations -> comparation OR . comparation
    (55) comparations -> comparation OR . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    comparation                    shift and go to state 161
    comparations                   shift and go to state 162
    literal                        shift and go to state 33
    boolean                        shift and go to state 158
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 87

    (54) comparations -> comparation LOGIC_OR . comparation
    (56) comparations -> comparation LOGIC_OR . comparations
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    comparation                    shift and go to state 163
    comparations                   shift and go to state 164
    literal                        shift and go to state 33
    boolean                        shift and go to state 158
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 88

    (95) control -> IF comparations statements . END
    (98) control -> IF comparations statements . elses END
    (91) elses -> . else
    (92) elses -> . elsif elses
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements
    (88) elsif -> . ELSIF boolean statements
    (89) elsif -> . ELSIF comparation statements
    (90) elsif -> . ELSIF comparations statements

    END             shift and go to state 165
    ELSE            shift and go to state 148
    ELSIF           shift and go to state 149

    elses                          shift and go to state 166
    else                           shift and go to state 146
    elsif                          shift and go to state 147

state 89

    (37) comparation -> literal EQUAL . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 167
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 90

    (39) comparation -> literal NOT_EQ . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 168
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 91

    (41) comparation -> literal LT_OR_EQ . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 169
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 92

    (43) comparation -> literal GT_OR_EQ . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 170
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 93

    (45) comparation -> literal LESS_THAN . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 171
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 94

    (47) comparation -> literal GREATER_THAN . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 172
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 95

    (38) comparation -> ID EQUAL . ID

    ID              shift and go to state 173


state 96

    (40) comparation -> ID NOT_EQ . ID

    ID              shift and go to state 174


state 97

    (42) comparation -> ID LT_OR_EQ . ID

    ID              shift and go to state 175


state 98

    (44) comparation -> ID GT_OR_EQ . ID

    ID              shift and go to state 176


state 99

    (46) comparation -> ID LESS_THAN . ID

    ID              shift and go to state 177


state 100

    (48) comparation -> ID GREATER_THAN . ID

    ID              shift and go to state 178


state 101

    (151) range -> STRING ELLIPSIS . STRING

    STRING          shift and go to state 179


state 102

    (152) range -> STRING DOUBLE_PERIOD . STRING

    STRING          shift and go to state 180


state 103

    (147) range -> INTEGER ELLIPSIS . INTEGER

    INTEGER         shift and go to state 181


state 104

    (148) range -> INTEGER DOUBLE_PERIOD . INTEGER

    INTEGER         shift and go to state 182


state 105

    (145) range -> L_PAREN INTEGER . ELLIPSIS INTEGER R_PAREN
    (146) range -> L_PAREN INTEGER . DOUBLE_PERIOD INTEGER R_PAREN

    ELLIPSIS        shift and go to state 183
    DOUBLE_PERIOD   shift and go to state 184


state 106

    (149) range -> L_PAREN STRING . ELLIPSIS STRING
    (150) range -> L_PAREN STRING . DOUBLE_PERIOD STRING

    ELLIPSIS        shift and go to state 185
    DOUBLE_PERIOD   shift and go to state 186


state 107

    (99) control -> UNLESS boolean COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 187
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 108

    (102) control -> UNLESS boolean statements . elses END
    (91) elses -> . else
    (92) elses -> . elsif elses
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements
    (88) elsif -> . ELSIF boolean statements
    (89) elsif -> . ELSIF comparation statements
    (90) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 148
    ELSIF           shift and go to state 149

    elses                          shift and go to state 188
    else                           shift and go to state 146
    elsif                          shift and go to state 147

state 109

    (100) control -> UNLESS comparation COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 189
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 110

    (103) control -> UNLESS comparation statements . elses END
    (91) elses -> . else
    (92) elses -> . elsif elses
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements
    (88) elsif -> . ELSIF boolean statements
    (89) elsif -> . ELSIF comparation statements
    (90) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 148
    ELSIF           shift and go to state 149

    elses                          shift and go to state 190
    else                           shift and go to state 146
    elsif                          shift and go to state 147

state 111

    (101) control -> UNLESS comparations COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 191
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 112

    (104) control -> UNLESS comparations statements . elses END
    (91) elses -> . else
    (92) elses -> . elsif elses
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements
    (88) elsif -> . ELSIF boolean statements
    (89) elsif -> . ELSIF comparation statements
    (90) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 148
    ELSIF           shift and go to state 149

    elses                          shift and go to state 192
    else                           shift and go to state 146
    elsif                          shift and go to state 147

state 113

    (111) control -> CASE ID whens . else END
    (112) control -> CASE ID whens . END
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements

    END             shift and go to state 194
    ELSE            shift and go to state 148

    else                           shift and go to state 193

state 114

    (109) whens -> when .
    (110) whens -> when . whens
    (109) whens -> . when
    (110) whens -> . when whens
    (105) when -> . WHEN literal
    (106) when -> . WHEN literal THEN
    (107) when -> . WHEN comparation
    (108) when -> . WHEN comparations

    END             reduce using rule 109 (whens -> when .)
    ELSE            reduce using rule 109 (whens -> when .)
    WHEN            shift and go to state 115

    when                           shift and go to state 114
    whens                          shift and go to state 195

state 115

    (105) when -> WHEN . literal
    (106) when -> WHEN . literal THEN
    (107) when -> WHEN . comparation
    (108) when -> WHEN . comparations
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 199
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 196
    comparation                    shift and go to state 197
    comparations                   shift and go to state 198
    boolean                        shift and go to state 200
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 116

    (113) control -> WHILE boolean DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 201
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 117

    (114) control -> WHILE comparation DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 202
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 118

    (115) control -> WHILE comparations DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 203
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 119

    (25) arithmetic -> value PLUS value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 25 (arithmetic -> value PLUS value .)
    DEF             reduce using rule 25 (arithmetic -> value PLUS value .)
    IF              reduce using rule 25 (arithmetic -> value PLUS value .)
    UNLESS          reduce using rule 25 (arithmetic -> value PLUS value .)
    CASE            reduce using rule 25 (arithmetic -> value PLUS value .)
    WHILE           reduce using rule 25 (arithmetic -> value PLUS value .)
    COMPLEX         reduce using rule 25 (arithmetic -> value PLUS value .)
    RATIONAL        reduce using rule 25 (arithmetic -> value PLUS value .)
    FLOAT           reduce using rule 25 (arithmetic -> value PLUS value .)
    INTEGER         reduce using rule 25 (arithmetic -> value PLUS value .)
    $end            reduce using rule 25 (arithmetic -> value PLUS value .)
    END             reduce using rule 25 (arithmetic -> value PLUS value .)
    RETURN          reduce using rule 25 (arithmetic -> value PLUS value .)
    ELSE            reduce using rule 25 (arithmetic -> value PLUS value .)
    ELSIF           reduce using rule 25 (arithmetic -> value PLUS value .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXPO            shift and go to state 49
    MULT            shift and go to state 50
    DIV             shift and go to state 51
    MODULO          shift and go to state 52


state 120

    (26) arithmetic -> value PLUS arithmetic .

    ID              reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    DEF             reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    IF              reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    UNLESS          reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    CASE            reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    WHILE           reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    COMPLEX         reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    RATIONAL        reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    FLOAT           reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    INTEGER         reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    $end            reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    END             reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    RETURN          reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    ELSE            reduce using rule 26 (arithmetic -> value PLUS arithmetic .)
    ELSIF           reduce using rule 26 (arithmetic -> value PLUS arithmetic .)


state 121

    (24) value -> ID .

    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    EXPO            reduce using rule 24 (value -> ID .)
    MULT            reduce using rule 24 (value -> ID .)
    DIV             reduce using rule 24 (value -> ID .)
    MODULO          reduce using rule 24 (value -> ID .)
    ID              reduce using rule 24 (value -> ID .)
    DEF             reduce using rule 24 (value -> ID .)
    IF              reduce using rule 24 (value -> ID .)
    UNLESS          reduce using rule 24 (value -> ID .)
    CASE            reduce using rule 24 (value -> ID .)
    WHILE           reduce using rule 24 (value -> ID .)
    COMPLEX         reduce using rule 24 (value -> ID .)
    RATIONAL        reduce using rule 24 (value -> ID .)
    FLOAT           reduce using rule 24 (value -> ID .)
    INTEGER         reduce using rule 24 (value -> ID .)
    $end            reduce using rule 24 (value -> ID .)
    END             reduce using rule 24 (value -> ID .)
    RETURN          reduce using rule 24 (value -> ID .)
    ELSE            reduce using rule 24 (value -> ID .)
    ELSIF           reduce using rule 24 (value -> ID .)


state 122

    (27) arithmetic -> value MINUS value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 27 (arithmetic -> value MINUS value .)
    DEF             reduce using rule 27 (arithmetic -> value MINUS value .)
    IF              reduce using rule 27 (arithmetic -> value MINUS value .)
    UNLESS          reduce using rule 27 (arithmetic -> value MINUS value .)
    CASE            reduce using rule 27 (arithmetic -> value MINUS value .)
    WHILE           reduce using rule 27 (arithmetic -> value MINUS value .)
    COMPLEX         reduce using rule 27 (arithmetic -> value MINUS value .)
    RATIONAL        reduce using rule 27 (arithmetic -> value MINUS value .)
    FLOAT           reduce using rule 27 (arithmetic -> value MINUS value .)
    INTEGER         reduce using rule 27 (arithmetic -> value MINUS value .)
    $end            reduce using rule 27 (arithmetic -> value MINUS value .)
    END             reduce using rule 27 (arithmetic -> value MINUS value .)
    RETURN          reduce using rule 27 (arithmetic -> value MINUS value .)
    ELSE            reduce using rule 27 (arithmetic -> value MINUS value .)
    ELSIF           reduce using rule 27 (arithmetic -> value MINUS value .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXPO            shift and go to state 49
    MULT            shift and go to state 50
    DIV             shift and go to state 51
    MODULO          shift and go to state 52


state 123

    (28) arithmetic -> value MINUS arithmetic .

    ID              reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    DEF             reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    IF              reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    UNLESS          reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    CASE            reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    WHILE           reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    COMPLEX         reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    RATIONAL        reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    FLOAT           reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    INTEGER         reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    $end            reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    END             reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    RETURN          reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    ELSE            reduce using rule 28 (arithmetic -> value MINUS arithmetic .)
    ELSIF           reduce using rule 28 (arithmetic -> value MINUS arithmetic .)


state 124

    (29) arithmetic -> value EXPO value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 29 (arithmetic -> value EXPO value .)
    DEF             reduce using rule 29 (arithmetic -> value EXPO value .)
    IF              reduce using rule 29 (arithmetic -> value EXPO value .)
    UNLESS          reduce using rule 29 (arithmetic -> value EXPO value .)
    CASE            reduce using rule 29 (arithmetic -> value EXPO value .)
    WHILE           reduce using rule 29 (arithmetic -> value EXPO value .)
    COMPLEX         reduce using rule 29 (arithmetic -> value EXPO value .)
    RATIONAL        reduce using rule 29 (arithmetic -> value EXPO value .)
    FLOAT           reduce using rule 29 (arithmetic -> value EXPO value .)
    INTEGER         reduce using rule 29 (arithmetic -> value EXPO value .)
    $end            reduce using rule 29 (arithmetic -> value EXPO value .)
    END             reduce using rule 29 (arithmetic -> value EXPO value .)
    RETURN          reduce using rule 29 (arithmetic -> value EXPO value .)
    ELSE            reduce using rule 29 (arithmetic -> value EXPO value .)
    ELSIF           reduce using rule 29 (arithmetic -> value EXPO value .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXPO            shift and go to state 49
    MULT            shift and go to state 50
    DIV             shift and go to state 51
    MODULO          shift and go to state 52


state 125

    (30) arithmetic -> value EXPO arithmetic .

    ID              reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    DEF             reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    IF              reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    UNLESS          reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    CASE            reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    WHILE           reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    COMPLEX         reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    RATIONAL        reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    FLOAT           reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    INTEGER         reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    $end            reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    END             reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    RETURN          reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    ELSE            reduce using rule 30 (arithmetic -> value EXPO arithmetic .)
    ELSIF           reduce using rule 30 (arithmetic -> value EXPO arithmetic .)


state 126

    (31) arithmetic -> value MULT value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 31 (arithmetic -> value MULT value .)
    DEF             reduce using rule 31 (arithmetic -> value MULT value .)
    IF              reduce using rule 31 (arithmetic -> value MULT value .)
    UNLESS          reduce using rule 31 (arithmetic -> value MULT value .)
    CASE            reduce using rule 31 (arithmetic -> value MULT value .)
    WHILE           reduce using rule 31 (arithmetic -> value MULT value .)
    COMPLEX         reduce using rule 31 (arithmetic -> value MULT value .)
    RATIONAL        reduce using rule 31 (arithmetic -> value MULT value .)
    FLOAT           reduce using rule 31 (arithmetic -> value MULT value .)
    INTEGER         reduce using rule 31 (arithmetic -> value MULT value .)
    $end            reduce using rule 31 (arithmetic -> value MULT value .)
    END             reduce using rule 31 (arithmetic -> value MULT value .)
    RETURN          reduce using rule 31 (arithmetic -> value MULT value .)
    ELSE            reduce using rule 31 (arithmetic -> value MULT value .)
    ELSIF           reduce using rule 31 (arithmetic -> value MULT value .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXPO            shift and go to state 49
    MULT            shift and go to state 50
    DIV             shift and go to state 51
    MODULO          shift and go to state 52


state 127

    (32) arithmetic -> value MULT arithmetic .

    ID              reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    DEF             reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    IF              reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    UNLESS          reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    CASE            reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    WHILE           reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    COMPLEX         reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    RATIONAL        reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    FLOAT           reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    INTEGER         reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    $end            reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    END             reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    RETURN          reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    ELSE            reduce using rule 32 (arithmetic -> value MULT arithmetic .)
    ELSIF           reduce using rule 32 (arithmetic -> value MULT arithmetic .)


state 128

    (33) arithmetic -> value DIV value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 33 (arithmetic -> value DIV value .)
    DEF             reduce using rule 33 (arithmetic -> value DIV value .)
    IF              reduce using rule 33 (arithmetic -> value DIV value .)
    UNLESS          reduce using rule 33 (arithmetic -> value DIV value .)
    CASE            reduce using rule 33 (arithmetic -> value DIV value .)
    WHILE           reduce using rule 33 (arithmetic -> value DIV value .)
    COMPLEX         reduce using rule 33 (arithmetic -> value DIV value .)
    RATIONAL        reduce using rule 33 (arithmetic -> value DIV value .)
    FLOAT           reduce using rule 33 (arithmetic -> value DIV value .)
    INTEGER         reduce using rule 33 (arithmetic -> value DIV value .)
    $end            reduce using rule 33 (arithmetic -> value DIV value .)
    END             reduce using rule 33 (arithmetic -> value DIV value .)
    RETURN          reduce using rule 33 (arithmetic -> value DIV value .)
    ELSE            reduce using rule 33 (arithmetic -> value DIV value .)
    ELSIF           reduce using rule 33 (arithmetic -> value DIV value .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXPO            shift and go to state 49
    MULT            shift and go to state 50
    DIV             shift and go to state 51
    MODULO          shift and go to state 52


state 129

    (34) arithmetic -> value DIV arithmetic .

    ID              reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    DEF             reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    IF              reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    UNLESS          reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    CASE            reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    WHILE           reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    COMPLEX         reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    RATIONAL        reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    FLOAT           reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    INTEGER         reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    $end            reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    END             reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    RETURN          reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    ELSE            reduce using rule 34 (arithmetic -> value DIV arithmetic .)
    ELSIF           reduce using rule 34 (arithmetic -> value DIV arithmetic .)


state 130

    (35) arithmetic -> value MODULO value .
    (25) arithmetic -> value . PLUS value
    (26) arithmetic -> value . PLUS arithmetic
    (27) arithmetic -> value . MINUS value
    (28) arithmetic -> value . MINUS arithmetic
    (29) arithmetic -> value . EXPO value
    (30) arithmetic -> value . EXPO arithmetic
    (31) arithmetic -> value . MULT value
    (32) arithmetic -> value . MULT arithmetic
    (33) arithmetic -> value . DIV value
    (34) arithmetic -> value . DIV arithmetic
    (35) arithmetic -> value . MODULO value
    (36) arithmetic -> value . MODULO arithmetic

    ID              reduce using rule 35 (arithmetic -> value MODULO value .)
    DEF             reduce using rule 35 (arithmetic -> value MODULO value .)
    IF              reduce using rule 35 (arithmetic -> value MODULO value .)
    UNLESS          reduce using rule 35 (arithmetic -> value MODULO value .)
    CASE            reduce using rule 35 (arithmetic -> value MODULO value .)
    WHILE           reduce using rule 35 (arithmetic -> value MODULO value .)
    COMPLEX         reduce using rule 35 (arithmetic -> value MODULO value .)
    RATIONAL        reduce using rule 35 (arithmetic -> value MODULO value .)
    FLOAT           reduce using rule 35 (arithmetic -> value MODULO value .)
    INTEGER         reduce using rule 35 (arithmetic -> value MODULO value .)
    $end            reduce using rule 35 (arithmetic -> value MODULO value .)
    END             reduce using rule 35 (arithmetic -> value MODULO value .)
    RETURN          reduce using rule 35 (arithmetic -> value MODULO value .)
    ELSE            reduce using rule 35 (arithmetic -> value MODULO value .)
    ELSIF           reduce using rule 35 (arithmetic -> value MODULO value .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXPO            shift and go to state 49
    MULT            shift and go to state 50
    DIV             shift and go to state 51
    MODULO          shift and go to state 52


state 131

    (36) arithmetic -> value MODULO arithmetic .

    ID              reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    DEF             reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    IF              reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    UNLESS          reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    CASE            reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    WHILE           reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    COMPLEX         reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    RATIONAL        reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    FLOAT           reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    INTEGER         reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    $end            reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    END             reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    RETURN          reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    ELSE            reduce using rule 36 (arithmetic -> value MODULO arithmetic .)
    ELSIF           reduce using rule 36 (arithmetic -> value MODULO arithmetic .)


state 132

    (131) strucMatrix -> MATRIX L_BRACKET . arrays R_BRACKET
    (126) arrays -> . array
    (127) arrays -> . array COMMA arrays
    (123) array -> . L_BRACKET literals R_BRACKET
    (124) array -> . L_BRACKET ids R_BRACKET
    (125) array -> . L_BRACKET elements R_BRACKET

    L_BRACKET       shift and go to state 135

    arrays                         shift and go to state 204
    array                          shift and go to state 205

state 133

    (132) strucSet -> SET PERIOD . NEW
    (133) strucSet -> SET PERIOD . NEW L_PAREN R_PAREN
    (134) strucSet -> SET PERIOD . NEW L_PAREN array R_PAREN

    NEW             shift and go to state 206


state 134

    (135) strucSet -> SET array .

    ID              reduce using rule 135 (strucSet -> SET array .)
    DEF             reduce using rule 135 (strucSet -> SET array .)
    IF              reduce using rule 135 (strucSet -> SET array .)
    UNLESS          reduce using rule 135 (strucSet -> SET array .)
    CASE            reduce using rule 135 (strucSet -> SET array .)
    WHILE           reduce using rule 135 (strucSet -> SET array .)
    COMPLEX         reduce using rule 135 (strucSet -> SET array .)
    RATIONAL        reduce using rule 135 (strucSet -> SET array .)
    FLOAT           reduce using rule 135 (strucSet -> SET array .)
    INTEGER         reduce using rule 135 (strucSet -> SET array .)
    $end            reduce using rule 135 (strucSet -> SET array .)
    END             reduce using rule 135 (strucSet -> SET array .)
    RETURN          reduce using rule 135 (strucSet -> SET array .)
    ELSE            reduce using rule 135 (strucSet -> SET array .)
    ELSIF           reduce using rule 135 (strucSet -> SET array .)


state 135

    (123) array -> L_BRACKET . literals R_BRACKET
    (124) array -> L_BRACKET . ids R_BRACKET
    (125) array -> L_BRACKET . elements R_BRACKET
    (15) literals -> . literal
    (16) literals -> . literal COMMA literals
    (8) ids -> . ID
    (9) ids -> . ID COMMA ids
    (121) elements -> . element
    (122) elements -> . element COMMA elements
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (116) element -> . ID
    (117) element -> . STRING
    (118) element -> . boolean
    (119) element -> . numeric
    (120) element -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 210
    STRING          shift and go to state 212
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literals                       shift and go to state 207
    ids                            shift and go to state 208
    elements                       shift and go to state 209
    literal                        shift and go to state 141
    element                        shift and go to state 211
    boolean                        shift and go to state 213
    numeric                        shift and go to state 214
    range                          shift and go to state 215

state 136

    (136) strucHash -> HASH PERIOD . NEW
    (137) strucHash -> HASH PERIOD . NEW L_BRACE R_BRACE
    (138) strucHash -> HASH PERIOD . NEW L_BRACE hashelems R_BRACE

    NEW             shift and go to state 216


state 137

    (139) strucHash -> HASH array .

    ID              reduce using rule 139 (strucHash -> HASH array .)
    DEF             reduce using rule 139 (strucHash -> HASH array .)
    IF              reduce using rule 139 (strucHash -> HASH array .)
    UNLESS          reduce using rule 139 (strucHash -> HASH array .)
    CASE            reduce using rule 139 (strucHash -> HASH array .)
    WHILE           reduce using rule 139 (strucHash -> HASH array .)
    COMPLEX         reduce using rule 139 (strucHash -> HASH array .)
    RATIONAL        reduce using rule 139 (strucHash -> HASH array .)
    FLOAT           reduce using rule 139 (strucHash -> HASH array .)
    INTEGER         reduce using rule 139 (strucHash -> HASH array .)
    $end            reduce using rule 139 (strucHash -> HASH array .)
    END             reduce using rule 139 (strucHash -> HASH array .)
    RETURN          reduce using rule 139 (strucHash -> HASH array .)
    ELSE            reduce using rule 139 (strucHash -> HASH array .)
    ELSIF           reduce using rule 139 (strucHash -> HASH array .)


state 138

    (11) literal -> ID .

    COMMA           reduce using rule 11 (literal -> ID .)
    R_PAREN         reduce using rule 11 (literal -> ID .)
    AND             reduce using rule 11 (literal -> ID .)
    LOGIC_AND       reduce using rule 11 (literal -> ID .)
    OR              reduce using rule 11 (literal -> ID .)
    LOGIC_OR        reduce using rule 11 (literal -> ID .)
    ID              reduce using rule 11 (literal -> ID .)
    DEF             reduce using rule 11 (literal -> ID .)
    IF              reduce using rule 11 (literal -> ID .)
    UNLESS          reduce using rule 11 (literal -> ID .)
    CASE            reduce using rule 11 (literal -> ID .)
    WHILE           reduce using rule 11 (literal -> ID .)
    COMPLEX         reduce using rule 11 (literal -> ID .)
    RATIONAL        reduce using rule 11 (literal -> ID .)
    FLOAT           reduce using rule 11 (literal -> ID .)
    INTEGER         reduce using rule 11 (literal -> ID .)
    COLON           reduce using rule 11 (literal -> ID .)
    DO              reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)
    R_BRACKET       reduce using rule 11 (literal -> ID .)
    R_BRACE         reduce using rule 11 (literal -> ID .)


state 139

    (76) function -> DEF ID L_PAREN literals . R_PAREN statements END
    (79) function -> DEF ID L_PAREN literals . R_PAREN statements RETURN ID END
    (82) function -> DEF ID L_PAREN literals . R_PAREN statements RETURN literal END

    R_PAREN         shift and go to state 217


state 140

    (77) function -> DEF ID L_PAREN R_PAREN . statements END
    (80) function -> DEF ID L_PAREN R_PAREN . statements RETURN ID END
    (83) function -> DEF ID L_PAREN R_PAREN . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 218
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 141

    (15) literals -> literal .
    (16) literals -> literal . COMMA literals

    R_PAREN         reduce using rule 15 (literals -> literal .)
    R_BRACKET       reduce using rule 15 (literals -> literal .)
    COMMA           shift and go to state 219


state 142

    (78) function -> DEF ID statements END .

    ID              reduce using rule 78 (function -> DEF ID statements END .)
    DEF             reduce using rule 78 (function -> DEF ID statements END .)
    IF              reduce using rule 78 (function -> DEF ID statements END .)
    UNLESS          reduce using rule 78 (function -> DEF ID statements END .)
    CASE            reduce using rule 78 (function -> DEF ID statements END .)
    WHILE           reduce using rule 78 (function -> DEF ID statements END .)
    COMPLEX         reduce using rule 78 (function -> DEF ID statements END .)
    RATIONAL        reduce using rule 78 (function -> DEF ID statements END .)
    FLOAT           reduce using rule 78 (function -> DEF ID statements END .)
    INTEGER         reduce using rule 78 (function -> DEF ID statements END .)
    $end            reduce using rule 78 (function -> DEF ID statements END .)
    END             reduce using rule 78 (function -> DEF ID statements END .)
    RETURN          reduce using rule 78 (function -> DEF ID statements END .)
    ELSE            reduce using rule 78 (function -> DEF ID statements END .)
    ELSIF           reduce using rule 78 (function -> DEF ID statements END .)


state 143

    (81) function -> DEF ID statements RETURN . ID END
    (84) function -> DEF ID statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 220
    STRING          shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 221
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 144

    (93) control -> IF boolean statements END .

    ID              reduce using rule 93 (control -> IF boolean statements END .)
    DEF             reduce using rule 93 (control -> IF boolean statements END .)
    IF              reduce using rule 93 (control -> IF boolean statements END .)
    UNLESS          reduce using rule 93 (control -> IF boolean statements END .)
    CASE            reduce using rule 93 (control -> IF boolean statements END .)
    WHILE           reduce using rule 93 (control -> IF boolean statements END .)
    COMPLEX         reduce using rule 93 (control -> IF boolean statements END .)
    RATIONAL        reduce using rule 93 (control -> IF boolean statements END .)
    FLOAT           reduce using rule 93 (control -> IF boolean statements END .)
    INTEGER         reduce using rule 93 (control -> IF boolean statements END .)
    $end            reduce using rule 93 (control -> IF boolean statements END .)
    END             reduce using rule 93 (control -> IF boolean statements END .)
    RETURN          reduce using rule 93 (control -> IF boolean statements END .)
    ELSE            reduce using rule 93 (control -> IF boolean statements END .)
    ELSIF           reduce using rule 93 (control -> IF boolean statements END .)


state 145

    (96) control -> IF boolean statements elses . END

    END             shift and go to state 222


state 146

    (91) elses -> else .

    END             reduce using rule 91 (elses -> else .)


state 147

    (92) elses -> elsif . elses
    (91) elses -> . else
    (92) elses -> . elsif elses
    (85) else -> . ELSE boolean statements
    (86) else -> . ELSE comparation statements
    (87) else -> . ELSE comparations statements
    (88) elsif -> . ELSIF boolean statements
    (89) elsif -> . ELSIF comparation statements
    (90) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 148
    ELSIF           shift and go to state 149

    elsif                          shift and go to state 147
    elses                          shift and go to state 223
    else                           shift and go to state 146

state 148

    (85) else -> ELSE . boolean statements
    (86) else -> ELSE . comparation statements
    (87) else -> ELSE . comparations statements
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 34
    STRING          shift and go to state 35
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    boolean                        shift and go to state 224
    comparation                    shift and go to state 225
    comparations                   shift and go to state 226
    literal                        shift and go to state 33
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 149

    (88) elsif -> ELSIF . boolean statements
    (89) elsif -> ELSIF . comparation statements
    (90) elsif -> ELSIF . comparations statements
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (37) comparation -> . literal EQUAL literal
    (38) comparation -> . ID EQUAL ID
    (39) comparation -> . literal NOT_EQ literal
    (40) comparation -> . ID NOT_EQ ID
    (41) comparation -> . literal LT_OR_EQ literal
    (42) comparation -> . ID LT_OR_EQ ID
    (43) comparation -> . literal GT_OR_EQ literal
    (44) comparation -> . ID GT_OR_EQ ID
    (45) comparation -> . literal LESS_THAN literal
    (46) comparation -> . ID LESS_THAN ID
    (47) comparation -> . literal GREATER_THAN literal
    (48) comparation -> . ID GREATER_THAN ID
    (49) comparations -> . comparation AND comparation
    (50) comparations -> . comparation LOGIC_AND comparation
    (51) comparations -> . comparation AND comparations
    (52) comparations -> . comparation LOGIC_AND comparations
    (53) comparations -> . comparation OR comparation
    (54) comparations -> . comparation LOGIC_OR comparation
    (55) comparations -> . comparation OR comparations
    (56) comparations -> . comparation LOGIC_OR comparations
    (57) comparations -> . boolean AND boolean
    (58) comparations -> . boolean LOGIC_AND boolean
    (59) comparations -> . boolean OR boolean
    (60) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 34
    STRING          shift and go to state 35
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    boolean                        shift and go to state 227
    comparation                    shift and go to state 228
    comparations                   shift and go to state 229
    literal                        shift and go to state 33
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 150

    (57) comparations -> boolean AND boolean .

    ID              reduce using rule 57 (comparations -> boolean AND boolean .)
    DEF             reduce using rule 57 (comparations -> boolean AND boolean .)
    IF              reduce using rule 57 (comparations -> boolean AND boolean .)
    UNLESS          reduce using rule 57 (comparations -> boolean AND boolean .)
    CASE            reduce using rule 57 (comparations -> boolean AND boolean .)
    WHILE           reduce using rule 57 (comparations -> boolean AND boolean .)
    COMPLEX         reduce using rule 57 (comparations -> boolean AND boolean .)
    RATIONAL        reduce using rule 57 (comparations -> boolean AND boolean .)
    FLOAT           reduce using rule 57 (comparations -> boolean AND boolean .)
    INTEGER         reduce using rule 57 (comparations -> boolean AND boolean .)
    COLON           reduce using rule 57 (comparations -> boolean AND boolean .)
    DO              reduce using rule 57 (comparations -> boolean AND boolean .)
    WHEN            reduce using rule 57 (comparations -> boolean AND boolean .)
    END             reduce using rule 57 (comparations -> boolean AND boolean .)
    ELSE            reduce using rule 57 (comparations -> boolean AND boolean .)


state 151

    (58) comparations -> boolean LOGIC_AND boolean .

    ID              reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    DEF             reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    IF              reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    UNLESS          reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    CASE            reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    WHILE           reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    COMPLEX         reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    RATIONAL        reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    FLOAT           reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    INTEGER         reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    COLON           reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    DO              reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    WHEN            reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    END             reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)
    ELSE            reduce using rule 58 (comparations -> boolean LOGIC_AND boolean .)


state 152

    (59) comparations -> boolean OR boolean .

    ID              reduce using rule 59 (comparations -> boolean OR boolean .)
    DEF             reduce using rule 59 (comparations -> boolean OR boolean .)
    IF              reduce using rule 59 (comparations -> boolean OR boolean .)
    UNLESS          reduce using rule 59 (comparations -> boolean OR boolean .)
    CASE            reduce using rule 59 (comparations -> boolean OR boolean .)
    WHILE           reduce using rule 59 (comparations -> boolean OR boolean .)
    COMPLEX         reduce using rule 59 (comparations -> boolean OR boolean .)
    RATIONAL        reduce using rule 59 (comparations -> boolean OR boolean .)
    FLOAT           reduce using rule 59 (comparations -> boolean OR boolean .)
    INTEGER         reduce using rule 59 (comparations -> boolean OR boolean .)
    COLON           reduce using rule 59 (comparations -> boolean OR boolean .)
    DO              reduce using rule 59 (comparations -> boolean OR boolean .)
    WHEN            reduce using rule 59 (comparations -> boolean OR boolean .)
    END             reduce using rule 59 (comparations -> boolean OR boolean .)
    ELSE            reduce using rule 59 (comparations -> boolean OR boolean .)


state 153

    (60) comparations -> boolean LOGIC_OR boolean .

    ID              reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    DEF             reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    IF              reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    UNLESS          reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    CASE            reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    WHILE           reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    COMPLEX         reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    RATIONAL        reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    FLOAT           reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    INTEGER         reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    COLON           reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    DO              reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    WHEN            reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    END             reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)
    ELSE            reduce using rule 60 (comparations -> boolean LOGIC_OR boolean .)


state 154

    (94) control -> IF comparation statements END .

    ID              reduce using rule 94 (control -> IF comparation statements END .)
    DEF             reduce using rule 94 (control -> IF comparation statements END .)
    IF              reduce using rule 94 (control -> IF comparation statements END .)
    UNLESS          reduce using rule 94 (control -> IF comparation statements END .)
    CASE            reduce using rule 94 (control -> IF comparation statements END .)
    WHILE           reduce using rule 94 (control -> IF comparation statements END .)
    COMPLEX         reduce using rule 94 (control -> IF comparation statements END .)
    RATIONAL        reduce using rule 94 (control -> IF comparation statements END .)
    FLOAT           reduce using rule 94 (control -> IF comparation statements END .)
    INTEGER         reduce using rule 94 (control -> IF comparation statements END .)
    $end            reduce using rule 94 (control -> IF comparation statements END .)
    END             reduce using rule 94 (control -> IF comparation statements END .)
    RETURN          reduce using rule 94 (control -> IF comparation statements END .)
    ELSE            reduce using rule 94 (control -> IF comparation statements END .)
    ELSIF           reduce using rule 94 (control -> IF comparation statements END .)


state 155

    (97) control -> IF comparation statements elses . END

    END             shift and go to state 230


state 156

    (49) comparations -> comparation AND comparation .
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 49 (comparations -> comparation AND comparation .)
    DEF             reduce using rule 49 (comparations -> comparation AND comparation .)
    IF              reduce using rule 49 (comparations -> comparation AND comparation .)
    UNLESS          reduce using rule 49 (comparations -> comparation AND comparation .)
    CASE            reduce using rule 49 (comparations -> comparation AND comparation .)
    WHILE           reduce using rule 49 (comparations -> comparation AND comparation .)
    COMPLEX         reduce using rule 49 (comparations -> comparation AND comparation .)
    RATIONAL        reduce using rule 49 (comparations -> comparation AND comparation .)
    FLOAT           reduce using rule 49 (comparations -> comparation AND comparation .)
    INTEGER         reduce using rule 49 (comparations -> comparation AND comparation .)
    COLON           reduce using rule 49 (comparations -> comparation AND comparation .)
    DO              reduce using rule 49 (comparations -> comparation AND comparation .)
    WHEN            reduce using rule 49 (comparations -> comparation AND comparation .)
    END             reduce using rule 49 (comparations -> comparation AND comparation .)
    ELSE            reduce using rule 49 (comparations -> comparation AND comparation .)
    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87


state 157

    (51) comparations -> comparation AND comparations .

    ID              reduce using rule 51 (comparations -> comparation AND comparations .)
    DEF             reduce using rule 51 (comparations -> comparation AND comparations .)
    IF              reduce using rule 51 (comparations -> comparation AND comparations .)
    UNLESS          reduce using rule 51 (comparations -> comparation AND comparations .)
    CASE            reduce using rule 51 (comparations -> comparation AND comparations .)
    WHILE           reduce using rule 51 (comparations -> comparation AND comparations .)
    COMPLEX         reduce using rule 51 (comparations -> comparation AND comparations .)
    RATIONAL        reduce using rule 51 (comparations -> comparation AND comparations .)
    FLOAT           reduce using rule 51 (comparations -> comparation AND comparations .)
    INTEGER         reduce using rule 51 (comparations -> comparation AND comparations .)
    COLON           reduce using rule 51 (comparations -> comparation AND comparations .)
    DO              reduce using rule 51 (comparations -> comparation AND comparations .)
    WHEN            reduce using rule 51 (comparations -> comparation AND comparations .)
    END             reduce using rule 51 (comparations -> comparation AND comparations .)
    ELSE            reduce using rule 51 (comparations -> comparation AND comparations .)


state 158

    (57) comparations -> boolean . AND boolean
    (58) comparations -> boolean . LOGIC_AND boolean
    (59) comparations -> boolean . OR boolean
    (60) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .

    AND             shift and go to state 79
    LOGIC_AND       shift and go to state 80
    OR              shift and go to state 81
    LOGIC_OR        shift and go to state 82
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)


state 159

    (50) comparations -> comparation LOGIC_AND comparation .
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    DEF             reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    IF              reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    UNLESS          reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    CASE            reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    WHILE           reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    COMPLEX         reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    RATIONAL        reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    FLOAT           reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    INTEGER         reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    COLON           reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    DO              reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    WHEN            reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    END             reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    ELSE            reduce using rule 50 (comparations -> comparation LOGIC_AND comparation .)
    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87


state 160

    (52) comparations -> comparation LOGIC_AND comparations .

    ID              reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    DEF             reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    IF              reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    UNLESS          reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    CASE            reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    WHILE           reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    COMPLEX         reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    RATIONAL        reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    FLOAT           reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    INTEGER         reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    COLON           reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    DO              reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    WHEN            reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    END             reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)
    ELSE            reduce using rule 52 (comparations -> comparation LOGIC_AND comparations .)


state 161

    (53) comparations -> comparation OR comparation .
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 53 (comparations -> comparation OR comparation .)
    DEF             reduce using rule 53 (comparations -> comparation OR comparation .)
    IF              reduce using rule 53 (comparations -> comparation OR comparation .)
    UNLESS          reduce using rule 53 (comparations -> comparation OR comparation .)
    CASE            reduce using rule 53 (comparations -> comparation OR comparation .)
    WHILE           reduce using rule 53 (comparations -> comparation OR comparation .)
    COMPLEX         reduce using rule 53 (comparations -> comparation OR comparation .)
    RATIONAL        reduce using rule 53 (comparations -> comparation OR comparation .)
    FLOAT           reduce using rule 53 (comparations -> comparation OR comparation .)
    INTEGER         reduce using rule 53 (comparations -> comparation OR comparation .)
    COLON           reduce using rule 53 (comparations -> comparation OR comparation .)
    DO              reduce using rule 53 (comparations -> comparation OR comparation .)
    WHEN            reduce using rule 53 (comparations -> comparation OR comparation .)
    END             reduce using rule 53 (comparations -> comparation OR comparation .)
    ELSE            reduce using rule 53 (comparations -> comparation OR comparation .)
    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87


state 162

    (55) comparations -> comparation OR comparations .

    ID              reduce using rule 55 (comparations -> comparation OR comparations .)
    DEF             reduce using rule 55 (comparations -> comparation OR comparations .)
    IF              reduce using rule 55 (comparations -> comparation OR comparations .)
    UNLESS          reduce using rule 55 (comparations -> comparation OR comparations .)
    CASE            reduce using rule 55 (comparations -> comparation OR comparations .)
    WHILE           reduce using rule 55 (comparations -> comparation OR comparations .)
    COMPLEX         reduce using rule 55 (comparations -> comparation OR comparations .)
    RATIONAL        reduce using rule 55 (comparations -> comparation OR comparations .)
    FLOAT           reduce using rule 55 (comparations -> comparation OR comparations .)
    INTEGER         reduce using rule 55 (comparations -> comparation OR comparations .)
    COLON           reduce using rule 55 (comparations -> comparation OR comparations .)
    DO              reduce using rule 55 (comparations -> comparation OR comparations .)
    WHEN            reduce using rule 55 (comparations -> comparation OR comparations .)
    END             reduce using rule 55 (comparations -> comparation OR comparations .)
    ELSE            reduce using rule 55 (comparations -> comparation OR comparations .)


state 163

    (54) comparations -> comparation LOGIC_OR comparation .
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    DEF             reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    IF              reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    UNLESS          reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    CASE            reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    WHILE           reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    COMPLEX         reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    RATIONAL        reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    FLOAT           reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    INTEGER         reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    COLON           reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    DO              reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    WHEN            reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    END             reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    ELSE            reduce using rule 54 (comparations -> comparation LOGIC_OR comparation .)
    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87


state 164

    (56) comparations -> comparation LOGIC_OR comparations .

    ID              reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    DEF             reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    IF              reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    UNLESS          reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    CASE            reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    WHILE           reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    COMPLEX         reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    RATIONAL        reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    FLOAT           reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    INTEGER         reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    COLON           reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    DO              reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    WHEN            reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    END             reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)
    ELSE            reduce using rule 56 (comparations -> comparation LOGIC_OR comparations .)


state 165

    (95) control -> IF comparations statements END .

    ID              reduce using rule 95 (control -> IF comparations statements END .)
    DEF             reduce using rule 95 (control -> IF comparations statements END .)
    IF              reduce using rule 95 (control -> IF comparations statements END .)
    UNLESS          reduce using rule 95 (control -> IF comparations statements END .)
    CASE            reduce using rule 95 (control -> IF comparations statements END .)
    WHILE           reduce using rule 95 (control -> IF comparations statements END .)
    COMPLEX         reduce using rule 95 (control -> IF comparations statements END .)
    RATIONAL        reduce using rule 95 (control -> IF comparations statements END .)
    FLOAT           reduce using rule 95 (control -> IF comparations statements END .)
    INTEGER         reduce using rule 95 (control -> IF comparations statements END .)
    $end            reduce using rule 95 (control -> IF comparations statements END .)
    END             reduce using rule 95 (control -> IF comparations statements END .)
    RETURN          reduce using rule 95 (control -> IF comparations statements END .)
    ELSE            reduce using rule 95 (control -> IF comparations statements END .)
    ELSIF           reduce using rule 95 (control -> IF comparations statements END .)


state 166

    (98) control -> IF comparations statements elses . END

    END             shift and go to state 231


state 167

    (37) comparation -> literal EQUAL literal .

    AND             reduce using rule 37 (comparation -> literal EQUAL literal .)
    LOGIC_AND       reduce using rule 37 (comparation -> literal EQUAL literal .)
    OR              reduce using rule 37 (comparation -> literal EQUAL literal .)
    LOGIC_OR        reduce using rule 37 (comparation -> literal EQUAL literal .)
    ID              reduce using rule 37 (comparation -> literal EQUAL literal .)
    DEF             reduce using rule 37 (comparation -> literal EQUAL literal .)
    IF              reduce using rule 37 (comparation -> literal EQUAL literal .)
    UNLESS          reduce using rule 37 (comparation -> literal EQUAL literal .)
    CASE            reduce using rule 37 (comparation -> literal EQUAL literal .)
    WHILE           reduce using rule 37 (comparation -> literal EQUAL literal .)
    COMPLEX         reduce using rule 37 (comparation -> literal EQUAL literal .)
    RATIONAL        reduce using rule 37 (comparation -> literal EQUAL literal .)
    FLOAT           reduce using rule 37 (comparation -> literal EQUAL literal .)
    INTEGER         reduce using rule 37 (comparation -> literal EQUAL literal .)
    COLON           reduce using rule 37 (comparation -> literal EQUAL literal .)
    DO              reduce using rule 37 (comparation -> literal EQUAL literal .)
    WHEN            reduce using rule 37 (comparation -> literal EQUAL literal .)
    END             reduce using rule 37 (comparation -> literal EQUAL literal .)
    ELSE            reduce using rule 37 (comparation -> literal EQUAL literal .)


state 168

    (39) comparation -> literal NOT_EQ literal .

    AND             reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    LOGIC_AND       reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    OR              reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    LOGIC_OR        reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    ID              reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    DEF             reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    IF              reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    UNLESS          reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    CASE            reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    WHILE           reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    COMPLEX         reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    RATIONAL        reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    FLOAT           reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    INTEGER         reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    COLON           reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    DO              reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    WHEN            reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    END             reduce using rule 39 (comparation -> literal NOT_EQ literal .)
    ELSE            reduce using rule 39 (comparation -> literal NOT_EQ literal .)


state 169

    (41) comparation -> literal LT_OR_EQ literal .

    AND             reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    OR              reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    ID              reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    DEF             reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    IF              reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    UNLESS          reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    CASE            reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    WHILE           reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    COMPLEX         reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    RATIONAL        reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    FLOAT           reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    INTEGER         reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    COLON           reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    DO              reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    WHEN            reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    END             reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)
    ELSE            reduce using rule 41 (comparation -> literal LT_OR_EQ literal .)


state 170

    (43) comparation -> literal GT_OR_EQ literal .

    AND             reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    OR              reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    ID              reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    DEF             reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    IF              reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    UNLESS          reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    CASE            reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    WHILE           reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    COMPLEX         reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    RATIONAL        reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    FLOAT           reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    INTEGER         reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    COLON           reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    DO              reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    WHEN            reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    END             reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)
    ELSE            reduce using rule 43 (comparation -> literal GT_OR_EQ literal .)


state 171

    (45) comparation -> literal LESS_THAN literal .

    AND             reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    LOGIC_AND       reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    OR              reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    LOGIC_OR        reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    ID              reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    DEF             reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    IF              reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    UNLESS          reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    CASE            reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    WHILE           reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    COMPLEX         reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    RATIONAL        reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    FLOAT           reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    INTEGER         reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    COLON           reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    DO              reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    WHEN            reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    END             reduce using rule 45 (comparation -> literal LESS_THAN literal .)
    ELSE            reduce using rule 45 (comparation -> literal LESS_THAN literal .)


state 172

    (47) comparation -> literal GREATER_THAN literal .

    AND             reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    LOGIC_AND       reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    OR              reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    LOGIC_OR        reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    ID              reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    DEF             reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    IF              reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    UNLESS          reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    CASE            reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    WHILE           reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    COMPLEX         reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    RATIONAL        reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    FLOAT           reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    INTEGER         reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    COLON           reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    DO              reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    WHEN            reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    END             reduce using rule 47 (comparation -> literal GREATER_THAN literal .)
    ELSE            reduce using rule 47 (comparation -> literal GREATER_THAN literal .)


state 173

    (38) comparation -> ID EQUAL ID .

    AND             reduce using rule 38 (comparation -> ID EQUAL ID .)
    LOGIC_AND       reduce using rule 38 (comparation -> ID EQUAL ID .)
    OR              reduce using rule 38 (comparation -> ID EQUAL ID .)
    LOGIC_OR        reduce using rule 38 (comparation -> ID EQUAL ID .)
    ID              reduce using rule 38 (comparation -> ID EQUAL ID .)
    DEF             reduce using rule 38 (comparation -> ID EQUAL ID .)
    IF              reduce using rule 38 (comparation -> ID EQUAL ID .)
    UNLESS          reduce using rule 38 (comparation -> ID EQUAL ID .)
    CASE            reduce using rule 38 (comparation -> ID EQUAL ID .)
    WHILE           reduce using rule 38 (comparation -> ID EQUAL ID .)
    COMPLEX         reduce using rule 38 (comparation -> ID EQUAL ID .)
    RATIONAL        reduce using rule 38 (comparation -> ID EQUAL ID .)
    FLOAT           reduce using rule 38 (comparation -> ID EQUAL ID .)
    INTEGER         reduce using rule 38 (comparation -> ID EQUAL ID .)
    COLON           reduce using rule 38 (comparation -> ID EQUAL ID .)
    DO              reduce using rule 38 (comparation -> ID EQUAL ID .)
    WHEN            reduce using rule 38 (comparation -> ID EQUAL ID .)
    END             reduce using rule 38 (comparation -> ID EQUAL ID .)
    ELSE            reduce using rule 38 (comparation -> ID EQUAL ID .)


state 174

    (40) comparation -> ID NOT_EQ ID .

    AND             reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    LOGIC_AND       reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    OR              reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    LOGIC_OR        reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    ID              reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    DEF             reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    IF              reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    UNLESS          reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    CASE            reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    WHILE           reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    COMPLEX         reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    RATIONAL        reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    FLOAT           reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    INTEGER         reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    COLON           reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    DO              reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    WHEN            reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    END             reduce using rule 40 (comparation -> ID NOT_EQ ID .)
    ELSE            reduce using rule 40 (comparation -> ID NOT_EQ ID .)


state 175

    (42) comparation -> ID LT_OR_EQ ID .

    AND             reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    LOGIC_AND       reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    OR              reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    LOGIC_OR        reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    ID              reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    DEF             reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    IF              reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    UNLESS          reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    CASE            reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    WHILE           reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    COMPLEX         reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    RATIONAL        reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    FLOAT           reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    INTEGER         reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    COLON           reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    DO              reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    WHEN            reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    END             reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)
    ELSE            reduce using rule 42 (comparation -> ID LT_OR_EQ ID .)


state 176

    (44) comparation -> ID GT_OR_EQ ID .

    AND             reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    LOGIC_AND       reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    OR              reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    LOGIC_OR        reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    ID              reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    DEF             reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    IF              reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    UNLESS          reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    CASE            reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    WHILE           reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    COMPLEX         reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    RATIONAL        reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    FLOAT           reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    INTEGER         reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    COLON           reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    DO              reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    WHEN            reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    END             reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)
    ELSE            reduce using rule 44 (comparation -> ID GT_OR_EQ ID .)


state 177

    (46) comparation -> ID LESS_THAN ID .

    AND             reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    LOGIC_AND       reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    OR              reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    LOGIC_OR        reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    ID              reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    DEF             reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    IF              reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    UNLESS          reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    CASE            reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    WHILE           reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    COMPLEX         reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    RATIONAL        reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    FLOAT           reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    INTEGER         reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    COLON           reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    DO              reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    WHEN            reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    END             reduce using rule 46 (comparation -> ID LESS_THAN ID .)
    ELSE            reduce using rule 46 (comparation -> ID LESS_THAN ID .)


state 178

    (48) comparation -> ID GREATER_THAN ID .

    AND             reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    LOGIC_AND       reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    OR              reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    LOGIC_OR        reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    ID              reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    DEF             reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    IF              reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    UNLESS          reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    CASE            reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    WHILE           reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    COMPLEX         reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    RATIONAL        reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    FLOAT           reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    INTEGER         reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    COLON           reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    DO              reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    WHEN            reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    END             reduce using rule 48 (comparation -> ID GREATER_THAN ID .)
    ELSE            reduce using rule 48 (comparation -> ID GREATER_THAN ID .)


state 179

    (151) range -> STRING ELLIPSIS STRING .

    EQUAL           reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    NOT_EQ          reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    LT_OR_EQ        reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    GT_OR_EQ        reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    LESS_THAN       reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    GREATER_THAN    reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    ID              reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    DEF             reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    IF              reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    UNLESS          reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    CASE            reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    WHILE           reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    COMPLEX         reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    RATIONAL        reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    FLOAT           reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    INTEGER         reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    $end            reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    END             reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    RETURN          reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    ELSE            reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    ELSIF           reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    COMMA           reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    R_PAREN         reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    AND             reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    LOGIC_AND       reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    OR              reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    LOGIC_OR        reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    COLON           reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    DO              reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    WHEN            reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    THEN            reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    R_BRACKET       reduce using rule 151 (range -> STRING ELLIPSIS STRING .)
    R_BRACE         reduce using rule 151 (range -> STRING ELLIPSIS STRING .)


state 180

    (152) range -> STRING DOUBLE_PERIOD STRING .

    EQUAL           reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    NOT_EQ          reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    LT_OR_EQ        reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    GT_OR_EQ        reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    LESS_THAN       reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    GREATER_THAN    reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    ID              reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    DEF             reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    IF              reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    UNLESS          reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    CASE            reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    WHILE           reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    COMPLEX         reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    RATIONAL        reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    FLOAT           reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    INTEGER         reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    $end            reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    END             reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    RETURN          reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    ELSE            reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    ELSIF           reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    COMMA           reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    R_PAREN         reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    AND             reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    LOGIC_AND       reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    OR              reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    LOGIC_OR        reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    COLON           reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    DO              reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    WHEN            reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    THEN            reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    R_BRACKET       reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)
    R_BRACE         reduce using rule 152 (range -> STRING DOUBLE_PERIOD STRING .)


state 181

    (147) range -> INTEGER ELLIPSIS INTEGER .

    EQUAL           reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    NOT_EQ          reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    LT_OR_EQ        reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    GT_OR_EQ        reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    LESS_THAN       reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    GREATER_THAN    reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    ID              reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    DEF             reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    IF              reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    UNLESS          reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    CASE            reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    WHILE           reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    COMPLEX         reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    RATIONAL        reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    FLOAT           reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    INTEGER         reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    $end            reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    END             reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    RETURN          reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    ELSE            reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    ELSIF           reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    COMMA           reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    R_PAREN         reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    AND             reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    LOGIC_AND       reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    OR              reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    LOGIC_OR        reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    COLON           reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    DO              reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    WHEN            reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    THEN            reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    R_BRACKET       reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)
    R_BRACE         reduce using rule 147 (range -> INTEGER ELLIPSIS INTEGER .)


state 182

    (148) range -> INTEGER DOUBLE_PERIOD INTEGER .

    EQUAL           reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    NOT_EQ          reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LT_OR_EQ        reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    GT_OR_EQ        reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LESS_THAN       reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    GREATER_THAN    reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ID              reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    DEF             reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    IF              reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    UNLESS          reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    CASE            reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    WHILE           reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COMPLEX         reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    RATIONAL        reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    FLOAT           reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    INTEGER         reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    $end            reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    END             reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    RETURN          reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ELSE            reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ELSIF           reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COMMA           reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_PAREN         reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    AND             reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LOGIC_AND       reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    OR              reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LOGIC_OR        reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COLON           reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    DO              reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    WHEN            reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    THEN            reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_BRACKET       reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_BRACE         reduce using rule 148 (range -> INTEGER DOUBLE_PERIOD INTEGER .)


state 183

    (145) range -> L_PAREN INTEGER ELLIPSIS . INTEGER R_PAREN

    INTEGER         shift and go to state 232


state 184

    (146) range -> L_PAREN INTEGER DOUBLE_PERIOD . INTEGER R_PAREN

    INTEGER         shift and go to state 233


state 185

    (149) range -> L_PAREN STRING ELLIPSIS . STRING

    STRING          shift and go to state 234


state 186

    (150) range -> L_PAREN STRING DOUBLE_PERIOD . STRING

    STRING          shift and go to state 235


state 187

    (99) control -> UNLESS boolean COLON statements . END

    END             shift and go to state 236


state 188

    (102) control -> UNLESS boolean statements elses . END

    END             shift and go to state 237


state 189

    (100) control -> UNLESS comparation COLON statements . END

    END             shift and go to state 238


state 190

    (103) control -> UNLESS comparation statements elses . END

    END             shift and go to state 239


state 191

    (101) control -> UNLESS comparations COLON statements . END

    END             shift and go to state 240


state 192

    (104) control -> UNLESS comparations statements elses . END

    END             shift and go to state 241


state 193

    (111) control -> CASE ID whens else . END

    END             shift and go to state 242


state 194

    (112) control -> CASE ID whens END .

    ID              reduce using rule 112 (control -> CASE ID whens END .)
    DEF             reduce using rule 112 (control -> CASE ID whens END .)
    IF              reduce using rule 112 (control -> CASE ID whens END .)
    UNLESS          reduce using rule 112 (control -> CASE ID whens END .)
    CASE            reduce using rule 112 (control -> CASE ID whens END .)
    WHILE           reduce using rule 112 (control -> CASE ID whens END .)
    COMPLEX         reduce using rule 112 (control -> CASE ID whens END .)
    RATIONAL        reduce using rule 112 (control -> CASE ID whens END .)
    FLOAT           reduce using rule 112 (control -> CASE ID whens END .)
    INTEGER         reduce using rule 112 (control -> CASE ID whens END .)
    $end            reduce using rule 112 (control -> CASE ID whens END .)
    END             reduce using rule 112 (control -> CASE ID whens END .)
    RETURN          reduce using rule 112 (control -> CASE ID whens END .)
    ELSE            reduce using rule 112 (control -> CASE ID whens END .)
    ELSIF           reduce using rule 112 (control -> CASE ID whens END .)


state 195

    (110) whens -> when whens .

    END             reduce using rule 110 (whens -> when whens .)
    ELSE            reduce using rule 110 (whens -> when whens .)


state 196

    (105) when -> WHEN literal .
    (106) when -> WHEN literal . THEN
    (37) comparation -> literal . EQUAL literal
    (39) comparation -> literal . NOT_EQ literal
    (41) comparation -> literal . LT_OR_EQ literal
    (43) comparation -> literal . GT_OR_EQ literal
    (45) comparation -> literal . LESS_THAN literal
    (47) comparation -> literal . GREATER_THAN literal

    WHEN            reduce using rule 105 (when -> WHEN literal .)
    END             reduce using rule 105 (when -> WHEN literal .)
    ELSE            reduce using rule 105 (when -> WHEN literal .)
    THEN            shift and go to state 243
    EQUAL           shift and go to state 89
    NOT_EQ          shift and go to state 90
    LT_OR_EQ        shift and go to state 91
    GT_OR_EQ        shift and go to state 92
    LESS_THAN       shift and go to state 93
    GREATER_THAN    shift and go to state 94


state 197

    (107) when -> WHEN comparation .
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations

    WHEN            reduce using rule 107 (when -> WHEN comparation .)
    END             reduce using rule 107 (when -> WHEN comparation .)
    ELSE            reduce using rule 107 (when -> WHEN comparation .)
    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87


state 198

    (108) when -> WHEN comparations .

    WHEN            reduce using rule 108 (when -> WHEN comparations .)
    END             reduce using rule 108 (when -> WHEN comparations .)
    ELSE            reduce using rule 108 (when -> WHEN comparations .)


state 199

    (11) literal -> ID .
    (38) comparation -> ID . EQUAL ID
    (40) comparation -> ID . NOT_EQ ID
    (42) comparation -> ID . LT_OR_EQ ID
    (44) comparation -> ID . GT_OR_EQ ID
    (46) comparation -> ID . LESS_THAN ID
    (48) comparation -> ID . GREATER_THAN ID

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LT_OR_EQ resolved as shift
  ! shift/reduce conflict for GT_OR_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
    THEN            reduce using rule 11 (literal -> ID .)
    WHEN            reduce using rule 11 (literal -> ID .)
    END             reduce using rule 11 (literal -> ID .)
    ELSE            reduce using rule 11 (literal -> ID .)
    EQUAL           shift and go to state 95
    NOT_EQ          shift and go to state 96
    LT_OR_EQ        shift and go to state 97
    GT_OR_EQ        shift and go to state 98
    LESS_THAN       shift and go to state 99
    GREATER_THAN    shift and go to state 100

  ! EQUAL           [ reduce using rule 11 (literal -> ID .) ]
  ! NOT_EQ          [ reduce using rule 11 (literal -> ID .) ]
  ! LT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! GT_OR_EQ        [ reduce using rule 11 (literal -> ID .) ]
  ! LESS_THAN       [ reduce using rule 11 (literal -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 11 (literal -> ID .) ]


state 200

    (12) literal -> boolean .
    (57) comparations -> boolean . AND boolean
    (58) comparations -> boolean . LOGIC_AND boolean
    (59) comparations -> boolean . OR boolean
    (60) comparations -> boolean . LOGIC_OR boolean

    THEN            reduce using rule 12 (literal -> boolean .)
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    WHEN            reduce using rule 12 (literal -> boolean .)
    END             reduce using rule 12 (literal -> boolean .)
    ELSE            reduce using rule 12 (literal -> boolean .)
    AND             shift and go to state 79
    LOGIC_AND       shift and go to state 80
    OR              shift and go to state 81
    LOGIC_OR        shift and go to state 82


state 201

    (113) control -> WHILE boolean DO statements . END

    END             shift and go to state 244


state 202

    (114) control -> WHILE comparation DO statements . END

    END             shift and go to state 245


state 203

    (115) control -> WHILE comparations DO statements . END

    END             shift and go to state 246


state 204

    (131) strucMatrix -> MATRIX L_BRACKET arrays . R_BRACKET

    R_BRACKET       shift and go to state 247


state 205

    (126) arrays -> array .
    (127) arrays -> array . COMMA arrays

    R_BRACKET       reduce using rule 126 (arrays -> array .)
    COMMA           shift and go to state 248


state 206

    (132) strucSet -> SET PERIOD NEW .
    (133) strucSet -> SET PERIOD NEW . L_PAREN R_PAREN
    (134) strucSet -> SET PERIOD NEW . L_PAREN array R_PAREN

    ID              reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    DEF             reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    IF              reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    UNLESS          reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    CASE            reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    WHILE           reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    COMPLEX         reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    RATIONAL        reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    FLOAT           reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    INTEGER         reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    $end            reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    END             reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    RETURN          reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    ELSE            reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    ELSIF           reduce using rule 132 (strucSet -> SET PERIOD NEW .)
    L_PAREN         shift and go to state 249


state 207

    (123) array -> L_BRACKET literals . R_BRACKET

    R_BRACKET       shift and go to state 250


state 208

    (124) array -> L_BRACKET ids . R_BRACKET

    R_BRACKET       shift and go to state 251


state 209

    (125) array -> L_BRACKET elements . R_BRACKET

    R_BRACKET       shift and go to state 252


state 210

    (8) ids -> ID .
    (9) ids -> ID . COMMA ids
    (11) literal -> ID .
    (116) element -> ID .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for R_BRACKET resolved using rule 8 (ids -> ID .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for R_BRACKET resolved using rule 8 (ids -> ID .)
    R_BRACKET       reduce using rule 8 (ids -> ID .)
    COMMA           shift and go to state 253

  ! COMMA           [ reduce using rule 11 (literal -> ID .) ]
  ! R_BRACKET       [ reduce using rule 11 (literal -> ID .) ]
  ! COMMA           [ reduce using rule 116 (element -> ID .) ]
  ! R_BRACKET       [ reduce using rule 116 (element -> ID .) ]


state 211

    (121) elements -> element .
    (122) elements -> element . COMMA elements

    R_BRACKET       reduce using rule 121 (elements -> element .)
    COMMA           shift and go to state 254


state 212

    (10) literal -> STRING .
    (117) element -> STRING .
    (151) range -> STRING . ELLIPSIS STRING
    (152) range -> STRING . DOUBLE_PERIOD STRING

  ! reduce/reduce conflict for COMMA resolved using rule 10 (literal -> STRING .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 10 (literal -> STRING .)
    COMMA           reduce using rule 10 (literal -> STRING .)
    R_BRACKET       reduce using rule 10 (literal -> STRING .)
    ELLIPSIS        shift and go to state 101
    DOUBLE_PERIOD   shift and go to state 102

  ! COMMA           [ reduce using rule 117 (element -> STRING .) ]
  ! R_BRACKET       [ reduce using rule 117 (element -> STRING .) ]


state 213

    (12) literal -> boolean .
    (118) element -> boolean .

  ! reduce/reduce conflict for COMMA resolved using rule 12 (literal -> boolean .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 12 (literal -> boolean .)
    COMMA           reduce using rule 12 (literal -> boolean .)
    R_BRACKET       reduce using rule 12 (literal -> boolean .)

  ! COMMA           [ reduce using rule 118 (element -> boolean .) ]
  ! R_BRACKET       [ reduce using rule 118 (element -> boolean .) ]


state 214

    (13) literal -> numeric .
    (119) element -> numeric .

  ! reduce/reduce conflict for COMMA resolved using rule 13 (literal -> numeric .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 13 (literal -> numeric .)
    COMMA           reduce using rule 13 (literal -> numeric .)
    R_BRACKET       reduce using rule 13 (literal -> numeric .)

  ! COMMA           [ reduce using rule 119 (element -> numeric .) ]
  ! R_BRACKET       [ reduce using rule 119 (element -> numeric .) ]


state 215

    (14) literal -> range .
    (120) element -> range .

  ! reduce/reduce conflict for COMMA resolved using rule 14 (literal -> range .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 14 (literal -> range .)
    COMMA           reduce using rule 14 (literal -> range .)
    R_BRACKET       reduce using rule 14 (literal -> range .)

  ! COMMA           [ reduce using rule 120 (element -> range .) ]
  ! R_BRACKET       [ reduce using rule 120 (element -> range .) ]


state 216

    (136) strucHash -> HASH PERIOD NEW .
    (137) strucHash -> HASH PERIOD NEW . L_BRACE R_BRACE
    (138) strucHash -> HASH PERIOD NEW . L_BRACE hashelems R_BRACE

    ID              reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    DEF             reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    IF              reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    UNLESS          reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    CASE            reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    WHILE           reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    COMPLEX         reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    RATIONAL        reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    FLOAT           reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    INTEGER         reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    $end            reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    END             reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    RETURN          reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    ELSE            reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    ELSIF           reduce using rule 136 (strucHash -> HASH PERIOD NEW .)
    L_BRACE         shift and go to state 255


state 217

    (76) function -> DEF ID L_PAREN literals R_PAREN . statements END
    (79) function -> DEF ID L_PAREN literals R_PAREN . statements RETURN ID END
    (82) function -> DEF ID L_PAREN literals R_PAREN . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 256
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 218

    (77) function -> DEF ID L_PAREN R_PAREN statements . END
    (80) function -> DEF ID L_PAREN R_PAREN statements . RETURN ID END
    (83) function -> DEF ID L_PAREN R_PAREN statements . RETURN literal END

    END             shift and go to state 257
    RETURN          shift and go to state 258


state 219

    (16) literals -> literal COMMA . literals
    (15) literals -> . literal
    (16) literals -> . literal COMMA literals
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 141
    literals                       shift and go to state 259
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 220

    (81) function -> DEF ID statements RETURN ID . END
    (11) literal -> ID .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 260

  ! END             [ reduce using rule 11 (literal -> ID .) ]


state 221

    (84) function -> DEF ID statements RETURN literal . END

    END             shift and go to state 261


state 222

    (96) control -> IF boolean statements elses END .

    ID              reduce using rule 96 (control -> IF boolean statements elses END .)
    DEF             reduce using rule 96 (control -> IF boolean statements elses END .)
    IF              reduce using rule 96 (control -> IF boolean statements elses END .)
    UNLESS          reduce using rule 96 (control -> IF boolean statements elses END .)
    CASE            reduce using rule 96 (control -> IF boolean statements elses END .)
    WHILE           reduce using rule 96 (control -> IF boolean statements elses END .)
    COMPLEX         reduce using rule 96 (control -> IF boolean statements elses END .)
    RATIONAL        reduce using rule 96 (control -> IF boolean statements elses END .)
    FLOAT           reduce using rule 96 (control -> IF boolean statements elses END .)
    INTEGER         reduce using rule 96 (control -> IF boolean statements elses END .)
    $end            reduce using rule 96 (control -> IF boolean statements elses END .)
    END             reduce using rule 96 (control -> IF boolean statements elses END .)
    RETURN          reduce using rule 96 (control -> IF boolean statements elses END .)
    ELSE            reduce using rule 96 (control -> IF boolean statements elses END .)
    ELSIF           reduce using rule 96 (control -> IF boolean statements elses END .)


state 223

    (92) elses -> elsif elses .

    END             reduce using rule 92 (elses -> elsif elses .)


state 224

    (85) else -> ELSE boolean . statements
    (57) comparations -> boolean . AND boolean
    (58) comparations -> boolean . LOGIC_AND boolean
    (59) comparations -> boolean . OR boolean
    (60) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 79
    LOGIC_AND       shift and go to state 80
    OR              shift and go to state 81
    LOGIC_OR        shift and go to state 82
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 262
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 225

    (86) else -> ELSE comparation . statements
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 263
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 226

    (87) else -> ELSE comparations . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 264
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 227

    (88) elsif -> ELSIF boolean . statements
    (57) comparations -> boolean . AND boolean
    (58) comparations -> boolean . LOGIC_AND boolean
    (59) comparations -> boolean . OR boolean
    (60) comparations -> boolean . LOGIC_OR boolean
    (12) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 79
    LOGIC_AND       shift and go to state 80
    OR              shift and go to state 81
    LOGIC_OR        shift and go to state 82
    EQUAL           reduce using rule 12 (literal -> boolean .)
    NOT_EQ          reduce using rule 12 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 12 (literal -> boolean .)
    LESS_THAN       reduce using rule 12 (literal -> boolean .)
    GREATER_THAN    reduce using rule 12 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 265
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 228

    (89) elsif -> ELSIF comparation . statements
    (49) comparations -> comparation . AND comparation
    (50) comparations -> comparation . LOGIC_AND comparation
    (51) comparations -> comparation . AND comparations
    (52) comparations -> comparation . LOGIC_AND comparations
    (53) comparations -> comparation . OR comparation
    (54) comparations -> comparation . LOGIC_OR comparation
    (55) comparations -> comparation . OR comparations
    (56) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    AND             shift and go to state 84
    LOGIC_AND       shift and go to state 85
    OR              shift and go to state 86
    LOGIC_OR        shift and go to state 87
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 266
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 229

    (90) elsif -> ELSIF comparations . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (61) assignment -> . ID ASSIGN ID
    (62) assignment -> . ID ASSIGN NIL
    (63) assignment -> . ID ASSIGN struc
    (64) assignment -> . ID ASSIGN literal
    (65) assignment -> . ID ASSIGN arithmetic
    (66) assignment -> . ID ADD_ASSIGN ID
    (67) assignment -> . ID ADD_ASSIGN numeric
    (68) assignment -> . ID SUBS_ASSIGN ID
    (69) assignment -> . ID SUBS_ASSIGN numeric
    (70) assignment -> . ID MULT_ASSIGN ID
    (71) assignment -> . ID MULT_ASSIGN numeric
    (72) assignment -> . ID DIV_ASSIGN ID
    (73) assignment -> . ID DIV_ASSIGN numeric
    (74) assignment -> . ID MOD_ASSIGN ID
    (75) assignment -> . ID MOD_ASSIGN numeric
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (77) function -> . DEF ID L_PAREN R_PAREN statements END
    (78) function -> . DEF ID statements END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (81) function -> . DEF ID statements RETURN ID END
    (82) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (83) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (84) function -> . DEF ID statements RETURN literal END
    (93) control -> . IF boolean statements END
    (94) control -> . IF comparation statements END
    (95) control -> . IF comparations statements END
    (96) control -> . IF boolean statements elses END
    (97) control -> . IF comparation statements elses END
    (98) control -> . IF comparations statements elses END
    (99) control -> . UNLESS boolean COLON statements END
    (100) control -> . UNLESS comparation COLON statements END
    (101) control -> . UNLESS comparations COLON statements END
    (102) control -> . UNLESS boolean statements elses END
    (103) control -> . UNLESS comparation statements elses END
    (104) control -> . UNLESS comparations statements elses END
    (111) control -> . CASE ID whens else END
    (112) control -> . CASE ID whens END
    (113) control -> . WHILE boolean DO statements END
    (114) control -> . WHILE comparation DO statements END
    (115) control -> . WHILE comparations DO statements END
    (25) arithmetic -> . value PLUS value
    (26) arithmetic -> . value PLUS arithmetic
    (27) arithmetic -> . value MINUS value
    (28) arithmetic -> . value MINUS arithmetic
    (29) arithmetic -> . value EXPO value
    (30) arithmetic -> . value EXPO arithmetic
    (31) arithmetic -> . value MULT value
    (32) arithmetic -> . value MULT arithmetic
    (33) arithmetic -> . value DIV value
    (34) arithmetic -> . value DIV arithmetic
    (35) arithmetic -> . value MODULO value
    (36) arithmetic -> . value MODULO arithmetic
    (23) value -> . numeric
    (24) value -> . ID
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    statements                     shift and go to state 267
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9
    value                          shift and go to state 15

state 230

    (97) control -> IF comparation statements elses END .

    ID              reduce using rule 97 (control -> IF comparation statements elses END .)
    DEF             reduce using rule 97 (control -> IF comparation statements elses END .)
    IF              reduce using rule 97 (control -> IF comparation statements elses END .)
    UNLESS          reduce using rule 97 (control -> IF comparation statements elses END .)
    CASE            reduce using rule 97 (control -> IF comparation statements elses END .)
    WHILE           reduce using rule 97 (control -> IF comparation statements elses END .)
    COMPLEX         reduce using rule 97 (control -> IF comparation statements elses END .)
    RATIONAL        reduce using rule 97 (control -> IF comparation statements elses END .)
    FLOAT           reduce using rule 97 (control -> IF comparation statements elses END .)
    INTEGER         reduce using rule 97 (control -> IF comparation statements elses END .)
    $end            reduce using rule 97 (control -> IF comparation statements elses END .)
    END             reduce using rule 97 (control -> IF comparation statements elses END .)
    RETURN          reduce using rule 97 (control -> IF comparation statements elses END .)
    ELSE            reduce using rule 97 (control -> IF comparation statements elses END .)
    ELSIF           reduce using rule 97 (control -> IF comparation statements elses END .)


state 231

    (98) control -> IF comparations statements elses END .

    ID              reduce using rule 98 (control -> IF comparations statements elses END .)
    DEF             reduce using rule 98 (control -> IF comparations statements elses END .)
    IF              reduce using rule 98 (control -> IF comparations statements elses END .)
    UNLESS          reduce using rule 98 (control -> IF comparations statements elses END .)
    CASE            reduce using rule 98 (control -> IF comparations statements elses END .)
    WHILE           reduce using rule 98 (control -> IF comparations statements elses END .)
    COMPLEX         reduce using rule 98 (control -> IF comparations statements elses END .)
    RATIONAL        reduce using rule 98 (control -> IF comparations statements elses END .)
    FLOAT           reduce using rule 98 (control -> IF comparations statements elses END .)
    INTEGER         reduce using rule 98 (control -> IF comparations statements elses END .)
    $end            reduce using rule 98 (control -> IF comparations statements elses END .)
    END             reduce using rule 98 (control -> IF comparations statements elses END .)
    RETURN          reduce using rule 98 (control -> IF comparations statements elses END .)
    ELSE            reduce using rule 98 (control -> IF comparations statements elses END .)
    ELSIF           reduce using rule 98 (control -> IF comparations statements elses END .)


state 232

    (145) range -> L_PAREN INTEGER ELLIPSIS INTEGER . R_PAREN

    R_PAREN         shift and go to state 268


state 233

    (146) range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER . R_PAREN

    R_PAREN         shift and go to state 269


state 234

    (149) range -> L_PAREN STRING ELLIPSIS STRING .

    EQUAL           reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    NOT_EQ          reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LT_OR_EQ        reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    GT_OR_EQ        reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LESS_THAN       reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    GREATER_THAN    reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ID              reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    DEF             reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    IF              reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    UNLESS          reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    CASE            reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    WHILE           reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COMPLEX         reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    RATIONAL        reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    FLOAT           reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    INTEGER         reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    $end            reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    END             reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    RETURN          reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ELSE            reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ELSIF           reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COMMA           reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_PAREN         reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    AND             reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LOGIC_AND       reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    OR              reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LOGIC_OR        reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COLON           reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    DO              reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    WHEN            reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    THEN            reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_BRACKET       reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_BRACE         reduce using rule 149 (range -> L_PAREN STRING ELLIPSIS STRING .)


state 235

    (150) range -> L_PAREN STRING DOUBLE_PERIOD STRING .

    EQUAL           reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    NOT_EQ          reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LT_OR_EQ        reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    GT_OR_EQ        reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LESS_THAN       reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    GREATER_THAN    reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ID              reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    DEF             reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    IF              reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    UNLESS          reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    CASE            reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    WHILE           reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COMPLEX         reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    RATIONAL        reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    FLOAT           reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    INTEGER         reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    $end            reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    END             reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    RETURN          reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ELSE            reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ELSIF           reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COMMA           reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_PAREN         reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    AND             reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LOGIC_AND       reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    OR              reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LOGIC_OR        reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COLON           reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    DO              reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    WHEN            reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    THEN            reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_BRACKET       reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_BRACE         reduce using rule 150 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)


state 236

    (99) control -> UNLESS boolean COLON statements END .

    ID              reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    DEF             reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    IF              reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    UNLESS          reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    CASE            reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    WHILE           reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    COMPLEX         reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    RATIONAL        reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    FLOAT           reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    INTEGER         reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    $end            reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    END             reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    RETURN          reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    ELSE            reduce using rule 99 (control -> UNLESS boolean COLON statements END .)
    ELSIF           reduce using rule 99 (control -> UNLESS boolean COLON statements END .)


state 237

    (102) control -> UNLESS boolean statements elses END .

    ID              reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    DEF             reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    IF              reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    UNLESS          reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    CASE            reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    WHILE           reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    COMPLEX         reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    RATIONAL        reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    FLOAT           reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    INTEGER         reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    $end            reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    END             reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    RETURN          reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    ELSE            reduce using rule 102 (control -> UNLESS boolean statements elses END .)
    ELSIF           reduce using rule 102 (control -> UNLESS boolean statements elses END .)


state 238

    (100) control -> UNLESS comparation COLON statements END .

    ID              reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    DEF             reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    IF              reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    UNLESS          reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    CASE            reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    WHILE           reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    COMPLEX         reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    RATIONAL        reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    FLOAT           reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    INTEGER         reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    $end            reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    END             reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    RETURN          reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    ELSE            reduce using rule 100 (control -> UNLESS comparation COLON statements END .)
    ELSIF           reduce using rule 100 (control -> UNLESS comparation COLON statements END .)


state 239

    (103) control -> UNLESS comparation statements elses END .

    ID              reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    DEF             reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    IF              reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    UNLESS          reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    CASE            reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    WHILE           reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    COMPLEX         reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    RATIONAL        reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    FLOAT           reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    INTEGER         reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    $end            reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    END             reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    RETURN          reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    ELSE            reduce using rule 103 (control -> UNLESS comparation statements elses END .)
    ELSIF           reduce using rule 103 (control -> UNLESS comparation statements elses END .)


state 240

    (101) control -> UNLESS comparations COLON statements END .

    ID              reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    DEF             reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    IF              reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    UNLESS          reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    CASE            reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    WHILE           reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    COMPLEX         reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    RATIONAL        reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    FLOAT           reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    INTEGER         reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    $end            reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    END             reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    RETURN          reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    ELSE            reduce using rule 101 (control -> UNLESS comparations COLON statements END .)
    ELSIF           reduce using rule 101 (control -> UNLESS comparations COLON statements END .)


state 241

    (104) control -> UNLESS comparations statements elses END .

    ID              reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    DEF             reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    IF              reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    UNLESS          reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    CASE            reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    WHILE           reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    COMPLEX         reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    RATIONAL        reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    FLOAT           reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    INTEGER         reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    $end            reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    END             reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    RETURN          reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    ELSE            reduce using rule 104 (control -> UNLESS comparations statements elses END .)
    ELSIF           reduce using rule 104 (control -> UNLESS comparations statements elses END .)


state 242

    (111) control -> CASE ID whens else END .

    ID              reduce using rule 111 (control -> CASE ID whens else END .)
    DEF             reduce using rule 111 (control -> CASE ID whens else END .)
    IF              reduce using rule 111 (control -> CASE ID whens else END .)
    UNLESS          reduce using rule 111 (control -> CASE ID whens else END .)
    CASE            reduce using rule 111 (control -> CASE ID whens else END .)
    WHILE           reduce using rule 111 (control -> CASE ID whens else END .)
    COMPLEX         reduce using rule 111 (control -> CASE ID whens else END .)
    RATIONAL        reduce using rule 111 (control -> CASE ID whens else END .)
    FLOAT           reduce using rule 111 (control -> CASE ID whens else END .)
    INTEGER         reduce using rule 111 (control -> CASE ID whens else END .)
    $end            reduce using rule 111 (control -> CASE ID whens else END .)
    END             reduce using rule 111 (control -> CASE ID whens else END .)
    RETURN          reduce using rule 111 (control -> CASE ID whens else END .)
    ELSE            reduce using rule 111 (control -> CASE ID whens else END .)
    ELSIF           reduce using rule 111 (control -> CASE ID whens else END .)


state 243

    (106) when -> WHEN literal THEN .

    WHEN            reduce using rule 106 (when -> WHEN literal THEN .)
    END             reduce using rule 106 (when -> WHEN literal THEN .)
    ELSE            reduce using rule 106 (when -> WHEN literal THEN .)


state 244

    (113) control -> WHILE boolean DO statements END .

    ID              reduce using rule 113 (control -> WHILE boolean DO statements END .)
    DEF             reduce using rule 113 (control -> WHILE boolean DO statements END .)
    IF              reduce using rule 113 (control -> WHILE boolean DO statements END .)
    UNLESS          reduce using rule 113 (control -> WHILE boolean DO statements END .)
    CASE            reduce using rule 113 (control -> WHILE boolean DO statements END .)
    WHILE           reduce using rule 113 (control -> WHILE boolean DO statements END .)
    COMPLEX         reduce using rule 113 (control -> WHILE boolean DO statements END .)
    RATIONAL        reduce using rule 113 (control -> WHILE boolean DO statements END .)
    FLOAT           reduce using rule 113 (control -> WHILE boolean DO statements END .)
    INTEGER         reduce using rule 113 (control -> WHILE boolean DO statements END .)
    $end            reduce using rule 113 (control -> WHILE boolean DO statements END .)
    END             reduce using rule 113 (control -> WHILE boolean DO statements END .)
    RETURN          reduce using rule 113 (control -> WHILE boolean DO statements END .)
    ELSE            reduce using rule 113 (control -> WHILE boolean DO statements END .)
    ELSIF           reduce using rule 113 (control -> WHILE boolean DO statements END .)


state 245

    (114) control -> WHILE comparation DO statements END .

    ID              reduce using rule 114 (control -> WHILE comparation DO statements END .)
    DEF             reduce using rule 114 (control -> WHILE comparation DO statements END .)
    IF              reduce using rule 114 (control -> WHILE comparation DO statements END .)
    UNLESS          reduce using rule 114 (control -> WHILE comparation DO statements END .)
    CASE            reduce using rule 114 (control -> WHILE comparation DO statements END .)
    WHILE           reduce using rule 114 (control -> WHILE comparation DO statements END .)
    COMPLEX         reduce using rule 114 (control -> WHILE comparation DO statements END .)
    RATIONAL        reduce using rule 114 (control -> WHILE comparation DO statements END .)
    FLOAT           reduce using rule 114 (control -> WHILE comparation DO statements END .)
    INTEGER         reduce using rule 114 (control -> WHILE comparation DO statements END .)
    $end            reduce using rule 114 (control -> WHILE comparation DO statements END .)
    END             reduce using rule 114 (control -> WHILE comparation DO statements END .)
    RETURN          reduce using rule 114 (control -> WHILE comparation DO statements END .)
    ELSE            reduce using rule 114 (control -> WHILE comparation DO statements END .)
    ELSIF           reduce using rule 114 (control -> WHILE comparation DO statements END .)


state 246

    (115) control -> WHILE comparations DO statements END .

    ID              reduce using rule 115 (control -> WHILE comparations DO statements END .)
    DEF             reduce using rule 115 (control -> WHILE comparations DO statements END .)
    IF              reduce using rule 115 (control -> WHILE comparations DO statements END .)
    UNLESS          reduce using rule 115 (control -> WHILE comparations DO statements END .)
    CASE            reduce using rule 115 (control -> WHILE comparations DO statements END .)
    WHILE           reduce using rule 115 (control -> WHILE comparations DO statements END .)
    COMPLEX         reduce using rule 115 (control -> WHILE comparations DO statements END .)
    RATIONAL        reduce using rule 115 (control -> WHILE comparations DO statements END .)
    FLOAT           reduce using rule 115 (control -> WHILE comparations DO statements END .)
    INTEGER         reduce using rule 115 (control -> WHILE comparations DO statements END .)
    $end            reduce using rule 115 (control -> WHILE comparations DO statements END .)
    END             reduce using rule 115 (control -> WHILE comparations DO statements END .)
    RETURN          reduce using rule 115 (control -> WHILE comparations DO statements END .)
    ELSE            reduce using rule 115 (control -> WHILE comparations DO statements END .)
    ELSIF           reduce using rule 115 (control -> WHILE comparations DO statements END .)


state 247

    (131) strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .

    ID              reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    DEF             reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    IF              reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    UNLESS          reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    CASE            reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    WHILE           reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    COMPLEX         reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    RATIONAL        reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    FLOAT           reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    INTEGER         reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    $end            reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    END             reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    RETURN          reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    ELSE            reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    ELSIF           reduce using rule 131 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)


state 248

    (127) arrays -> array COMMA . arrays
    (126) arrays -> . array
    (127) arrays -> . array COMMA arrays
    (123) array -> . L_BRACKET literals R_BRACKET
    (124) array -> . L_BRACKET ids R_BRACKET
    (125) array -> . L_BRACKET elements R_BRACKET

    L_BRACKET       shift and go to state 135

    array                          shift and go to state 205
    arrays                         shift and go to state 270

state 249

    (133) strucSet -> SET PERIOD NEW L_PAREN . R_PAREN
    (134) strucSet -> SET PERIOD NEW L_PAREN . array R_PAREN
    (123) array -> . L_BRACKET literals R_BRACKET
    (124) array -> . L_BRACKET ids R_BRACKET
    (125) array -> . L_BRACKET elements R_BRACKET

    R_PAREN         shift and go to state 271
    L_BRACKET       shift and go to state 135

    array                          shift and go to state 272

state 250

    (123) array -> L_BRACKET literals R_BRACKET .

    ID              reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    DEF             reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    IF              reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    UNLESS          reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    CASE            reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    WHILE           reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    COMPLEX         reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    RATIONAL        reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    FLOAT           reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    INTEGER         reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    $end            reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    END             reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    RETURN          reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    ELSE            reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    ELSIF           reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    COMMA           reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    R_BRACKET       reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)
    R_PAREN         reduce using rule 123 (array -> L_BRACKET literals R_BRACKET .)


state 251

    (124) array -> L_BRACKET ids R_BRACKET .

    ID              reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    DEF             reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    IF              reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    UNLESS          reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    CASE            reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    WHILE           reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    COMPLEX         reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    RATIONAL        reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    FLOAT           reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    INTEGER         reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    $end            reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    END             reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    RETURN          reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    ELSE            reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    ELSIF           reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    COMMA           reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    R_BRACKET       reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)
    R_PAREN         reduce using rule 124 (array -> L_BRACKET ids R_BRACKET .)


state 252

    (125) array -> L_BRACKET elements R_BRACKET .

    ID              reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    DEF             reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    IF              reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    UNLESS          reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    CASE            reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    WHILE           reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    COMPLEX         reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    RATIONAL        reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    FLOAT           reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    INTEGER         reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    $end            reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    END             reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    RETURN          reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    ELSE            reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    ELSIF           reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    COMMA           reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    R_BRACKET       reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)
    R_PAREN         reduce using rule 125 (array -> L_BRACKET elements R_BRACKET .)


state 253

    (9) ids -> ID COMMA . ids
    (8) ids -> . ID
    (9) ids -> . ID COMMA ids

    ID              shift and go to state 273

    ids                            shift and go to state 274

state 254

    (122) elements -> element COMMA . elements
    (121) elements -> . element
    (122) elements -> . element COMMA elements
    (116) element -> . ID
    (117) element -> . STRING
    (118) element -> . boolean
    (119) element -> . numeric
    (120) element -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 276
    STRING          shift and go to state 277
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    element                        shift and go to state 211
    elements                       shift and go to state 275
    boolean                        shift and go to state 278
    numeric                        shift and go to state 279
    range                          shift and go to state 280

state 255

    (137) strucHash -> HASH PERIOD NEW L_BRACE . R_BRACE
    (138) strucHash -> HASH PERIOD NEW L_BRACE . hashelems R_BRACE
    (143) hashelems -> . hashelem COMMA hashelem
    (144) hashelems -> . hashelem COMMA hashelems
    (140) hashelem -> . COLON ID RW_DOUBLE_ARROW literal
    (141) hashelem -> . ID COLON literal
    (142) hashelem -> . STRING COLON literal

    R_BRACE         shift and go to state 281
    COLON           shift and go to state 284
    ID              shift and go to state 285
    STRING          shift and go to state 286

    hashelems                      shift and go to state 282
    hashelem                       shift and go to state 283

state 256

    (76) function -> DEF ID L_PAREN literals R_PAREN statements . END
    (79) function -> DEF ID L_PAREN literals R_PAREN statements . RETURN ID END
    (82) function -> DEF ID L_PAREN literals R_PAREN statements . RETURN literal END

    END             shift and go to state 287
    RETURN          shift and go to state 288


state 257

    (77) function -> DEF ID L_PAREN R_PAREN statements END .

    ID              reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    DEF             reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    IF              reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    UNLESS          reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    CASE            reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    WHILE           reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    COMPLEX         reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    RATIONAL        reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    FLOAT           reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    INTEGER         reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    $end            reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    END             reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    RETURN          reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    ELSE            reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)
    ELSIF           reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements END .)


state 258

    (80) function -> DEF ID L_PAREN R_PAREN statements RETURN . ID END
    (83) function -> DEF ID L_PAREN R_PAREN statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 289
    STRING          shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 290
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 259

    (16) literals -> literal COMMA literals .

    R_PAREN         reduce using rule 16 (literals -> literal COMMA literals .)
    R_BRACKET       reduce using rule 16 (literals -> literal COMMA literals .)


state 260

    (81) function -> DEF ID statements RETURN ID END .

    ID              reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    DEF             reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    IF              reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    UNLESS          reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    CASE            reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    WHILE           reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    COMPLEX         reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    RATIONAL        reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    FLOAT           reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    INTEGER         reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    $end            reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    END             reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    RETURN          reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    ELSE            reduce using rule 81 (function -> DEF ID statements RETURN ID END .)
    ELSIF           reduce using rule 81 (function -> DEF ID statements RETURN ID END .)


state 261

    (84) function -> DEF ID statements RETURN literal END .

    ID              reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    DEF             reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    IF              reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    UNLESS          reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    CASE            reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    WHILE           reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    COMPLEX         reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    RATIONAL        reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    FLOAT           reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    INTEGER         reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    $end            reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    END             reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    RETURN          reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    ELSE            reduce using rule 84 (function -> DEF ID statements RETURN literal END .)
    ELSIF           reduce using rule 84 (function -> DEF ID statements RETURN literal END .)


state 262

    (85) else -> ELSE boolean statements .

    END             reduce using rule 85 (else -> ELSE boolean statements .)


state 263

    (86) else -> ELSE comparation statements .

    END             reduce using rule 86 (else -> ELSE comparation statements .)


state 264

    (87) else -> ELSE comparations statements .

    END             reduce using rule 87 (else -> ELSE comparations statements .)


state 265

    (88) elsif -> ELSIF boolean statements .

    ELSE            reduce using rule 88 (elsif -> ELSIF boolean statements .)
    ELSIF           reduce using rule 88 (elsif -> ELSIF boolean statements .)


state 266

    (89) elsif -> ELSIF comparation statements .

    ELSE            reduce using rule 89 (elsif -> ELSIF comparation statements .)
    ELSIF           reduce using rule 89 (elsif -> ELSIF comparation statements .)


state 267

    (90) elsif -> ELSIF comparations statements .

    ELSE            reduce using rule 90 (elsif -> ELSIF comparations statements .)
    ELSIF           reduce using rule 90 (elsif -> ELSIF comparations statements .)


state 268

    (145) range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .

    EQUAL           reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    NOT_EQ          reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LT_OR_EQ        reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    GT_OR_EQ        reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LESS_THAN       reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    GREATER_THAN    reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ID              reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    DEF             reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    IF              reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    UNLESS          reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    CASE            reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    WHILE           reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COMPLEX         reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    RATIONAL        reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    FLOAT           reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    INTEGER         reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    $end            reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    END             reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    RETURN          reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ELSE            reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ELSIF           reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COMMA           reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_PAREN         reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    AND             reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LOGIC_AND       reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    OR              reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LOGIC_OR        reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COLON           reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    DO              reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    WHEN            reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    THEN            reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_BRACKET       reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_BRACE         reduce using rule 145 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)


state 269

    (146) range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .

    EQUAL           reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    NOT_EQ          reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LT_OR_EQ        reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    GT_OR_EQ        reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LESS_THAN       reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    GREATER_THAN    reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ID              reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    DEF             reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    IF              reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    UNLESS          reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    CASE            reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    WHILE           reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COMPLEX         reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    RATIONAL        reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    FLOAT           reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    INTEGER         reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    $end            reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    END             reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    RETURN          reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ELSE            reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ELSIF           reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COMMA           reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_PAREN         reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    AND             reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LOGIC_AND       reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    OR              reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LOGIC_OR        reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COLON           reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    DO              reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    WHEN            reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    THEN            reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_BRACKET       reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_BRACE         reduce using rule 146 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)


state 270

    (127) arrays -> array COMMA arrays .

    R_BRACKET       reduce using rule 127 (arrays -> array COMMA arrays .)


state 271

    (133) strucSet -> SET PERIOD NEW L_PAREN R_PAREN .

    ID              reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    DEF             reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    IF              reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    UNLESS          reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    CASE            reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    WHILE           reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    COMPLEX         reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    RATIONAL        reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    FLOAT           reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    INTEGER         reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    $end            reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    END             reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    RETURN          reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    ELSE            reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    ELSIF           reduce using rule 133 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)


state 272

    (134) strucSet -> SET PERIOD NEW L_PAREN array . R_PAREN

    R_PAREN         shift and go to state 291


state 273

    (8) ids -> ID .
    (9) ids -> ID . COMMA ids

    R_BRACKET       reduce using rule 8 (ids -> ID .)
    COMMA           shift and go to state 253


state 274

    (9) ids -> ID COMMA ids .

    R_BRACKET       reduce using rule 9 (ids -> ID COMMA ids .)


state 275

    (122) elements -> element COMMA elements .

    R_BRACKET       reduce using rule 122 (elements -> element COMMA elements .)


state 276

    (116) element -> ID .

    COMMA           reduce using rule 116 (element -> ID .)
    R_BRACKET       reduce using rule 116 (element -> ID .)


state 277

    (117) element -> STRING .
    (151) range -> STRING . ELLIPSIS STRING
    (152) range -> STRING . DOUBLE_PERIOD STRING

    COMMA           reduce using rule 117 (element -> STRING .)
    R_BRACKET       reduce using rule 117 (element -> STRING .)
    ELLIPSIS        shift and go to state 101
    DOUBLE_PERIOD   shift and go to state 102


state 278

    (118) element -> boolean .

    COMMA           reduce using rule 118 (element -> boolean .)
    R_BRACKET       reduce using rule 118 (element -> boolean .)


state 279

    (119) element -> numeric .

    COMMA           reduce using rule 119 (element -> numeric .)
    R_BRACKET       reduce using rule 119 (element -> numeric .)


state 280

    (120) element -> range .

    COMMA           reduce using rule 120 (element -> range .)
    R_BRACKET       reduce using rule 120 (element -> range .)


state 281

    (137) strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .

    ID              reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    DEF             reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    IF              reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    UNLESS          reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    CASE            reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    WHILE           reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    COMPLEX         reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    RATIONAL        reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    FLOAT           reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    INTEGER         reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    $end            reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    END             reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    RETURN          reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    ELSE            reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    ELSIF           reduce using rule 137 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)


state 282

    (138) strucHash -> HASH PERIOD NEW L_BRACE hashelems . R_BRACE

    R_BRACE         shift and go to state 292


state 283

    (143) hashelems -> hashelem . COMMA hashelem
    (144) hashelems -> hashelem . COMMA hashelems

    COMMA           shift and go to state 293


state 284

    (140) hashelem -> COLON . ID RW_DOUBLE_ARROW literal

    ID              shift and go to state 294


state 285

    (141) hashelem -> ID . COLON literal

    COLON           shift and go to state 295


state 286

    (142) hashelem -> STRING . COLON literal

    COLON           shift and go to state 296


state 287

    (76) function -> DEF ID L_PAREN literals R_PAREN statements END .

    ID              reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    DEF             reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    IF              reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    UNLESS          reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    CASE            reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    WHILE           reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    COMPLEX         reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    RATIONAL        reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    FLOAT           reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    INTEGER         reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    $end            reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    END             reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    RETURN          reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    ELSE            reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    ELSIF           reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements END .)


state 288

    (79) function -> DEF ID L_PAREN literals R_PAREN statements RETURN . ID END
    (82) function -> DEF ID L_PAREN literals R_PAREN statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 297
    STRING          shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 298
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 289

    (80) function -> DEF ID L_PAREN R_PAREN statements RETURN ID . END
    (11) literal -> ID .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 299

  ! END             [ reduce using rule 11 (literal -> ID .) ]


state 290

    (83) function -> DEF ID L_PAREN R_PAREN statements RETURN literal . END

    END             shift and go to state 300


state 291

    (134) strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .

    ID              reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    DEF             reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    IF              reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    UNLESS          reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    CASE            reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    WHILE           reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    COMPLEX         reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    RATIONAL        reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    FLOAT           reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    INTEGER         reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    $end            reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    END             reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    RETURN          reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    ELSE            reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    ELSIF           reduce using rule 134 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)


state 292

    (138) strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .

    ID              reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    DEF             reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    IF              reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    UNLESS          reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    CASE            reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    WHILE           reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    COMPLEX         reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    RATIONAL        reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    FLOAT           reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    INTEGER         reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    $end            reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    END             reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    RETURN          reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    ELSE            reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    ELSIF           reduce using rule 138 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)


state 293

    (143) hashelems -> hashelem COMMA . hashelem
    (144) hashelems -> hashelem COMMA . hashelems
    (140) hashelem -> . COLON ID RW_DOUBLE_ARROW literal
    (141) hashelem -> . ID COLON literal
    (142) hashelem -> . STRING COLON literal
    (143) hashelems -> . hashelem COMMA hashelem
    (144) hashelems -> . hashelem COMMA hashelems

    COLON           shift and go to state 284
    ID              shift and go to state 285
    STRING          shift and go to state 286

    hashelem                       shift and go to state 301
    hashelems                      shift and go to state 302

state 294

    (140) hashelem -> COLON ID . RW_DOUBLE_ARROW literal

    RW_DOUBLE_ARROW shift and go to state 303


state 295

    (141) hashelem -> ID COLON . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 304
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 296

    (142) hashelem -> STRING COLON . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 305
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 297

    (79) function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID . END
    (11) literal -> ID .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 306

  ! END             [ reduce using rule 11 (literal -> ID .) ]


state 298

    (82) function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal . END

    END             shift and go to state 307


state 299

    (80) function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .

    ID              reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    DEF             reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    IF              reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    UNLESS          reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    CASE            reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    WHILE           reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    COMPLEX         reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    RATIONAL        reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    FLOAT           reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    INTEGER         reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    $end            reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    END             reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    RETURN          reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    ELSE            reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    ELSIF           reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)


state 300

    (83) function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .

    ID              reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    DEF             reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    IF              reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    UNLESS          reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    CASE            reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    WHILE           reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    COMPLEX         reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    RATIONAL        reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    FLOAT           reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    INTEGER         reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    $end            reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    END             reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    RETURN          reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    ELSE            reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    ELSIF           reduce using rule 83 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)


state 301

    (143) hashelems -> hashelem COMMA hashelem .
    (143) hashelems -> hashelem . COMMA hashelem
    (144) hashelems -> hashelem . COMMA hashelems

    R_BRACE         reduce using rule 143 (hashelems -> hashelem COMMA hashelem .)
    COMMA           shift and go to state 293


state 302

    (144) hashelems -> hashelem COMMA hashelems .

    R_BRACE         reduce using rule 144 (hashelems -> hashelem COMMA hashelems .)


state 303

    (140) hashelem -> COLON ID RW_DOUBLE_ARROW . literal
    (10) literal -> . STRING
    (11) literal -> . ID
    (12) literal -> . boolean
    (13) literal -> . numeric
    (14) literal -> . range
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (19) numeric -> . COMPLEX
    (20) numeric -> . RATIONAL
    (21) numeric -> . FLOAT
    (22) numeric -> . INTEGER
    (145) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (146) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (147) range -> . INTEGER ELLIPSIS INTEGER
    (148) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (149) range -> . L_PAREN STRING ELLIPSIS STRING
    (150) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (151) range -> . STRING ELLIPSIS STRING
    (152) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 35
    ID              shift and go to state 138
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    COMPLEX         shift and go to state 16
    RATIONAL        shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 38
    L_PAREN         shift and go to state 39

    literal                        shift and go to state 308
    boolean                        shift and go to state 61
    numeric                        shift and go to state 36
    range                          shift and go to state 37

state 304

    (141) hashelem -> ID COLON literal .

    COMMA           reduce using rule 141 (hashelem -> ID COLON literal .)
    R_BRACE         reduce using rule 141 (hashelem -> ID COLON literal .)


state 305

    (142) hashelem -> STRING COLON literal .

    COMMA           reduce using rule 142 (hashelem -> STRING COLON literal .)
    R_BRACE         reduce using rule 142 (hashelem -> STRING COLON literal .)


state 306

    (79) function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .

    ID              reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    DEF             reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    IF              reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    UNLESS          reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    CASE            reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    WHILE           reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    COMPLEX         reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    RATIONAL        reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    FLOAT           reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    INTEGER         reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    $end            reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    END             reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    RETURN          reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    ELSE            reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    ELSIF           reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)


state 307

    (82) function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .

    ID              reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    DEF             reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    IF              reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    UNLESS          reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    CASE            reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    WHILE           reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    COMPLEX         reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    RATIONAL        reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    FLOAT           reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    INTEGER         reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    $end            reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    END             reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    RETURN          reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    ELSE            reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    ELSIF           reduce using rule 82 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)


state 308

    (140) hashelem -> COLON ID RW_DOUBLE_ARROW literal .

    COMMA           reduce using rule 140 (hashelem -> COLON ID RW_DOUBLE_ARROW literal .)
    R_BRACE         reduce using rule 140 (hashelem -> COLON ID RW_DOUBLE_ARROW literal .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 34 resolved as shift
WARNING: shift/reduce conflict for LT_OR_EQ in state 34 resolved as shift
WARNING: shift/reduce conflict for GT_OR_EQ in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 199 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 199 resolved as shift
WARNING: shift/reduce conflict for LT_OR_EQ in state 199 resolved as shift
WARNING: shift/reduce conflict for GT_OR_EQ in state 199 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 199 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 199 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 210 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 210 resolved as shift
WARNING: shift/reduce conflict for END in state 220 resolved as shift
WARNING: shift/reduce conflict for END in state 289 resolved as shift
WARNING: shift/reduce conflict for END in state 297 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (literal -> ID)
WARNING: rejected rule (assignment -> ID ASSIGN ID) in state 53
WARNING: reduce/reduce conflict in state 210 resolved using rule (ids -> ID)
WARNING: rejected rule (literal -> ID) in state 210
WARNING: reduce/reduce conflict in state 210 resolved using rule (ids -> ID)
WARNING: rejected rule (element -> ID) in state 210
WARNING: reduce/reduce conflict in state 212 resolved using rule (literal -> STRING)
WARNING: rejected rule (element -> STRING) in state 212
WARNING: reduce/reduce conflict in state 213 resolved using rule (literal -> boolean)
WARNING: rejected rule (element -> boolean) in state 213
WARNING: reduce/reduce conflict in state 214 resolved using rule (literal -> numeric)
WARNING: rejected rule (element -> numeric) in state 214
WARNING: reduce/reduce conflict in state 215 resolved using rule (literal -> range)
WARNING: rejected rule (element -> range) in state 215
WARNING: Rule (assignment -> ID ASSIGN ID) is never reduced
