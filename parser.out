Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARRAY
    AT_SIGN
    BEGIN
    BLOCK_COMMENT
    BREAK
    CLASS
    DOLLAR_SIGN
    ENSURE
    FOR
    IN
    LINE_COMMENT
    LOGIC_NOT
    NEXT
    NOT
    RETRY
    RW_ARROW
    SELF
    SEMICOLON
    SUPER
    TILDE
    UNDERSCORE
    UNTIL
    VERTICAL_BAR

Grammar

Rule 0     S' -> init
Rule 1     init -> statements
Rule 2     statement -> assignment
Rule 3     statement -> function
Rule 4     statement -> control
Rule 5     statement -> arithmetic
Rule 6     statements -> statement
Rule 7     statements -> statement statements
Rule 8     ids -> ID
Rule 9     ids -> ID COMMA ids
Rule 10    literal -> STRING
Rule 11    literal -> boolean
Rule 12    literal -> numeric
Rule 13    literal -> range
Rule 14    literals -> literal
Rule 15    literals -> literal COMMA literals
Rule 16    boolean -> TRUE
Rule 17    boolean -> FALSE
Rule 18    numeric -> COMPLEX
Rule 19    numeric -> RATIONAL
Rule 20    numeric -> FLOAT
Rule 21    numeric -> INTEGER
Rule 22    arithmetic -> numeric PLUS numeric
Rule 23    arithmetic -> numeric PLUS arithmetic
Rule 24    arithmetic -> numeric MINUS numeric
Rule 25    arithmetic -> numeric MINUS arithmetic
Rule 26    arithmetic -> numeric EXPO numeric
Rule 27    arithmetic -> numeric EXPO arithmetic
Rule 28    arithmetic -> numeric MULT numeric
Rule 29    arithmetic -> numeric MULT arithmetic
Rule 30    arithmetic -> numeric DIV numeric
Rule 31    arithmetic -> numeric DIV arithmetic
Rule 32    arithmetic -> numeric MODULO numeric
Rule 33    arithmetic -> numeric MODULO arithmetic
Rule 34    comparation -> literal EQUAL literal
Rule 35    comparation -> ID EQUAL ID
Rule 36    comparation -> literal NOT_EQ literal
Rule 37    comparation -> ID NOT_EQ ID
Rule 38    comparation -> literal LT_OR_EQ literal
Rule 39    comparation -> ID LT_OR_EQ ID
Rule 40    comparation -> literal GT_OR_EQ literal
Rule 41    comparation -> ID GT_OR_EQ ID
Rule 42    comparation -> literal LESS_THAN literal
Rule 43    comparation -> ID LESS_THAN ID
Rule 44    comparation -> literal GREATER_THAN literal
Rule 45    comparation -> ID GREATER_THAN ID
Rule 46    comparations -> comparation AND comparation
Rule 47    comparations -> comparation LOGIC_AND comparation
Rule 48    comparations -> comparation AND comparations
Rule 49    comparations -> comparation LOGIC_AND comparations
Rule 50    comparations -> comparation OR comparation
Rule 51    comparations -> comparation LOGIC_OR comparation
Rule 52    comparations -> comparation OR comparations
Rule 53    comparations -> comparation LOGIC_OR comparations
Rule 54    comparations -> boolean AND boolean
Rule 55    comparations -> boolean LOGIC_AND boolean
Rule 56    comparations -> boolean OR boolean
Rule 57    comparations -> boolean LOGIC_OR boolean
Rule 58    assignment -> ID ASSIGN ID
Rule 59    assignment -> ID ASSIGN NIL
Rule 60    assignment -> ID ASSIGN struc
Rule 61    assignment -> ID ASSIGN literal
Rule 62    assignment -> ID ASSIGN arithmetic
Rule 63    assignment -> ID ADD_ASSIGN ID
Rule 64    assignment -> ID ADD_ASSIGN numeric
Rule 65    assignment -> ID SUBS_ASSIGN ID
Rule 66    assignment -> ID SUBS_ASSIGN numeric
Rule 67    assignment -> ID MULT_ASSIGN ID
Rule 68    assignment -> ID MULT_ASSIGN numeric
Rule 69    assignment -> ID DIV_ASSIGN ID
Rule 70    assignment -> ID DIV_ASSIGN numeric
Rule 71    assignment -> ID MOD_ASSIGN ID
Rule 72    assignment -> ID MOD_ASSIGN numeric
Rule 73    function -> DEF ID L_PAREN literals R_PAREN statements END
Rule 74    function -> DEF ID L_PAREN R_PAREN statements END
Rule 75    function -> DEF ID statements END
Rule 76    function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END
Rule 77    function -> DEF ID L_PAREN R_PAREN statements RETURN ID END
Rule 78    function -> DEF ID statements RETURN ID END
Rule 79    function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END
Rule 80    function -> DEF ID L_PAREN R_PAREN statements RETURN literal END
Rule 81    function -> DEF ID statements RETURN literal END
Rule 82    else -> ELSE boolean statements
Rule 83    else -> ELSE comparation statements
Rule 84    else -> ELSE comparations statements
Rule 85    elsif -> ELSIF boolean statements
Rule 86    elsif -> ELSIF comparation statements
Rule 87    elsif -> ELSIF comparations statements
Rule 88    elses -> else
Rule 89    elses -> elsif elses
Rule 90    control -> IF boolean statements END
Rule 91    control -> IF comparation statements END
Rule 92    control -> IF comparations statements END
Rule 93    control -> IF boolean statements elses END
Rule 94    control -> IF comparation statements elses END
Rule 95    control -> IF comparations statements elses END
Rule 96    control -> UNLESS boolean COLON statements END
Rule 97    control -> UNLESS comparation COLON statements END
Rule 98    control -> UNLESS comparations COLON statements END
Rule 99    control -> UNLESS boolean statements elses END
Rule 100   control -> UNLESS comparation statements elses END
Rule 101   control -> UNLESS comparations statements elses END
Rule 102   when -> WHEN literal
Rule 103   when -> WHEN literal THEN
Rule 104   when -> WHEN comparation
Rule 105   when -> WHEN comparations
Rule 106   whens -> when
Rule 107   whens -> when whens
Rule 108   control -> CASE ID whens else END
Rule 109   control -> CASE ID whens END
Rule 110   control -> WHILE boolean DO statements END
Rule 111   control -> WHILE comparation DO statements END
Rule 112   control -> WHILE comparations DO statements END
Rule 113   element -> ID
Rule 114   element -> STRING
Rule 115   element -> boolean
Rule 116   element -> numeric
Rule 117   element -> range
Rule 118   elements -> element
Rule 119   elements -> element COMMA elements
Rule 120   array -> L_BRACKET literals R_BRACKET
Rule 121   array -> L_BRACKET ids R_BRACKET
Rule 122   array -> L_BRACKET elements R_BRACKET
Rule 123   arrays -> array
Rule 124   arrays -> array COMMA arrays
Rule 125   struc -> strucMatrix
Rule 126   struc -> strucSet
Rule 127   struc -> strucHash
Rule 128   strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET
Rule 129   strucSet -> SET PERIOD NEW
Rule 130   strucSet -> SET PERIOD NEW L_PAREN R_PAREN
Rule 131   strucSet -> SET PERIOD NEW L_PAREN array R_PAREN
Rule 132   strucSet -> SET array
Rule 133   strucHash -> HASH PERIOD NEW
Rule 134   strucHash -> HASH PERIOD NEW L_BRACE R_BRACE
Rule 135   strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE
Rule 136   strucHash -> HASH array
Rule 137   hashelem -> COLON ID RW_DOUBLE_ARROW literal
Rule 138   hashelem -> ID COLON literal
Rule 139   hashelem -> STRING COLON literal
Rule 140   hashelems -> hashelem COMMA hashelem
Rule 141   hashelems -> hashelem COMMA hashelems
Rule 142   range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
Rule 143   range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
Rule 144   range -> INTEGER ELLIPSIS INTEGER
Rule 145   range -> INTEGER DOUBLE_PERIOD INTEGER
Rule 146   range -> L_PAREN STRING ELLIPSIS STRING
Rule 147   range -> L_PAREN STRING DOUBLE_PERIOD STRING
Rule 148   range -> STRING ELLIPSIS STRING
Rule 149   range -> STRING DOUBLE_PERIOD STRING

Terminals, with rules where they appear

ADD_ASSIGN           : 63 64
AMPERSAND            : 
AND                  : 46 48 54
ARRAY                : 
ASSIGN               : 58 59 60 61 62
AT_SIGN              : 
BEGIN                : 
BLOCK_COMMENT        : 
BREAK                : 
CASE                 : 108 109
CLASS                : 
COLON                : 96 97 98 137 138 139
COMMA                : 9 15 119 124 140 141
COMPLEX              : 18
DEF                  : 73 74 75 76 77 78 79 80 81
DIV                  : 30 31
DIV_ASSIGN           : 69 70
DO                   : 110 111 112
DOLLAR_SIGN          : 
DOUBLE_PERIOD        : 143 145 147 149
ELLIPSIS             : 142 144 146 148
ELSE                 : 82 83 84
ELSIF                : 85 86 87
END                  : 73 74 75 76 77 78 79 80 81 90 91 92 93 94 95 96 97 98 99 100 101 108 109 110 111 112
ENSURE               : 
EQUAL                : 34 35
EXPO                 : 26 27
FALSE                : 17
FLOAT                : 20
FOR                  : 
GREATER_THAN         : 44 45
GT_OR_EQ             : 40 41
HASH                 : 133 134 135 136
ID                   : 8 9 35 35 37 37 39 39 41 41 43 43 45 45 58 58 59 60 61 62 63 63 64 65 65 66 67 67 68 69 69 70 71 71 72 73 74 75 76 76 77 77 78 78 79 80 81 108 109 113 137 138
IF                   : 90 91 92 93 94 95
IN                   : 
INTEGER              : 21 142 142 143 143 144 144 145 145
LESS_THAN            : 42 43
LINE_COMMENT         : 
LOGIC_AND            : 47 49 55
LOGIC_NOT            : 
LOGIC_OR             : 51 53 57
LT_OR_EQ             : 38 39
L_BRACE              : 134 135
L_BRACKET            : 120 121 122 128
L_PAREN              : 73 74 76 77 79 80 130 131 142 143 146 147
MATRIX               : 128
MINUS                : 24 25
MODULO               : 32 33
MOD_ASSIGN           : 71 72
MULT                 : 28 29
MULT_ASSIGN          : 67 68
NEW                  : 129 130 131 133 134 135
NEXT                 : 
NIL                  : 59
NOT                  : 
NOT_EQ               : 36 37
OR                   : 50 52 56
PERIOD               : 129 130 131 133 134 135
PLUS                 : 22 23
RATIONAL             : 19
RETRY                : 
RETURN               : 76 77 78 79 80 81
RW_ARROW             : 
RW_DOUBLE_ARROW      : 137
R_BRACE              : 134 135
R_BRACKET            : 120 121 122 128
R_PAREN              : 73 74 76 77 79 80 130 131 142 143
SELF                 : 
SEMICOLON            : 
SET                  : 129 130 131 132
STRING               : 10 114 139 146 146 147 147 148 148 149 149
SUBS_ASSIGN          : 65 66
SUPER                : 
THEN                 : 103
TILDE                : 
TRUE                 : 16
UNDERSCORE           : 
UNLESS               : 96 97 98 99 100 101
UNTIL                : 
VERTICAL_BAR         : 
WHEN                 : 102 103 104 105
WHILE                : 110 111 112
error                : 

Nonterminals, with rules where they appear

arithmetic           : 5 23 25 27 29 31 33 62
array                : 123 124 131 132 136
arrays               : 124 128
assignment           : 2
boolean              : 11 54 54 55 55 56 56 57 57 82 85 90 93 96 99 110 115
comparation          : 46 46 47 47 48 49 50 50 51 51 52 53 83 86 91 94 97 100 104 111
comparations         : 48 49 52 53 84 87 92 95 98 101 105 112
control              : 4
element              : 118 119
elements             : 119 122
else                 : 88 108
elses                : 89 93 94 95 99 100 101
elsif                : 89
function             : 3
hashelem             : 140 140 141
hashelems            : 135 141
ids                  : 9 121
init                 : 0
literal              : 14 15 34 34 36 36 38 38 40 40 42 42 44 44 61 79 80 81 102 103 137 138 139
literals             : 15 73 76 79 120
numeric              : 12 22 22 23 24 24 25 26 26 27 28 28 29 30 30 31 32 32 33 64 66 68 70 72 116
range                : 13 117
statement            : 6 7
statements           : 1 7 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 90 91 92 93 94 95 96 97 98 99 100 101 110 111 112
struc                : 60
strucHash            : 127
strucMatrix          : 125
strucSet             : 126
when                 : 106 107
whens                : 107 108 109

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    init                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 1

    (0) S' -> init .



state 2

    (1) init -> statements .

    $end            reduce using rule 1 (init -> statements .)


state 3

    (6) statements -> statement .
    (7) statements -> statement . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    $end            reduce using rule 6 (statements -> statement .)
    END             reduce using rule 6 (statements -> statement .)
    RETURN          reduce using rule 6 (statements -> statement .)
    ELSE            reduce using rule 6 (statements -> statement .)
    ELSIF           reduce using rule 6 (statements -> statement .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statement                      shift and go to state 3
    statements                     shift and go to state 19
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 4

    (2) statement -> assignment .

    ID              reduce using rule 2 (statement -> assignment .)
    DEF             reduce using rule 2 (statement -> assignment .)
    IF              reduce using rule 2 (statement -> assignment .)
    UNLESS          reduce using rule 2 (statement -> assignment .)
    CASE            reduce using rule 2 (statement -> assignment .)
    WHILE           reduce using rule 2 (statement -> assignment .)
    COMPLEX         reduce using rule 2 (statement -> assignment .)
    RATIONAL        reduce using rule 2 (statement -> assignment .)
    FLOAT           reduce using rule 2 (statement -> assignment .)
    INTEGER         reduce using rule 2 (statement -> assignment .)
    $end            reduce using rule 2 (statement -> assignment .)
    END             reduce using rule 2 (statement -> assignment .)
    RETURN          reduce using rule 2 (statement -> assignment .)
    ELSE            reduce using rule 2 (statement -> assignment .)
    ELSIF           reduce using rule 2 (statement -> assignment .)


state 5

    (3) statement -> function .

    ID              reduce using rule 3 (statement -> function .)
    DEF             reduce using rule 3 (statement -> function .)
    IF              reduce using rule 3 (statement -> function .)
    UNLESS          reduce using rule 3 (statement -> function .)
    CASE            reduce using rule 3 (statement -> function .)
    WHILE           reduce using rule 3 (statement -> function .)
    COMPLEX         reduce using rule 3 (statement -> function .)
    RATIONAL        reduce using rule 3 (statement -> function .)
    FLOAT           reduce using rule 3 (statement -> function .)
    INTEGER         reduce using rule 3 (statement -> function .)
    $end            reduce using rule 3 (statement -> function .)
    END             reduce using rule 3 (statement -> function .)
    RETURN          reduce using rule 3 (statement -> function .)
    ELSE            reduce using rule 3 (statement -> function .)
    ELSIF           reduce using rule 3 (statement -> function .)


state 6

    (4) statement -> control .

    ID              reduce using rule 4 (statement -> control .)
    DEF             reduce using rule 4 (statement -> control .)
    IF              reduce using rule 4 (statement -> control .)
    UNLESS          reduce using rule 4 (statement -> control .)
    CASE            reduce using rule 4 (statement -> control .)
    WHILE           reduce using rule 4 (statement -> control .)
    COMPLEX         reduce using rule 4 (statement -> control .)
    RATIONAL        reduce using rule 4 (statement -> control .)
    FLOAT           reduce using rule 4 (statement -> control .)
    INTEGER         reduce using rule 4 (statement -> control .)
    $end            reduce using rule 4 (statement -> control .)
    END             reduce using rule 4 (statement -> control .)
    RETURN          reduce using rule 4 (statement -> control .)
    ELSE            reduce using rule 4 (statement -> control .)
    ELSIF           reduce using rule 4 (statement -> control .)


state 7

    (5) statement -> arithmetic .

    ID              reduce using rule 5 (statement -> arithmetic .)
    DEF             reduce using rule 5 (statement -> arithmetic .)
    IF              reduce using rule 5 (statement -> arithmetic .)
    UNLESS          reduce using rule 5 (statement -> arithmetic .)
    CASE            reduce using rule 5 (statement -> arithmetic .)
    WHILE           reduce using rule 5 (statement -> arithmetic .)
    COMPLEX         reduce using rule 5 (statement -> arithmetic .)
    RATIONAL        reduce using rule 5 (statement -> arithmetic .)
    FLOAT           reduce using rule 5 (statement -> arithmetic .)
    INTEGER         reduce using rule 5 (statement -> arithmetic .)
    $end            reduce using rule 5 (statement -> arithmetic .)
    END             reduce using rule 5 (statement -> arithmetic .)
    RETURN          reduce using rule 5 (statement -> arithmetic .)
    ELSE            reduce using rule 5 (statement -> arithmetic .)
    ELSIF           reduce using rule 5 (statement -> arithmetic .)


state 8

    (58) assignment -> ID . ASSIGN ID
    (59) assignment -> ID . ASSIGN NIL
    (60) assignment -> ID . ASSIGN struc
    (61) assignment -> ID . ASSIGN literal
    (62) assignment -> ID . ASSIGN arithmetic
    (63) assignment -> ID . ADD_ASSIGN ID
    (64) assignment -> ID . ADD_ASSIGN numeric
    (65) assignment -> ID . SUBS_ASSIGN ID
    (66) assignment -> ID . SUBS_ASSIGN numeric
    (67) assignment -> ID . MULT_ASSIGN ID
    (68) assignment -> ID . MULT_ASSIGN numeric
    (69) assignment -> ID . DIV_ASSIGN ID
    (70) assignment -> ID . DIV_ASSIGN numeric
    (71) assignment -> ID . MOD_ASSIGN ID
    (72) assignment -> ID . MOD_ASSIGN numeric

    ASSIGN          shift and go to state 20
    ADD_ASSIGN      shift and go to state 21
    SUBS_ASSIGN     shift and go to state 22
    MULT_ASSIGN     shift and go to state 23
    DIV_ASSIGN      shift and go to state 24
    MOD_ASSIGN      shift and go to state 25


state 9

    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 10

    (73) function -> DEF . ID L_PAREN literals R_PAREN statements END
    (74) function -> DEF . ID L_PAREN R_PAREN statements END
    (75) function -> DEF . ID statements END
    (76) function -> DEF . ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> DEF . ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> DEF . ID statements RETURN ID END
    (79) function -> DEF . ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> DEF . ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> DEF . ID statements RETURN literal END

    ID              shift and go to state 32


state 11

    (90) control -> IF . boolean statements END
    (91) control -> IF . comparation statements END
    (92) control -> IF . comparations statements END
    (93) control -> IF . boolean statements elses END
    (94) control -> IF . comparation statements elses END
    (95) control -> IF . comparations statements elses END
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    ID              shift and go to state 39
    STRING          shift and go to state 40
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    boolean                        shift and go to state 33
    comparation                    shift and go to state 34
    comparations                   shift and go to state 35
    literal                        shift and go to state 38
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 12

    (96) control -> UNLESS . boolean COLON statements END
    (97) control -> UNLESS . comparation COLON statements END
    (98) control -> UNLESS . comparations COLON statements END
    (99) control -> UNLESS . boolean statements elses END
    (100) control -> UNLESS . comparation statements elses END
    (101) control -> UNLESS . comparations statements elses END
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    ID              shift and go to state 39
    STRING          shift and go to state 40
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    boolean                        shift and go to state 45
    comparation                    shift and go to state 46
    comparations                   shift and go to state 47
    literal                        shift and go to state 38
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 13

    (108) control -> CASE . ID whens else END
    (109) control -> CASE . ID whens END

    ID              shift and go to state 48


state 14

    (110) control -> WHILE . boolean DO statements END
    (111) control -> WHILE . comparation DO statements END
    (112) control -> WHILE . comparations DO statements END
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    ID              shift and go to state 39
    STRING          shift and go to state 40
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    boolean                        shift and go to state 49
    comparation                    shift and go to state 50
    comparations                   shift and go to state 51
    literal                        shift and go to state 38
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 15

    (18) numeric -> COMPLEX .

    PLUS            reduce using rule 18 (numeric -> COMPLEX .)
    MINUS           reduce using rule 18 (numeric -> COMPLEX .)
    EXPO            reduce using rule 18 (numeric -> COMPLEX .)
    MULT            reduce using rule 18 (numeric -> COMPLEX .)
    DIV             reduce using rule 18 (numeric -> COMPLEX .)
    MODULO          reduce using rule 18 (numeric -> COMPLEX .)
    EQUAL           reduce using rule 18 (numeric -> COMPLEX .)
    NOT_EQ          reduce using rule 18 (numeric -> COMPLEX .)
    LT_OR_EQ        reduce using rule 18 (numeric -> COMPLEX .)
    GT_OR_EQ        reduce using rule 18 (numeric -> COMPLEX .)
    LESS_THAN       reduce using rule 18 (numeric -> COMPLEX .)
    GREATER_THAN    reduce using rule 18 (numeric -> COMPLEX .)
    ID              reduce using rule 18 (numeric -> COMPLEX .)
    DEF             reduce using rule 18 (numeric -> COMPLEX .)
    IF              reduce using rule 18 (numeric -> COMPLEX .)
    UNLESS          reduce using rule 18 (numeric -> COMPLEX .)
    CASE            reduce using rule 18 (numeric -> COMPLEX .)
    WHILE           reduce using rule 18 (numeric -> COMPLEX .)
    COMPLEX         reduce using rule 18 (numeric -> COMPLEX .)
    RATIONAL        reduce using rule 18 (numeric -> COMPLEX .)
    FLOAT           reduce using rule 18 (numeric -> COMPLEX .)
    INTEGER         reduce using rule 18 (numeric -> COMPLEX .)
    $end            reduce using rule 18 (numeric -> COMPLEX .)
    END             reduce using rule 18 (numeric -> COMPLEX .)
    RETURN          reduce using rule 18 (numeric -> COMPLEX .)
    ELSE            reduce using rule 18 (numeric -> COMPLEX .)
    ELSIF           reduce using rule 18 (numeric -> COMPLEX .)
    COMMA           reduce using rule 18 (numeric -> COMPLEX .)
    R_PAREN         reduce using rule 18 (numeric -> COMPLEX .)
    AND             reduce using rule 18 (numeric -> COMPLEX .)
    LOGIC_AND       reduce using rule 18 (numeric -> COMPLEX .)
    OR              reduce using rule 18 (numeric -> COMPLEX .)
    LOGIC_OR        reduce using rule 18 (numeric -> COMPLEX .)
    COLON           reduce using rule 18 (numeric -> COMPLEX .)
    DO              reduce using rule 18 (numeric -> COMPLEX .)
    WHEN            reduce using rule 18 (numeric -> COMPLEX .)
    THEN            reduce using rule 18 (numeric -> COMPLEX .)
    R_BRACKET       reduce using rule 18 (numeric -> COMPLEX .)
    R_BRACE         reduce using rule 18 (numeric -> COMPLEX .)


state 16

    (19) numeric -> RATIONAL .

    PLUS            reduce using rule 19 (numeric -> RATIONAL .)
    MINUS           reduce using rule 19 (numeric -> RATIONAL .)
    EXPO            reduce using rule 19 (numeric -> RATIONAL .)
    MULT            reduce using rule 19 (numeric -> RATIONAL .)
    DIV             reduce using rule 19 (numeric -> RATIONAL .)
    MODULO          reduce using rule 19 (numeric -> RATIONAL .)
    EQUAL           reduce using rule 19 (numeric -> RATIONAL .)
    NOT_EQ          reduce using rule 19 (numeric -> RATIONAL .)
    LT_OR_EQ        reduce using rule 19 (numeric -> RATIONAL .)
    GT_OR_EQ        reduce using rule 19 (numeric -> RATIONAL .)
    LESS_THAN       reduce using rule 19 (numeric -> RATIONAL .)
    GREATER_THAN    reduce using rule 19 (numeric -> RATIONAL .)
    ID              reduce using rule 19 (numeric -> RATIONAL .)
    DEF             reduce using rule 19 (numeric -> RATIONAL .)
    IF              reduce using rule 19 (numeric -> RATIONAL .)
    UNLESS          reduce using rule 19 (numeric -> RATIONAL .)
    CASE            reduce using rule 19 (numeric -> RATIONAL .)
    WHILE           reduce using rule 19 (numeric -> RATIONAL .)
    COMPLEX         reduce using rule 19 (numeric -> RATIONAL .)
    RATIONAL        reduce using rule 19 (numeric -> RATIONAL .)
    FLOAT           reduce using rule 19 (numeric -> RATIONAL .)
    INTEGER         reduce using rule 19 (numeric -> RATIONAL .)
    $end            reduce using rule 19 (numeric -> RATIONAL .)
    END             reduce using rule 19 (numeric -> RATIONAL .)
    RETURN          reduce using rule 19 (numeric -> RATIONAL .)
    ELSE            reduce using rule 19 (numeric -> RATIONAL .)
    ELSIF           reduce using rule 19 (numeric -> RATIONAL .)
    COMMA           reduce using rule 19 (numeric -> RATIONAL .)
    R_PAREN         reduce using rule 19 (numeric -> RATIONAL .)
    AND             reduce using rule 19 (numeric -> RATIONAL .)
    LOGIC_AND       reduce using rule 19 (numeric -> RATIONAL .)
    OR              reduce using rule 19 (numeric -> RATIONAL .)
    LOGIC_OR        reduce using rule 19 (numeric -> RATIONAL .)
    COLON           reduce using rule 19 (numeric -> RATIONAL .)
    DO              reduce using rule 19 (numeric -> RATIONAL .)
    WHEN            reduce using rule 19 (numeric -> RATIONAL .)
    THEN            reduce using rule 19 (numeric -> RATIONAL .)
    R_BRACKET       reduce using rule 19 (numeric -> RATIONAL .)
    R_BRACE         reduce using rule 19 (numeric -> RATIONAL .)


state 17

    (20) numeric -> FLOAT .

    PLUS            reduce using rule 20 (numeric -> FLOAT .)
    MINUS           reduce using rule 20 (numeric -> FLOAT .)
    EXPO            reduce using rule 20 (numeric -> FLOAT .)
    MULT            reduce using rule 20 (numeric -> FLOAT .)
    DIV             reduce using rule 20 (numeric -> FLOAT .)
    MODULO          reduce using rule 20 (numeric -> FLOAT .)
    EQUAL           reduce using rule 20 (numeric -> FLOAT .)
    NOT_EQ          reduce using rule 20 (numeric -> FLOAT .)
    LT_OR_EQ        reduce using rule 20 (numeric -> FLOAT .)
    GT_OR_EQ        reduce using rule 20 (numeric -> FLOAT .)
    LESS_THAN       reduce using rule 20 (numeric -> FLOAT .)
    GREATER_THAN    reduce using rule 20 (numeric -> FLOAT .)
    ID              reduce using rule 20 (numeric -> FLOAT .)
    DEF             reduce using rule 20 (numeric -> FLOAT .)
    IF              reduce using rule 20 (numeric -> FLOAT .)
    UNLESS          reduce using rule 20 (numeric -> FLOAT .)
    CASE            reduce using rule 20 (numeric -> FLOAT .)
    WHILE           reduce using rule 20 (numeric -> FLOAT .)
    COMPLEX         reduce using rule 20 (numeric -> FLOAT .)
    RATIONAL        reduce using rule 20 (numeric -> FLOAT .)
    FLOAT           reduce using rule 20 (numeric -> FLOAT .)
    INTEGER         reduce using rule 20 (numeric -> FLOAT .)
    $end            reduce using rule 20 (numeric -> FLOAT .)
    END             reduce using rule 20 (numeric -> FLOAT .)
    RETURN          reduce using rule 20 (numeric -> FLOAT .)
    ELSE            reduce using rule 20 (numeric -> FLOAT .)
    ELSIF           reduce using rule 20 (numeric -> FLOAT .)
    COMMA           reduce using rule 20 (numeric -> FLOAT .)
    R_PAREN         reduce using rule 20 (numeric -> FLOAT .)
    AND             reduce using rule 20 (numeric -> FLOAT .)
    LOGIC_AND       reduce using rule 20 (numeric -> FLOAT .)
    OR              reduce using rule 20 (numeric -> FLOAT .)
    LOGIC_OR        reduce using rule 20 (numeric -> FLOAT .)
    COLON           reduce using rule 20 (numeric -> FLOAT .)
    DO              reduce using rule 20 (numeric -> FLOAT .)
    WHEN            reduce using rule 20 (numeric -> FLOAT .)
    THEN            reduce using rule 20 (numeric -> FLOAT .)
    R_BRACKET       reduce using rule 20 (numeric -> FLOAT .)
    R_BRACE         reduce using rule 20 (numeric -> FLOAT .)


state 18

    (21) numeric -> INTEGER .

    PLUS            reduce using rule 21 (numeric -> INTEGER .)
    MINUS           reduce using rule 21 (numeric -> INTEGER .)
    EXPO            reduce using rule 21 (numeric -> INTEGER .)
    MULT            reduce using rule 21 (numeric -> INTEGER .)
    DIV             reduce using rule 21 (numeric -> INTEGER .)
    MODULO          reduce using rule 21 (numeric -> INTEGER .)
    ID              reduce using rule 21 (numeric -> INTEGER .)
    DEF             reduce using rule 21 (numeric -> INTEGER .)
    IF              reduce using rule 21 (numeric -> INTEGER .)
    UNLESS          reduce using rule 21 (numeric -> INTEGER .)
    CASE            reduce using rule 21 (numeric -> INTEGER .)
    WHILE           reduce using rule 21 (numeric -> INTEGER .)
    COMPLEX         reduce using rule 21 (numeric -> INTEGER .)
    RATIONAL        reduce using rule 21 (numeric -> INTEGER .)
    FLOAT           reduce using rule 21 (numeric -> INTEGER .)
    INTEGER         reduce using rule 21 (numeric -> INTEGER .)
    $end            reduce using rule 21 (numeric -> INTEGER .)
    END             reduce using rule 21 (numeric -> INTEGER .)
    RETURN          reduce using rule 21 (numeric -> INTEGER .)
    ELSE            reduce using rule 21 (numeric -> INTEGER .)
    ELSIF           reduce using rule 21 (numeric -> INTEGER .)


state 19

    (7) statements -> statement statements .

    $end            reduce using rule 7 (statements -> statement statements .)
    END             reduce using rule 7 (statements -> statement statements .)
    RETURN          reduce using rule 7 (statements -> statement statements .)
    ELSE            reduce using rule 7 (statements -> statement statements .)
    ELSIF           reduce using rule 7 (statements -> statement statements .)


state 20

    (58) assignment -> ID ASSIGN . ID
    (59) assignment -> ID ASSIGN . NIL
    (60) assignment -> ID ASSIGN . struc
    (61) assignment -> ID ASSIGN . literal
    (62) assignment -> ID ASSIGN . arithmetic
    (125) struc -> . strucMatrix
    (126) struc -> . strucSet
    (127) struc -> . strucHash
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (128) strucMatrix -> . MATRIX L_BRACKET arrays R_BRACKET
    (129) strucSet -> . SET PERIOD NEW
    (130) strucSet -> . SET PERIOD NEW L_PAREN R_PAREN
    (131) strucSet -> . SET PERIOD NEW L_PAREN array R_PAREN
    (132) strucSet -> . SET array
    (133) strucHash -> . HASH PERIOD NEW
    (134) strucHash -> . HASH PERIOD NEW L_BRACE R_BRACE
    (135) strucHash -> . HASH PERIOD NEW L_BRACE hashelems R_BRACE
    (136) strucHash -> . HASH array
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 40
    MATRIX          shift and go to state 62
    SET             shift and go to state 63
    HASH            shift and go to state 64
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    struc                          shift and go to state 54
    literal                        shift and go to state 55
    arithmetic                     shift and go to state 56
    strucMatrix                    shift and go to state 57
    strucSet                       shift and go to state 58
    strucHash                      shift and go to state 59
    boolean                        shift and go to state 60
    numeric                        shift and go to state 61
    range                          shift and go to state 42

state 21

    (63) assignment -> ID ADD_ASSIGN . ID
    (64) assignment -> ID ADD_ASSIGN . numeric
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 65
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 66

state 22

    (65) assignment -> ID SUBS_ASSIGN . ID
    (66) assignment -> ID SUBS_ASSIGN . numeric
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 67
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 68

state 23

    (67) assignment -> ID MULT_ASSIGN . ID
    (68) assignment -> ID MULT_ASSIGN . numeric
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 69
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 70

state 24

    (69) assignment -> ID DIV_ASSIGN . ID
    (70) assignment -> ID DIV_ASSIGN . numeric
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 71
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 72

state 25

    (71) assignment -> ID MOD_ASSIGN . ID
    (72) assignment -> ID MOD_ASSIGN . numeric
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 73
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 74

state 26

    (22) arithmetic -> numeric PLUS . numeric
    (23) arithmetic -> numeric PLUS . arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic

    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 75
    arithmetic                     shift and go to state 76

state 27

    (24) arithmetic -> numeric MINUS . numeric
    (25) arithmetic -> numeric MINUS . arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic

    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 77
    arithmetic                     shift and go to state 78

state 28

    (26) arithmetic -> numeric EXPO . numeric
    (27) arithmetic -> numeric EXPO . arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic

    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 79
    arithmetic                     shift and go to state 80

state 29

    (28) arithmetic -> numeric MULT . numeric
    (29) arithmetic -> numeric MULT . arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic

    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 81
    arithmetic                     shift and go to state 82

state 30

    (30) arithmetic -> numeric DIV . numeric
    (31) arithmetic -> numeric DIV . arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic

    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 83
    arithmetic                     shift and go to state 84

state 31

    (32) arithmetic -> numeric MODULO . numeric
    (33) arithmetic -> numeric MODULO . arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic

    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    numeric                        shift and go to state 85
    arithmetic                     shift and go to state 86

state 32

    (73) function -> DEF ID . L_PAREN literals R_PAREN statements END
    (74) function -> DEF ID . L_PAREN R_PAREN statements END
    (75) function -> DEF ID . statements END
    (76) function -> DEF ID . L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> DEF ID . L_PAREN R_PAREN statements RETURN ID END
    (78) function -> DEF ID . statements RETURN ID END
    (79) function -> DEF ID . L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> DEF ID . L_PAREN R_PAREN statements RETURN literal END
    (81) function -> DEF ID . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    L_PAREN         shift and go to state 87
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 88
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 33

    (90) control -> IF boolean . statements END
    (93) control -> IF boolean . statements elses END
    (54) comparations -> boolean . AND boolean
    (55) comparations -> boolean . LOGIC_AND boolean
    (56) comparations -> boolean . OR boolean
    (57) comparations -> boolean . LOGIC_OR boolean
    (11) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    AND             shift and go to state 90
    LOGIC_AND       shift and go to state 91
    OR              shift and go to state 92
    LOGIC_OR        shift and go to state 93
    EQUAL           reduce using rule 11 (literal -> boolean .)
    NOT_EQ          reduce using rule 11 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    LESS_THAN       reduce using rule 11 (literal -> boolean .)
    GREATER_THAN    reduce using rule 11 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 89
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 34

    (91) control -> IF comparation . statements END
    (94) control -> IF comparation . statements elses END
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 94
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 35

    (92) control -> IF comparations . statements END
    (95) control -> IF comparations . statements elses END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 99
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 36

    (16) boolean -> TRUE .

    AND             reduce using rule 16 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 16 (boolean -> TRUE .)
    OR              reduce using rule 16 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 16 (boolean -> TRUE .)
    ID              reduce using rule 16 (boolean -> TRUE .)
    DEF             reduce using rule 16 (boolean -> TRUE .)
    IF              reduce using rule 16 (boolean -> TRUE .)
    UNLESS          reduce using rule 16 (boolean -> TRUE .)
    CASE            reduce using rule 16 (boolean -> TRUE .)
    WHILE           reduce using rule 16 (boolean -> TRUE .)
    COMPLEX         reduce using rule 16 (boolean -> TRUE .)
    RATIONAL        reduce using rule 16 (boolean -> TRUE .)
    FLOAT           reduce using rule 16 (boolean -> TRUE .)
    INTEGER         reduce using rule 16 (boolean -> TRUE .)
    EQUAL           reduce using rule 16 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 16 (boolean -> TRUE .)
    LT_OR_EQ        reduce using rule 16 (boolean -> TRUE .)
    GT_OR_EQ        reduce using rule 16 (boolean -> TRUE .)
    LESS_THAN       reduce using rule 16 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 16 (boolean -> TRUE .)
    COLON           reduce using rule 16 (boolean -> TRUE .)
    DO              reduce using rule 16 (boolean -> TRUE .)
    $end            reduce using rule 16 (boolean -> TRUE .)
    END             reduce using rule 16 (boolean -> TRUE .)
    RETURN          reduce using rule 16 (boolean -> TRUE .)
    ELSE            reduce using rule 16 (boolean -> TRUE .)
    ELSIF           reduce using rule 16 (boolean -> TRUE .)
    COMMA           reduce using rule 16 (boolean -> TRUE .)
    R_PAREN         reduce using rule 16 (boolean -> TRUE .)
    WHEN            reduce using rule 16 (boolean -> TRUE .)
    THEN            reduce using rule 16 (boolean -> TRUE .)
    R_BRACKET       reduce using rule 16 (boolean -> TRUE .)
    R_BRACE         reduce using rule 16 (boolean -> TRUE .)


state 37

    (17) boolean -> FALSE .

    AND             reduce using rule 17 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 17 (boolean -> FALSE .)
    OR              reduce using rule 17 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 17 (boolean -> FALSE .)
    ID              reduce using rule 17 (boolean -> FALSE .)
    DEF             reduce using rule 17 (boolean -> FALSE .)
    IF              reduce using rule 17 (boolean -> FALSE .)
    UNLESS          reduce using rule 17 (boolean -> FALSE .)
    CASE            reduce using rule 17 (boolean -> FALSE .)
    WHILE           reduce using rule 17 (boolean -> FALSE .)
    COMPLEX         reduce using rule 17 (boolean -> FALSE .)
    RATIONAL        reduce using rule 17 (boolean -> FALSE .)
    FLOAT           reduce using rule 17 (boolean -> FALSE .)
    INTEGER         reduce using rule 17 (boolean -> FALSE .)
    EQUAL           reduce using rule 17 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 17 (boolean -> FALSE .)
    LT_OR_EQ        reduce using rule 17 (boolean -> FALSE .)
    GT_OR_EQ        reduce using rule 17 (boolean -> FALSE .)
    LESS_THAN       reduce using rule 17 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 17 (boolean -> FALSE .)
    COLON           reduce using rule 17 (boolean -> FALSE .)
    DO              reduce using rule 17 (boolean -> FALSE .)
    $end            reduce using rule 17 (boolean -> FALSE .)
    END             reduce using rule 17 (boolean -> FALSE .)
    RETURN          reduce using rule 17 (boolean -> FALSE .)
    ELSE            reduce using rule 17 (boolean -> FALSE .)
    ELSIF           reduce using rule 17 (boolean -> FALSE .)
    COMMA           reduce using rule 17 (boolean -> FALSE .)
    R_PAREN         reduce using rule 17 (boolean -> FALSE .)
    WHEN            reduce using rule 17 (boolean -> FALSE .)
    THEN            reduce using rule 17 (boolean -> FALSE .)
    R_BRACKET       reduce using rule 17 (boolean -> FALSE .)
    R_BRACE         reduce using rule 17 (boolean -> FALSE .)


state 38

    (34) comparation -> literal . EQUAL literal
    (36) comparation -> literal . NOT_EQ literal
    (38) comparation -> literal . LT_OR_EQ literal
    (40) comparation -> literal . GT_OR_EQ literal
    (42) comparation -> literal . LESS_THAN literal
    (44) comparation -> literal . GREATER_THAN literal

    EQUAL           shift and go to state 100
    NOT_EQ          shift and go to state 101
    LT_OR_EQ        shift and go to state 102
    GT_OR_EQ        shift and go to state 103
    LESS_THAN       shift and go to state 104
    GREATER_THAN    shift and go to state 105


state 39

    (35) comparation -> ID . EQUAL ID
    (37) comparation -> ID . NOT_EQ ID
    (39) comparation -> ID . LT_OR_EQ ID
    (41) comparation -> ID . GT_OR_EQ ID
    (43) comparation -> ID . LESS_THAN ID
    (45) comparation -> ID . GREATER_THAN ID

    EQUAL           shift and go to state 106
    NOT_EQ          shift and go to state 107
    LT_OR_EQ        shift and go to state 108
    GT_OR_EQ        shift and go to state 109
    LESS_THAN       shift and go to state 110
    GREATER_THAN    shift and go to state 111


state 40

    (10) literal -> STRING .
    (148) range -> STRING . ELLIPSIS STRING
    (149) range -> STRING . DOUBLE_PERIOD STRING

    EQUAL           reduce using rule 10 (literal -> STRING .)
    NOT_EQ          reduce using rule 10 (literal -> STRING .)
    LT_OR_EQ        reduce using rule 10 (literal -> STRING .)
    GT_OR_EQ        reduce using rule 10 (literal -> STRING .)
    LESS_THAN       reduce using rule 10 (literal -> STRING .)
    GREATER_THAN    reduce using rule 10 (literal -> STRING .)
    ID              reduce using rule 10 (literal -> STRING .)
    DEF             reduce using rule 10 (literal -> STRING .)
    IF              reduce using rule 10 (literal -> STRING .)
    UNLESS          reduce using rule 10 (literal -> STRING .)
    CASE            reduce using rule 10 (literal -> STRING .)
    WHILE           reduce using rule 10 (literal -> STRING .)
    COMPLEX         reduce using rule 10 (literal -> STRING .)
    RATIONAL        reduce using rule 10 (literal -> STRING .)
    FLOAT           reduce using rule 10 (literal -> STRING .)
    INTEGER         reduce using rule 10 (literal -> STRING .)
    $end            reduce using rule 10 (literal -> STRING .)
    END             reduce using rule 10 (literal -> STRING .)
    RETURN          reduce using rule 10 (literal -> STRING .)
    ELSE            reduce using rule 10 (literal -> STRING .)
    ELSIF           reduce using rule 10 (literal -> STRING .)
    COMMA           reduce using rule 10 (literal -> STRING .)
    R_PAREN         reduce using rule 10 (literal -> STRING .)
    AND             reduce using rule 10 (literal -> STRING .)
    LOGIC_AND       reduce using rule 10 (literal -> STRING .)
    OR              reduce using rule 10 (literal -> STRING .)
    LOGIC_OR        reduce using rule 10 (literal -> STRING .)
    COLON           reduce using rule 10 (literal -> STRING .)
    DO              reduce using rule 10 (literal -> STRING .)
    WHEN            reduce using rule 10 (literal -> STRING .)
    THEN            reduce using rule 10 (literal -> STRING .)
    R_BRACKET       reduce using rule 10 (literal -> STRING .)
    R_BRACE         reduce using rule 10 (literal -> STRING .)
    ELLIPSIS        shift and go to state 112
    DOUBLE_PERIOD   shift and go to state 113


state 41

    (12) literal -> numeric .

    EQUAL           reduce using rule 12 (literal -> numeric .)
    NOT_EQ          reduce using rule 12 (literal -> numeric .)
    LT_OR_EQ        reduce using rule 12 (literal -> numeric .)
    GT_OR_EQ        reduce using rule 12 (literal -> numeric .)
    LESS_THAN       reduce using rule 12 (literal -> numeric .)
    GREATER_THAN    reduce using rule 12 (literal -> numeric .)
    COMMA           reduce using rule 12 (literal -> numeric .)
    R_PAREN         reduce using rule 12 (literal -> numeric .)
    AND             reduce using rule 12 (literal -> numeric .)
    LOGIC_AND       reduce using rule 12 (literal -> numeric .)
    OR              reduce using rule 12 (literal -> numeric .)
    LOGIC_OR        reduce using rule 12 (literal -> numeric .)
    ID              reduce using rule 12 (literal -> numeric .)
    DEF             reduce using rule 12 (literal -> numeric .)
    IF              reduce using rule 12 (literal -> numeric .)
    UNLESS          reduce using rule 12 (literal -> numeric .)
    CASE            reduce using rule 12 (literal -> numeric .)
    WHILE           reduce using rule 12 (literal -> numeric .)
    COMPLEX         reduce using rule 12 (literal -> numeric .)
    RATIONAL        reduce using rule 12 (literal -> numeric .)
    FLOAT           reduce using rule 12 (literal -> numeric .)
    INTEGER         reduce using rule 12 (literal -> numeric .)
    COLON           reduce using rule 12 (literal -> numeric .)
    DO              reduce using rule 12 (literal -> numeric .)
    WHEN            reduce using rule 12 (literal -> numeric .)
    END             reduce using rule 12 (literal -> numeric .)
    ELSE            reduce using rule 12 (literal -> numeric .)
    THEN            reduce using rule 12 (literal -> numeric .)
    R_BRACKET       reduce using rule 12 (literal -> numeric .)
    R_BRACE         reduce using rule 12 (literal -> numeric .)


state 42

    (13) literal -> range .

    EQUAL           reduce using rule 13 (literal -> range .)
    NOT_EQ          reduce using rule 13 (literal -> range .)
    LT_OR_EQ        reduce using rule 13 (literal -> range .)
    GT_OR_EQ        reduce using rule 13 (literal -> range .)
    LESS_THAN       reduce using rule 13 (literal -> range .)
    GREATER_THAN    reduce using rule 13 (literal -> range .)
    ID              reduce using rule 13 (literal -> range .)
    DEF             reduce using rule 13 (literal -> range .)
    IF              reduce using rule 13 (literal -> range .)
    UNLESS          reduce using rule 13 (literal -> range .)
    CASE            reduce using rule 13 (literal -> range .)
    WHILE           reduce using rule 13 (literal -> range .)
    COMPLEX         reduce using rule 13 (literal -> range .)
    RATIONAL        reduce using rule 13 (literal -> range .)
    FLOAT           reduce using rule 13 (literal -> range .)
    INTEGER         reduce using rule 13 (literal -> range .)
    $end            reduce using rule 13 (literal -> range .)
    END             reduce using rule 13 (literal -> range .)
    RETURN          reduce using rule 13 (literal -> range .)
    ELSE            reduce using rule 13 (literal -> range .)
    ELSIF           reduce using rule 13 (literal -> range .)
    COMMA           reduce using rule 13 (literal -> range .)
    R_PAREN         reduce using rule 13 (literal -> range .)
    AND             reduce using rule 13 (literal -> range .)
    LOGIC_AND       reduce using rule 13 (literal -> range .)
    OR              reduce using rule 13 (literal -> range .)
    LOGIC_OR        reduce using rule 13 (literal -> range .)
    COLON           reduce using rule 13 (literal -> range .)
    DO              reduce using rule 13 (literal -> range .)
    WHEN            reduce using rule 13 (literal -> range .)
    THEN            reduce using rule 13 (literal -> range .)
    R_BRACKET       reduce using rule 13 (literal -> range .)
    R_BRACE         reduce using rule 13 (literal -> range .)


state 43

    (21) numeric -> INTEGER .
    (144) range -> INTEGER . ELLIPSIS INTEGER
    (145) range -> INTEGER . DOUBLE_PERIOD INTEGER

    EQUAL           reduce using rule 21 (numeric -> INTEGER .)
    NOT_EQ          reduce using rule 21 (numeric -> INTEGER .)
    LT_OR_EQ        reduce using rule 21 (numeric -> INTEGER .)
    GT_OR_EQ        reduce using rule 21 (numeric -> INTEGER .)
    LESS_THAN       reduce using rule 21 (numeric -> INTEGER .)
    GREATER_THAN    reduce using rule 21 (numeric -> INTEGER .)
    PLUS            reduce using rule 21 (numeric -> INTEGER .)
    MINUS           reduce using rule 21 (numeric -> INTEGER .)
    EXPO            reduce using rule 21 (numeric -> INTEGER .)
    MULT            reduce using rule 21 (numeric -> INTEGER .)
    DIV             reduce using rule 21 (numeric -> INTEGER .)
    MODULO          reduce using rule 21 (numeric -> INTEGER .)
    ID              reduce using rule 21 (numeric -> INTEGER .)
    DEF             reduce using rule 21 (numeric -> INTEGER .)
    IF              reduce using rule 21 (numeric -> INTEGER .)
    UNLESS          reduce using rule 21 (numeric -> INTEGER .)
    CASE            reduce using rule 21 (numeric -> INTEGER .)
    WHILE           reduce using rule 21 (numeric -> INTEGER .)
    COMPLEX         reduce using rule 21 (numeric -> INTEGER .)
    RATIONAL        reduce using rule 21 (numeric -> INTEGER .)
    FLOAT           reduce using rule 21 (numeric -> INTEGER .)
    INTEGER         reduce using rule 21 (numeric -> INTEGER .)
    $end            reduce using rule 21 (numeric -> INTEGER .)
    END             reduce using rule 21 (numeric -> INTEGER .)
    RETURN          reduce using rule 21 (numeric -> INTEGER .)
    ELSE            reduce using rule 21 (numeric -> INTEGER .)
    ELSIF           reduce using rule 21 (numeric -> INTEGER .)
    COMMA           reduce using rule 21 (numeric -> INTEGER .)
    R_PAREN         reduce using rule 21 (numeric -> INTEGER .)
    AND             reduce using rule 21 (numeric -> INTEGER .)
    LOGIC_AND       reduce using rule 21 (numeric -> INTEGER .)
    OR              reduce using rule 21 (numeric -> INTEGER .)
    LOGIC_OR        reduce using rule 21 (numeric -> INTEGER .)
    COLON           reduce using rule 21 (numeric -> INTEGER .)
    DO              reduce using rule 21 (numeric -> INTEGER .)
    WHEN            reduce using rule 21 (numeric -> INTEGER .)
    THEN            reduce using rule 21 (numeric -> INTEGER .)
    R_BRACKET       reduce using rule 21 (numeric -> INTEGER .)
    R_BRACE         reduce using rule 21 (numeric -> INTEGER .)
    ELLIPSIS        shift and go to state 114
    DOUBLE_PERIOD   shift and go to state 115


state 44

    (142) range -> L_PAREN . INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> L_PAREN . INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (146) range -> L_PAREN . STRING ELLIPSIS STRING
    (147) range -> L_PAREN . STRING DOUBLE_PERIOD STRING

    INTEGER         shift and go to state 116
    STRING          shift and go to state 117


state 45

    (96) control -> UNLESS boolean . COLON statements END
    (99) control -> UNLESS boolean . statements elses END
    (54) comparations -> boolean . AND boolean
    (55) comparations -> boolean . LOGIC_AND boolean
    (56) comparations -> boolean . OR boolean
    (57) comparations -> boolean . LOGIC_OR boolean
    (11) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    COLON           shift and go to state 118
    AND             shift and go to state 90
    LOGIC_AND       shift and go to state 91
    OR              shift and go to state 92
    LOGIC_OR        shift and go to state 93
    EQUAL           reduce using rule 11 (literal -> boolean .)
    NOT_EQ          reduce using rule 11 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    LESS_THAN       reduce using rule 11 (literal -> boolean .)
    GREATER_THAN    reduce using rule 11 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 119
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 46

    (97) control -> UNLESS comparation . COLON statements END
    (100) control -> UNLESS comparation . statements elses END
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    COLON           shift and go to state 120
    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 121
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 47

    (98) control -> UNLESS comparations . COLON statements END
    (101) control -> UNLESS comparations . statements elses END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    COLON           shift and go to state 122
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 123
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 48

    (108) control -> CASE ID . whens else END
    (109) control -> CASE ID . whens END
    (106) whens -> . when
    (107) whens -> . when whens
    (102) when -> . WHEN literal
    (103) when -> . WHEN literal THEN
    (104) when -> . WHEN comparation
    (105) when -> . WHEN comparations

    WHEN            shift and go to state 126

    whens                          shift and go to state 124
    when                           shift and go to state 125

state 49

    (110) control -> WHILE boolean . DO statements END
    (54) comparations -> boolean . AND boolean
    (55) comparations -> boolean . LOGIC_AND boolean
    (56) comparations -> boolean . OR boolean
    (57) comparations -> boolean . LOGIC_OR boolean
    (11) literal -> boolean .

    DO              shift and go to state 127
    AND             shift and go to state 90
    LOGIC_AND       shift and go to state 91
    OR              shift and go to state 92
    LOGIC_OR        shift and go to state 93
    EQUAL           reduce using rule 11 (literal -> boolean .)
    NOT_EQ          reduce using rule 11 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    LESS_THAN       reduce using rule 11 (literal -> boolean .)
    GREATER_THAN    reduce using rule 11 (literal -> boolean .)


state 50

    (111) control -> WHILE comparation . DO statements END
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations

    DO              shift and go to state 128
    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98


state 51

    (112) control -> WHILE comparations . DO statements END

    DO              shift and go to state 129


state 52

    (58) assignment -> ID ASSIGN ID .

    ID              reduce using rule 58 (assignment -> ID ASSIGN ID .)
    DEF             reduce using rule 58 (assignment -> ID ASSIGN ID .)
    IF              reduce using rule 58 (assignment -> ID ASSIGN ID .)
    UNLESS          reduce using rule 58 (assignment -> ID ASSIGN ID .)
    CASE            reduce using rule 58 (assignment -> ID ASSIGN ID .)
    WHILE           reduce using rule 58 (assignment -> ID ASSIGN ID .)
    COMPLEX         reduce using rule 58 (assignment -> ID ASSIGN ID .)
    RATIONAL        reduce using rule 58 (assignment -> ID ASSIGN ID .)
    FLOAT           reduce using rule 58 (assignment -> ID ASSIGN ID .)
    INTEGER         reduce using rule 58 (assignment -> ID ASSIGN ID .)
    $end            reduce using rule 58 (assignment -> ID ASSIGN ID .)
    END             reduce using rule 58 (assignment -> ID ASSIGN ID .)
    RETURN          reduce using rule 58 (assignment -> ID ASSIGN ID .)
    ELSE            reduce using rule 58 (assignment -> ID ASSIGN ID .)
    ELSIF           reduce using rule 58 (assignment -> ID ASSIGN ID .)


state 53

    (59) assignment -> ID ASSIGN NIL .

    ID              reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    DEF             reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    IF              reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    UNLESS          reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    CASE            reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    WHILE           reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    COMPLEX         reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    RATIONAL        reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    FLOAT           reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    INTEGER         reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    $end            reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    END             reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    RETURN          reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    ELSE            reduce using rule 59 (assignment -> ID ASSIGN NIL .)
    ELSIF           reduce using rule 59 (assignment -> ID ASSIGN NIL .)


state 54

    (60) assignment -> ID ASSIGN struc .

    ID              reduce using rule 60 (assignment -> ID ASSIGN struc .)
    DEF             reduce using rule 60 (assignment -> ID ASSIGN struc .)
    IF              reduce using rule 60 (assignment -> ID ASSIGN struc .)
    UNLESS          reduce using rule 60 (assignment -> ID ASSIGN struc .)
    CASE            reduce using rule 60 (assignment -> ID ASSIGN struc .)
    WHILE           reduce using rule 60 (assignment -> ID ASSIGN struc .)
    COMPLEX         reduce using rule 60 (assignment -> ID ASSIGN struc .)
    RATIONAL        reduce using rule 60 (assignment -> ID ASSIGN struc .)
    FLOAT           reduce using rule 60 (assignment -> ID ASSIGN struc .)
    INTEGER         reduce using rule 60 (assignment -> ID ASSIGN struc .)
    $end            reduce using rule 60 (assignment -> ID ASSIGN struc .)
    END             reduce using rule 60 (assignment -> ID ASSIGN struc .)
    RETURN          reduce using rule 60 (assignment -> ID ASSIGN struc .)
    ELSE            reduce using rule 60 (assignment -> ID ASSIGN struc .)
    ELSIF           reduce using rule 60 (assignment -> ID ASSIGN struc .)


state 55

    (61) assignment -> ID ASSIGN literal .

    ID              reduce using rule 61 (assignment -> ID ASSIGN literal .)
    DEF             reduce using rule 61 (assignment -> ID ASSIGN literal .)
    IF              reduce using rule 61 (assignment -> ID ASSIGN literal .)
    UNLESS          reduce using rule 61 (assignment -> ID ASSIGN literal .)
    CASE            reduce using rule 61 (assignment -> ID ASSIGN literal .)
    WHILE           reduce using rule 61 (assignment -> ID ASSIGN literal .)
    COMPLEX         reduce using rule 61 (assignment -> ID ASSIGN literal .)
    RATIONAL        reduce using rule 61 (assignment -> ID ASSIGN literal .)
    FLOAT           reduce using rule 61 (assignment -> ID ASSIGN literal .)
    INTEGER         reduce using rule 61 (assignment -> ID ASSIGN literal .)
    $end            reduce using rule 61 (assignment -> ID ASSIGN literal .)
    END             reduce using rule 61 (assignment -> ID ASSIGN literal .)
    RETURN          reduce using rule 61 (assignment -> ID ASSIGN literal .)
    ELSE            reduce using rule 61 (assignment -> ID ASSIGN literal .)
    ELSIF           reduce using rule 61 (assignment -> ID ASSIGN literal .)


state 56

    (62) assignment -> ID ASSIGN arithmetic .

    ID              reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    DEF             reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    IF              reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    UNLESS          reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    CASE            reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    WHILE           reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    COMPLEX         reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    RATIONAL        reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    FLOAT           reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    INTEGER         reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    $end            reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    END             reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    RETURN          reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    ELSE            reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)
    ELSIF           reduce using rule 62 (assignment -> ID ASSIGN arithmetic .)


state 57

    (125) struc -> strucMatrix .

    ID              reduce using rule 125 (struc -> strucMatrix .)
    DEF             reduce using rule 125 (struc -> strucMatrix .)
    IF              reduce using rule 125 (struc -> strucMatrix .)
    UNLESS          reduce using rule 125 (struc -> strucMatrix .)
    CASE            reduce using rule 125 (struc -> strucMatrix .)
    WHILE           reduce using rule 125 (struc -> strucMatrix .)
    COMPLEX         reduce using rule 125 (struc -> strucMatrix .)
    RATIONAL        reduce using rule 125 (struc -> strucMatrix .)
    FLOAT           reduce using rule 125 (struc -> strucMatrix .)
    INTEGER         reduce using rule 125 (struc -> strucMatrix .)
    $end            reduce using rule 125 (struc -> strucMatrix .)
    END             reduce using rule 125 (struc -> strucMatrix .)
    RETURN          reduce using rule 125 (struc -> strucMatrix .)
    ELSE            reduce using rule 125 (struc -> strucMatrix .)
    ELSIF           reduce using rule 125 (struc -> strucMatrix .)


state 58

    (126) struc -> strucSet .

    ID              reduce using rule 126 (struc -> strucSet .)
    DEF             reduce using rule 126 (struc -> strucSet .)
    IF              reduce using rule 126 (struc -> strucSet .)
    UNLESS          reduce using rule 126 (struc -> strucSet .)
    CASE            reduce using rule 126 (struc -> strucSet .)
    WHILE           reduce using rule 126 (struc -> strucSet .)
    COMPLEX         reduce using rule 126 (struc -> strucSet .)
    RATIONAL        reduce using rule 126 (struc -> strucSet .)
    FLOAT           reduce using rule 126 (struc -> strucSet .)
    INTEGER         reduce using rule 126 (struc -> strucSet .)
    $end            reduce using rule 126 (struc -> strucSet .)
    END             reduce using rule 126 (struc -> strucSet .)
    RETURN          reduce using rule 126 (struc -> strucSet .)
    ELSE            reduce using rule 126 (struc -> strucSet .)
    ELSIF           reduce using rule 126 (struc -> strucSet .)


state 59

    (127) struc -> strucHash .

    ID              reduce using rule 127 (struc -> strucHash .)
    DEF             reduce using rule 127 (struc -> strucHash .)
    IF              reduce using rule 127 (struc -> strucHash .)
    UNLESS          reduce using rule 127 (struc -> strucHash .)
    CASE            reduce using rule 127 (struc -> strucHash .)
    WHILE           reduce using rule 127 (struc -> strucHash .)
    COMPLEX         reduce using rule 127 (struc -> strucHash .)
    RATIONAL        reduce using rule 127 (struc -> strucHash .)
    FLOAT           reduce using rule 127 (struc -> strucHash .)
    INTEGER         reduce using rule 127 (struc -> strucHash .)
    $end            reduce using rule 127 (struc -> strucHash .)
    END             reduce using rule 127 (struc -> strucHash .)
    RETURN          reduce using rule 127 (struc -> strucHash .)
    ELSE            reduce using rule 127 (struc -> strucHash .)
    ELSIF           reduce using rule 127 (struc -> strucHash .)


state 60

    (11) literal -> boolean .

    ID              reduce using rule 11 (literal -> boolean .)
    DEF             reduce using rule 11 (literal -> boolean .)
    IF              reduce using rule 11 (literal -> boolean .)
    UNLESS          reduce using rule 11 (literal -> boolean .)
    CASE            reduce using rule 11 (literal -> boolean .)
    WHILE           reduce using rule 11 (literal -> boolean .)
    COMPLEX         reduce using rule 11 (literal -> boolean .)
    RATIONAL        reduce using rule 11 (literal -> boolean .)
    FLOAT           reduce using rule 11 (literal -> boolean .)
    INTEGER         reduce using rule 11 (literal -> boolean .)
    $end            reduce using rule 11 (literal -> boolean .)
    END             reduce using rule 11 (literal -> boolean .)
    RETURN          reduce using rule 11 (literal -> boolean .)
    ELSE            reduce using rule 11 (literal -> boolean .)
    ELSIF           reduce using rule 11 (literal -> boolean .)
    COMMA           reduce using rule 11 (literal -> boolean .)
    R_PAREN         reduce using rule 11 (literal -> boolean .)
    AND             reduce using rule 11 (literal -> boolean .)
    LOGIC_AND       reduce using rule 11 (literal -> boolean .)
    OR              reduce using rule 11 (literal -> boolean .)
    LOGIC_OR        reduce using rule 11 (literal -> boolean .)
    COLON           reduce using rule 11 (literal -> boolean .)
    DO              reduce using rule 11 (literal -> boolean .)
    WHEN            reduce using rule 11 (literal -> boolean .)
    R_BRACKET       reduce using rule 11 (literal -> boolean .)
    R_BRACE         reduce using rule 11 (literal -> boolean .)


state 61

    (12) literal -> numeric .
    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    ID              reduce using rule 12 (literal -> numeric .)
    DEF             reduce using rule 12 (literal -> numeric .)
    IF              reduce using rule 12 (literal -> numeric .)
    UNLESS          reduce using rule 12 (literal -> numeric .)
    CASE            reduce using rule 12 (literal -> numeric .)
    WHILE           reduce using rule 12 (literal -> numeric .)
    COMPLEX         reduce using rule 12 (literal -> numeric .)
    RATIONAL        reduce using rule 12 (literal -> numeric .)
    FLOAT           reduce using rule 12 (literal -> numeric .)
    INTEGER         reduce using rule 12 (literal -> numeric .)
    $end            reduce using rule 12 (literal -> numeric .)
    END             reduce using rule 12 (literal -> numeric .)
    RETURN          reduce using rule 12 (literal -> numeric .)
    ELSE            reduce using rule 12 (literal -> numeric .)
    ELSIF           reduce using rule 12 (literal -> numeric .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 62

    (128) strucMatrix -> MATRIX . L_BRACKET arrays R_BRACKET

    L_BRACKET       shift and go to state 130


state 63

    (129) strucSet -> SET . PERIOD NEW
    (130) strucSet -> SET . PERIOD NEW L_PAREN R_PAREN
    (131) strucSet -> SET . PERIOD NEW L_PAREN array R_PAREN
    (132) strucSet -> SET . array
    (120) array -> . L_BRACKET literals R_BRACKET
    (121) array -> . L_BRACKET ids R_BRACKET
    (122) array -> . L_BRACKET elements R_BRACKET

    PERIOD          shift and go to state 131
    L_BRACKET       shift and go to state 133

    array                          shift and go to state 132

state 64

    (133) strucHash -> HASH . PERIOD NEW
    (134) strucHash -> HASH . PERIOD NEW L_BRACE R_BRACE
    (135) strucHash -> HASH . PERIOD NEW L_BRACE hashelems R_BRACE
    (136) strucHash -> HASH . array
    (120) array -> . L_BRACKET literals R_BRACKET
    (121) array -> . L_BRACKET ids R_BRACKET
    (122) array -> . L_BRACKET elements R_BRACKET

    PERIOD          shift and go to state 134
    L_BRACKET       shift and go to state 133

    array                          shift and go to state 135

state 65

    (63) assignment -> ID ADD_ASSIGN ID .

    ID              reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    DEF             reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    IF              reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    UNLESS          reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    CASE            reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    WHILE           reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    COMPLEX         reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    RATIONAL        reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    FLOAT           reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    INTEGER         reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    $end            reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    END             reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    RETURN          reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    ELSE            reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)
    ELSIF           reduce using rule 63 (assignment -> ID ADD_ASSIGN ID .)


state 66

    (64) assignment -> ID ADD_ASSIGN numeric .

    ID              reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    DEF             reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    IF              reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    UNLESS          reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    CASE            reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    WHILE           reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    COMPLEX         reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    RATIONAL        reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    FLOAT           reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    INTEGER         reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    $end            reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    END             reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    RETURN          reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    ELSE            reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)
    ELSIF           reduce using rule 64 (assignment -> ID ADD_ASSIGN numeric .)


state 67

    (65) assignment -> ID SUBS_ASSIGN ID .

    ID              reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    DEF             reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    IF              reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    UNLESS          reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    CASE            reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    WHILE           reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    COMPLEX         reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    RATIONAL        reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    FLOAT           reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    INTEGER         reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    $end            reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    END             reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    RETURN          reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    ELSE            reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)
    ELSIF           reduce using rule 65 (assignment -> ID SUBS_ASSIGN ID .)


state 68

    (66) assignment -> ID SUBS_ASSIGN numeric .

    ID              reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    DEF             reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    IF              reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    UNLESS          reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    CASE            reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    WHILE           reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    COMPLEX         reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    RATIONAL        reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    FLOAT           reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    INTEGER         reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    $end            reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    END             reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    RETURN          reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    ELSE            reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)
    ELSIF           reduce using rule 66 (assignment -> ID SUBS_ASSIGN numeric .)


state 69

    (67) assignment -> ID MULT_ASSIGN ID .

    ID              reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    DEF             reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    IF              reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    UNLESS          reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    CASE            reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    WHILE           reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    COMPLEX         reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    RATIONAL        reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    FLOAT           reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    INTEGER         reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    $end            reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    END             reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    RETURN          reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    ELSE            reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)
    ELSIF           reduce using rule 67 (assignment -> ID MULT_ASSIGN ID .)


state 70

    (68) assignment -> ID MULT_ASSIGN numeric .

    ID              reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    DEF             reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    IF              reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    UNLESS          reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    CASE            reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    WHILE           reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    COMPLEX         reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    RATIONAL        reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    FLOAT           reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    INTEGER         reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    $end            reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    END             reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    RETURN          reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    ELSE            reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)
    ELSIF           reduce using rule 68 (assignment -> ID MULT_ASSIGN numeric .)


state 71

    (69) assignment -> ID DIV_ASSIGN ID .

    ID              reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    DEF             reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    IF              reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    UNLESS          reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    CASE            reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    WHILE           reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    COMPLEX         reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    RATIONAL        reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    FLOAT           reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    INTEGER         reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    $end            reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    END             reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    RETURN          reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    ELSE            reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)
    ELSIF           reduce using rule 69 (assignment -> ID DIV_ASSIGN ID .)


state 72

    (70) assignment -> ID DIV_ASSIGN numeric .

    ID              reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    DEF             reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    IF              reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    UNLESS          reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    CASE            reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    WHILE           reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    COMPLEX         reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    RATIONAL        reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    FLOAT           reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    INTEGER         reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    $end            reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    END             reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    RETURN          reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    ELSE            reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)
    ELSIF           reduce using rule 70 (assignment -> ID DIV_ASSIGN numeric .)


state 73

    (71) assignment -> ID MOD_ASSIGN ID .

    ID              reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    DEF             reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    IF              reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    UNLESS          reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    CASE            reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    WHILE           reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    COMPLEX         reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    RATIONAL        reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    FLOAT           reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    INTEGER         reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    $end            reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    END             reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    RETURN          reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    ELSE            reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)
    ELSIF           reduce using rule 71 (assignment -> ID MOD_ASSIGN ID .)


state 74

    (72) assignment -> ID MOD_ASSIGN numeric .

    ID              reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    DEF             reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    IF              reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    UNLESS          reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    CASE            reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    WHILE           reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    COMPLEX         reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    RATIONAL        reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    FLOAT           reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    INTEGER         reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    $end            reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    END             reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    RETURN          reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    ELSE            reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)
    ELSIF           reduce using rule 72 (assignment -> ID MOD_ASSIGN numeric .)


state 75

    (22) arithmetic -> numeric PLUS numeric .
    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    ID              reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    DEF             reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    IF              reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    UNLESS          reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    CASE            reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    WHILE           reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    COMPLEX         reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    RATIONAL        reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    FLOAT           reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    INTEGER         reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    $end            reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    END             reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    RETURN          reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    ELSE            reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    ELSIF           reduce using rule 22 (arithmetic -> numeric PLUS numeric .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 76

    (23) arithmetic -> numeric PLUS arithmetic .

    ID              reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    DEF             reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    IF              reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    UNLESS          reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    CASE            reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    WHILE           reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    COMPLEX         reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    RATIONAL        reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    FLOAT           reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    INTEGER         reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    $end            reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    END             reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    RETURN          reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    ELSE            reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)
    ELSIF           reduce using rule 23 (arithmetic -> numeric PLUS arithmetic .)


state 77

    (24) arithmetic -> numeric MINUS numeric .
    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    ID              reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    DEF             reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    IF              reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    UNLESS          reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    CASE            reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    WHILE           reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    COMPLEX         reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    RATIONAL        reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    FLOAT           reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    INTEGER         reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    $end            reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    END             reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    RETURN          reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    ELSE            reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    ELSIF           reduce using rule 24 (arithmetic -> numeric MINUS numeric .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 78

    (25) arithmetic -> numeric MINUS arithmetic .

    ID              reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    DEF             reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    IF              reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    UNLESS          reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    CASE            reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    WHILE           reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    COMPLEX         reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    RATIONAL        reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    FLOAT           reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    INTEGER         reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    $end            reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    END             reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    RETURN          reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    ELSE            reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)
    ELSIF           reduce using rule 25 (arithmetic -> numeric MINUS arithmetic .)


state 79

    (26) arithmetic -> numeric EXPO numeric .
    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    ID              reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    DEF             reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    IF              reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    UNLESS          reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    CASE            reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    WHILE           reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    COMPLEX         reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    RATIONAL        reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    FLOAT           reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    INTEGER         reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    $end            reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    END             reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    RETURN          reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    ELSE            reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    ELSIF           reduce using rule 26 (arithmetic -> numeric EXPO numeric .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 80

    (27) arithmetic -> numeric EXPO arithmetic .

    ID              reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    DEF             reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    IF              reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    UNLESS          reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    CASE            reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    WHILE           reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    COMPLEX         reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    RATIONAL        reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    FLOAT           reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    INTEGER         reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    $end            reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    END             reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    RETURN          reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    ELSE            reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)
    ELSIF           reduce using rule 27 (arithmetic -> numeric EXPO arithmetic .)


state 81

    (28) arithmetic -> numeric MULT numeric .
    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    ID              reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    DEF             reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    IF              reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    UNLESS          reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    CASE            reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    WHILE           reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    COMPLEX         reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    RATIONAL        reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    FLOAT           reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    INTEGER         reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    $end            reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    END             reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    RETURN          reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    ELSE            reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    ELSIF           reduce using rule 28 (arithmetic -> numeric MULT numeric .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 82

    (29) arithmetic -> numeric MULT arithmetic .

    ID              reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    DEF             reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    IF              reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    UNLESS          reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    CASE            reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    WHILE           reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    COMPLEX         reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    RATIONAL        reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    FLOAT           reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    INTEGER         reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    $end            reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    END             reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    RETURN          reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    ELSE            reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)
    ELSIF           reduce using rule 29 (arithmetic -> numeric MULT arithmetic .)


state 83

    (30) arithmetic -> numeric DIV numeric .
    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    ID              reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    DEF             reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    IF              reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    UNLESS          reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    CASE            reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    WHILE           reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    COMPLEX         reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    RATIONAL        reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    FLOAT           reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    INTEGER         reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    $end            reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    END             reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    RETURN          reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    ELSE            reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    ELSIF           reduce using rule 30 (arithmetic -> numeric DIV numeric .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 84

    (31) arithmetic -> numeric DIV arithmetic .

    ID              reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    DEF             reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    IF              reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    UNLESS          reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    CASE            reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    WHILE           reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    COMPLEX         reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    RATIONAL        reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    FLOAT           reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    INTEGER         reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    $end            reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    END             reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    RETURN          reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    ELSE            reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)
    ELSIF           reduce using rule 31 (arithmetic -> numeric DIV arithmetic .)


state 85

    (32) arithmetic -> numeric MODULO numeric .
    (22) arithmetic -> numeric . PLUS numeric
    (23) arithmetic -> numeric . PLUS arithmetic
    (24) arithmetic -> numeric . MINUS numeric
    (25) arithmetic -> numeric . MINUS arithmetic
    (26) arithmetic -> numeric . EXPO numeric
    (27) arithmetic -> numeric . EXPO arithmetic
    (28) arithmetic -> numeric . MULT numeric
    (29) arithmetic -> numeric . MULT arithmetic
    (30) arithmetic -> numeric . DIV numeric
    (31) arithmetic -> numeric . DIV arithmetic
    (32) arithmetic -> numeric . MODULO numeric
    (33) arithmetic -> numeric . MODULO arithmetic

    ID              reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    DEF             reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    IF              reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    UNLESS          reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    CASE            reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    WHILE           reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    COMPLEX         reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    RATIONAL        reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    FLOAT           reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    INTEGER         reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    $end            reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    END             reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    RETURN          reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    ELSE            reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    ELSIF           reduce using rule 32 (arithmetic -> numeric MODULO numeric .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    EXPO            shift and go to state 28
    MULT            shift and go to state 29
    DIV             shift and go to state 30
    MODULO          shift and go to state 31


state 86

    (33) arithmetic -> numeric MODULO arithmetic .

    ID              reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    DEF             reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    IF              reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    UNLESS          reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    CASE            reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    WHILE           reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    COMPLEX         reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    RATIONAL        reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    FLOAT           reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    INTEGER         reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    $end            reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    END             reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    RETURN          reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    ELSE            reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)
    ELSIF           reduce using rule 33 (arithmetic -> numeric MODULO arithmetic .)


state 87

    (73) function -> DEF ID L_PAREN . literals R_PAREN statements END
    (74) function -> DEF ID L_PAREN . R_PAREN statements END
    (76) function -> DEF ID L_PAREN . literals R_PAREN statements RETURN ID END
    (77) function -> DEF ID L_PAREN . R_PAREN statements RETURN ID END
    (79) function -> DEF ID L_PAREN . literals R_PAREN statements RETURN literal END
    (80) function -> DEF ID L_PAREN . R_PAREN statements RETURN literal END
    (14) literals -> . literal
    (15) literals -> . literal COMMA literals
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    R_PAREN         shift and go to state 137
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literals                       shift and go to state 136
    literal                        shift and go to state 138
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 88

    (75) function -> DEF ID statements . END
    (78) function -> DEF ID statements . RETURN ID END
    (81) function -> DEF ID statements . RETURN literal END

    END             shift and go to state 139
    RETURN          shift and go to state 140


state 89

    (90) control -> IF boolean statements . END
    (93) control -> IF boolean statements . elses END
    (88) elses -> . else
    (89) elses -> . elsif elses
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements
    (85) elsif -> . ELSIF boolean statements
    (86) elsif -> . ELSIF comparation statements
    (87) elsif -> . ELSIF comparations statements

    END             shift and go to state 141
    ELSE            shift and go to state 145
    ELSIF           shift and go to state 146

    elses                          shift and go to state 142
    else                           shift and go to state 143
    elsif                          shift and go to state 144

state 90

    (54) comparations -> boolean AND . boolean
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    boolean                        shift and go to state 147

state 91

    (55) comparations -> boolean LOGIC_AND . boolean
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    boolean                        shift and go to state 148

state 92

    (56) comparations -> boolean OR . boolean
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    boolean                        shift and go to state 149

state 93

    (57) comparations -> boolean LOGIC_OR . boolean
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    boolean                        shift and go to state 150

state 94

    (91) control -> IF comparation statements . END
    (94) control -> IF comparation statements . elses END
    (88) elses -> . else
    (89) elses -> . elsif elses
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements
    (85) elsif -> . ELSIF boolean statements
    (86) elsif -> . ELSIF comparation statements
    (87) elsif -> . ELSIF comparations statements

    END             shift and go to state 151
    ELSE            shift and go to state 145
    ELSIF           shift and go to state 146

    elses                          shift and go to state 152
    else                           shift and go to state 143
    elsif                          shift and go to state 144

state 95

    (46) comparations -> comparation AND . comparation
    (48) comparations -> comparation AND . comparations
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 39
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    comparation                    shift and go to state 153
    comparations                   shift and go to state 154
    literal                        shift and go to state 38
    boolean                        shift and go to state 155
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 96

    (47) comparations -> comparation LOGIC_AND . comparation
    (49) comparations -> comparation LOGIC_AND . comparations
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 39
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    comparation                    shift and go to state 156
    comparations                   shift and go to state 157
    literal                        shift and go to state 38
    boolean                        shift and go to state 155
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 97

    (50) comparations -> comparation OR . comparation
    (52) comparations -> comparation OR . comparations
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 39
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    comparation                    shift and go to state 158
    comparations                   shift and go to state 159
    literal                        shift and go to state 38
    boolean                        shift and go to state 155
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 98

    (51) comparations -> comparation LOGIC_OR . comparation
    (53) comparations -> comparation LOGIC_OR . comparations
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 39
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    comparation                    shift and go to state 160
    comparations                   shift and go to state 161
    literal                        shift and go to state 38
    boolean                        shift and go to state 155
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 99

    (92) control -> IF comparations statements . END
    (95) control -> IF comparations statements . elses END
    (88) elses -> . else
    (89) elses -> . elsif elses
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements
    (85) elsif -> . ELSIF boolean statements
    (86) elsif -> . ELSIF comparation statements
    (87) elsif -> . ELSIF comparations statements

    END             shift and go to state 162
    ELSE            shift and go to state 145
    ELSIF           shift and go to state 146

    elses                          shift and go to state 163
    else                           shift and go to state 143
    elsif                          shift and go to state 144

state 100

    (34) comparation -> literal EQUAL . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 164
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 101

    (36) comparation -> literal NOT_EQ . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 165
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 102

    (38) comparation -> literal LT_OR_EQ . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 166
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 103

    (40) comparation -> literal GT_OR_EQ . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 167
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 104

    (42) comparation -> literal LESS_THAN . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 168
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 105

    (44) comparation -> literal GREATER_THAN . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 169
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 106

    (35) comparation -> ID EQUAL . ID

    ID              shift and go to state 170


state 107

    (37) comparation -> ID NOT_EQ . ID

    ID              shift and go to state 171


state 108

    (39) comparation -> ID LT_OR_EQ . ID

    ID              shift and go to state 172


state 109

    (41) comparation -> ID GT_OR_EQ . ID

    ID              shift and go to state 173


state 110

    (43) comparation -> ID LESS_THAN . ID

    ID              shift and go to state 174


state 111

    (45) comparation -> ID GREATER_THAN . ID

    ID              shift and go to state 175


state 112

    (148) range -> STRING ELLIPSIS . STRING

    STRING          shift and go to state 176


state 113

    (149) range -> STRING DOUBLE_PERIOD . STRING

    STRING          shift and go to state 177


state 114

    (144) range -> INTEGER ELLIPSIS . INTEGER

    INTEGER         shift and go to state 178


state 115

    (145) range -> INTEGER DOUBLE_PERIOD . INTEGER

    INTEGER         shift and go to state 179


state 116

    (142) range -> L_PAREN INTEGER . ELLIPSIS INTEGER R_PAREN
    (143) range -> L_PAREN INTEGER . DOUBLE_PERIOD INTEGER R_PAREN

    ELLIPSIS        shift and go to state 180
    DOUBLE_PERIOD   shift and go to state 181


state 117

    (146) range -> L_PAREN STRING . ELLIPSIS STRING
    (147) range -> L_PAREN STRING . DOUBLE_PERIOD STRING

    ELLIPSIS        shift and go to state 182
    DOUBLE_PERIOD   shift and go to state 183


state 118

    (96) control -> UNLESS boolean COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 184
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 119

    (99) control -> UNLESS boolean statements . elses END
    (88) elses -> . else
    (89) elses -> . elsif elses
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements
    (85) elsif -> . ELSIF boolean statements
    (86) elsif -> . ELSIF comparation statements
    (87) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 145
    ELSIF           shift and go to state 146

    elses                          shift and go to state 185
    else                           shift and go to state 143
    elsif                          shift and go to state 144

state 120

    (97) control -> UNLESS comparation COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 186
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 121

    (100) control -> UNLESS comparation statements . elses END
    (88) elses -> . else
    (89) elses -> . elsif elses
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements
    (85) elsif -> . ELSIF boolean statements
    (86) elsif -> . ELSIF comparation statements
    (87) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 145
    ELSIF           shift and go to state 146

    elses                          shift and go to state 187
    else                           shift and go to state 143
    elsif                          shift and go to state 144

state 122

    (98) control -> UNLESS comparations COLON . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 188
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 123

    (101) control -> UNLESS comparations statements . elses END
    (88) elses -> . else
    (89) elses -> . elsif elses
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements
    (85) elsif -> . ELSIF boolean statements
    (86) elsif -> . ELSIF comparation statements
    (87) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 145
    ELSIF           shift and go to state 146

    elses                          shift and go to state 189
    else                           shift and go to state 143
    elsif                          shift and go to state 144

state 124

    (108) control -> CASE ID whens . else END
    (109) control -> CASE ID whens . END
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements

    END             shift and go to state 191
    ELSE            shift and go to state 145

    else                           shift and go to state 190

state 125

    (106) whens -> when .
    (107) whens -> when . whens
    (106) whens -> . when
    (107) whens -> . when whens
    (102) when -> . WHEN literal
    (103) when -> . WHEN literal THEN
    (104) when -> . WHEN comparation
    (105) when -> . WHEN comparations

    END             reduce using rule 106 (whens -> when .)
    ELSE            reduce using rule 106 (whens -> when .)
    WHEN            shift and go to state 126

    when                           shift and go to state 125
    whens                          shift and go to state 192

state 126

    (102) when -> WHEN . literal
    (103) when -> WHEN . literal THEN
    (104) when -> WHEN . comparation
    (105) when -> WHEN . comparations
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    ID              shift and go to state 39
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 193
    comparation                    shift and go to state 194
    comparations                   shift and go to state 195
    boolean                        shift and go to state 196
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 127

    (110) control -> WHILE boolean DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 197
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 128

    (111) control -> WHILE comparation DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 198
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 129

    (112) control -> WHILE comparations DO . statements END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 199
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 130

    (128) strucMatrix -> MATRIX L_BRACKET . arrays R_BRACKET
    (123) arrays -> . array
    (124) arrays -> . array COMMA arrays
    (120) array -> . L_BRACKET literals R_BRACKET
    (121) array -> . L_BRACKET ids R_BRACKET
    (122) array -> . L_BRACKET elements R_BRACKET

    L_BRACKET       shift and go to state 133

    arrays                         shift and go to state 200
    array                          shift and go to state 201

state 131

    (129) strucSet -> SET PERIOD . NEW
    (130) strucSet -> SET PERIOD . NEW L_PAREN R_PAREN
    (131) strucSet -> SET PERIOD . NEW L_PAREN array R_PAREN

    NEW             shift and go to state 202


state 132

    (132) strucSet -> SET array .

    ID              reduce using rule 132 (strucSet -> SET array .)
    DEF             reduce using rule 132 (strucSet -> SET array .)
    IF              reduce using rule 132 (strucSet -> SET array .)
    UNLESS          reduce using rule 132 (strucSet -> SET array .)
    CASE            reduce using rule 132 (strucSet -> SET array .)
    WHILE           reduce using rule 132 (strucSet -> SET array .)
    COMPLEX         reduce using rule 132 (strucSet -> SET array .)
    RATIONAL        reduce using rule 132 (strucSet -> SET array .)
    FLOAT           reduce using rule 132 (strucSet -> SET array .)
    INTEGER         reduce using rule 132 (strucSet -> SET array .)
    $end            reduce using rule 132 (strucSet -> SET array .)
    END             reduce using rule 132 (strucSet -> SET array .)
    RETURN          reduce using rule 132 (strucSet -> SET array .)
    ELSE            reduce using rule 132 (strucSet -> SET array .)
    ELSIF           reduce using rule 132 (strucSet -> SET array .)


state 133

    (120) array -> L_BRACKET . literals R_BRACKET
    (121) array -> L_BRACKET . ids R_BRACKET
    (122) array -> L_BRACKET . elements R_BRACKET
    (14) literals -> . literal
    (15) literals -> . literal COMMA literals
    (8) ids -> . ID
    (9) ids -> . ID COMMA ids
    (118) elements -> . element
    (119) elements -> . element COMMA elements
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (113) element -> . ID
    (114) element -> . STRING
    (115) element -> . boolean
    (116) element -> . numeric
    (117) element -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 206
    STRING          shift and go to state 208
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literals                       shift and go to state 203
    ids                            shift and go to state 204
    elements                       shift and go to state 205
    literal                        shift and go to state 138
    element                        shift and go to state 207
    boolean                        shift and go to state 209
    numeric                        shift and go to state 210
    range                          shift and go to state 211

state 134

    (133) strucHash -> HASH PERIOD . NEW
    (134) strucHash -> HASH PERIOD . NEW L_BRACE R_BRACE
    (135) strucHash -> HASH PERIOD . NEW L_BRACE hashelems R_BRACE

    NEW             shift and go to state 212


state 135

    (136) strucHash -> HASH array .

    ID              reduce using rule 136 (strucHash -> HASH array .)
    DEF             reduce using rule 136 (strucHash -> HASH array .)
    IF              reduce using rule 136 (strucHash -> HASH array .)
    UNLESS          reduce using rule 136 (strucHash -> HASH array .)
    CASE            reduce using rule 136 (strucHash -> HASH array .)
    WHILE           reduce using rule 136 (strucHash -> HASH array .)
    COMPLEX         reduce using rule 136 (strucHash -> HASH array .)
    RATIONAL        reduce using rule 136 (strucHash -> HASH array .)
    FLOAT           reduce using rule 136 (strucHash -> HASH array .)
    INTEGER         reduce using rule 136 (strucHash -> HASH array .)
    $end            reduce using rule 136 (strucHash -> HASH array .)
    END             reduce using rule 136 (strucHash -> HASH array .)
    RETURN          reduce using rule 136 (strucHash -> HASH array .)
    ELSE            reduce using rule 136 (strucHash -> HASH array .)
    ELSIF           reduce using rule 136 (strucHash -> HASH array .)


state 136

    (73) function -> DEF ID L_PAREN literals . R_PAREN statements END
    (76) function -> DEF ID L_PAREN literals . R_PAREN statements RETURN ID END
    (79) function -> DEF ID L_PAREN literals . R_PAREN statements RETURN literal END

    R_PAREN         shift and go to state 213


state 137

    (74) function -> DEF ID L_PAREN R_PAREN . statements END
    (77) function -> DEF ID L_PAREN R_PAREN . statements RETURN ID END
    (80) function -> DEF ID L_PAREN R_PAREN . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 214
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 138

    (14) literals -> literal .
    (15) literals -> literal . COMMA literals

    R_PAREN         reduce using rule 14 (literals -> literal .)
    R_BRACKET       reduce using rule 14 (literals -> literal .)
    COMMA           shift and go to state 215


state 139

    (75) function -> DEF ID statements END .

    ID              reduce using rule 75 (function -> DEF ID statements END .)
    DEF             reduce using rule 75 (function -> DEF ID statements END .)
    IF              reduce using rule 75 (function -> DEF ID statements END .)
    UNLESS          reduce using rule 75 (function -> DEF ID statements END .)
    CASE            reduce using rule 75 (function -> DEF ID statements END .)
    WHILE           reduce using rule 75 (function -> DEF ID statements END .)
    COMPLEX         reduce using rule 75 (function -> DEF ID statements END .)
    RATIONAL        reduce using rule 75 (function -> DEF ID statements END .)
    FLOAT           reduce using rule 75 (function -> DEF ID statements END .)
    INTEGER         reduce using rule 75 (function -> DEF ID statements END .)
    $end            reduce using rule 75 (function -> DEF ID statements END .)
    END             reduce using rule 75 (function -> DEF ID statements END .)
    RETURN          reduce using rule 75 (function -> DEF ID statements END .)
    ELSE            reduce using rule 75 (function -> DEF ID statements END .)
    ELSIF           reduce using rule 75 (function -> DEF ID statements END .)


state 140

    (78) function -> DEF ID statements RETURN . ID END
    (81) function -> DEF ID statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 216
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 217
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 141

    (90) control -> IF boolean statements END .

    ID              reduce using rule 90 (control -> IF boolean statements END .)
    DEF             reduce using rule 90 (control -> IF boolean statements END .)
    IF              reduce using rule 90 (control -> IF boolean statements END .)
    UNLESS          reduce using rule 90 (control -> IF boolean statements END .)
    CASE            reduce using rule 90 (control -> IF boolean statements END .)
    WHILE           reduce using rule 90 (control -> IF boolean statements END .)
    COMPLEX         reduce using rule 90 (control -> IF boolean statements END .)
    RATIONAL        reduce using rule 90 (control -> IF boolean statements END .)
    FLOAT           reduce using rule 90 (control -> IF boolean statements END .)
    INTEGER         reduce using rule 90 (control -> IF boolean statements END .)
    $end            reduce using rule 90 (control -> IF boolean statements END .)
    END             reduce using rule 90 (control -> IF boolean statements END .)
    RETURN          reduce using rule 90 (control -> IF boolean statements END .)
    ELSE            reduce using rule 90 (control -> IF boolean statements END .)
    ELSIF           reduce using rule 90 (control -> IF boolean statements END .)


state 142

    (93) control -> IF boolean statements elses . END

    END             shift and go to state 218


state 143

    (88) elses -> else .

    END             reduce using rule 88 (elses -> else .)


state 144

    (89) elses -> elsif . elses
    (88) elses -> . else
    (89) elses -> . elsif elses
    (82) else -> . ELSE boolean statements
    (83) else -> . ELSE comparation statements
    (84) else -> . ELSE comparations statements
    (85) elsif -> . ELSIF boolean statements
    (86) elsif -> . ELSIF comparation statements
    (87) elsif -> . ELSIF comparations statements

    ELSE            shift and go to state 145
    ELSIF           shift and go to state 146

    elsif                          shift and go to state 144
    elses                          shift and go to state 219
    else                           shift and go to state 143

state 145

    (82) else -> ELSE . boolean statements
    (83) else -> ELSE . comparation statements
    (84) else -> ELSE . comparations statements
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    ID              shift and go to state 39
    STRING          shift and go to state 40
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    boolean                        shift and go to state 220
    comparation                    shift and go to state 221
    comparations                   shift and go to state 222
    literal                        shift and go to state 38
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 146

    (85) elsif -> ELSIF . boolean statements
    (86) elsif -> ELSIF . comparation statements
    (87) elsif -> ELSIF . comparations statements
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (34) comparation -> . literal EQUAL literal
    (35) comparation -> . ID EQUAL ID
    (36) comparation -> . literal NOT_EQ literal
    (37) comparation -> . ID NOT_EQ ID
    (38) comparation -> . literal LT_OR_EQ literal
    (39) comparation -> . ID LT_OR_EQ ID
    (40) comparation -> . literal GT_OR_EQ literal
    (41) comparation -> . ID GT_OR_EQ ID
    (42) comparation -> . literal LESS_THAN literal
    (43) comparation -> . ID LESS_THAN ID
    (44) comparation -> . literal GREATER_THAN literal
    (45) comparation -> . ID GREATER_THAN ID
    (46) comparations -> . comparation AND comparation
    (47) comparations -> . comparation LOGIC_AND comparation
    (48) comparations -> . comparation AND comparations
    (49) comparations -> . comparation LOGIC_AND comparations
    (50) comparations -> . comparation OR comparation
    (51) comparations -> . comparation LOGIC_OR comparation
    (52) comparations -> . comparation OR comparations
    (53) comparations -> . comparation LOGIC_OR comparations
    (54) comparations -> . boolean AND boolean
    (55) comparations -> . boolean LOGIC_AND boolean
    (56) comparations -> . boolean OR boolean
    (57) comparations -> . boolean LOGIC_OR boolean
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    ID              shift and go to state 39
    STRING          shift and go to state 40
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    boolean                        shift and go to state 223
    comparation                    shift and go to state 224
    comparations                   shift and go to state 225
    literal                        shift and go to state 38
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 147

    (54) comparations -> boolean AND boolean .

    ID              reduce using rule 54 (comparations -> boolean AND boolean .)
    DEF             reduce using rule 54 (comparations -> boolean AND boolean .)
    IF              reduce using rule 54 (comparations -> boolean AND boolean .)
    UNLESS          reduce using rule 54 (comparations -> boolean AND boolean .)
    CASE            reduce using rule 54 (comparations -> boolean AND boolean .)
    WHILE           reduce using rule 54 (comparations -> boolean AND boolean .)
    COMPLEX         reduce using rule 54 (comparations -> boolean AND boolean .)
    RATIONAL        reduce using rule 54 (comparations -> boolean AND boolean .)
    FLOAT           reduce using rule 54 (comparations -> boolean AND boolean .)
    INTEGER         reduce using rule 54 (comparations -> boolean AND boolean .)
    COLON           reduce using rule 54 (comparations -> boolean AND boolean .)
    DO              reduce using rule 54 (comparations -> boolean AND boolean .)
    WHEN            reduce using rule 54 (comparations -> boolean AND boolean .)
    END             reduce using rule 54 (comparations -> boolean AND boolean .)
    ELSE            reduce using rule 54 (comparations -> boolean AND boolean .)


state 148

    (55) comparations -> boolean LOGIC_AND boolean .

    ID              reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    DEF             reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    IF              reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    UNLESS          reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    CASE            reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    WHILE           reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    COMPLEX         reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    RATIONAL        reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    FLOAT           reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    INTEGER         reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    COLON           reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    DO              reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    WHEN            reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    END             reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)
    ELSE            reduce using rule 55 (comparations -> boolean LOGIC_AND boolean .)


state 149

    (56) comparations -> boolean OR boolean .

    ID              reduce using rule 56 (comparations -> boolean OR boolean .)
    DEF             reduce using rule 56 (comparations -> boolean OR boolean .)
    IF              reduce using rule 56 (comparations -> boolean OR boolean .)
    UNLESS          reduce using rule 56 (comparations -> boolean OR boolean .)
    CASE            reduce using rule 56 (comparations -> boolean OR boolean .)
    WHILE           reduce using rule 56 (comparations -> boolean OR boolean .)
    COMPLEX         reduce using rule 56 (comparations -> boolean OR boolean .)
    RATIONAL        reduce using rule 56 (comparations -> boolean OR boolean .)
    FLOAT           reduce using rule 56 (comparations -> boolean OR boolean .)
    INTEGER         reduce using rule 56 (comparations -> boolean OR boolean .)
    COLON           reduce using rule 56 (comparations -> boolean OR boolean .)
    DO              reduce using rule 56 (comparations -> boolean OR boolean .)
    WHEN            reduce using rule 56 (comparations -> boolean OR boolean .)
    END             reduce using rule 56 (comparations -> boolean OR boolean .)
    ELSE            reduce using rule 56 (comparations -> boolean OR boolean .)


state 150

    (57) comparations -> boolean LOGIC_OR boolean .

    ID              reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    DEF             reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    IF              reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    UNLESS          reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    CASE            reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    WHILE           reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    COMPLEX         reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    RATIONAL        reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    FLOAT           reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    INTEGER         reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    COLON           reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    DO              reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    WHEN            reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    END             reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)
    ELSE            reduce using rule 57 (comparations -> boolean LOGIC_OR boolean .)


state 151

    (91) control -> IF comparation statements END .

    ID              reduce using rule 91 (control -> IF comparation statements END .)
    DEF             reduce using rule 91 (control -> IF comparation statements END .)
    IF              reduce using rule 91 (control -> IF comparation statements END .)
    UNLESS          reduce using rule 91 (control -> IF comparation statements END .)
    CASE            reduce using rule 91 (control -> IF comparation statements END .)
    WHILE           reduce using rule 91 (control -> IF comparation statements END .)
    COMPLEX         reduce using rule 91 (control -> IF comparation statements END .)
    RATIONAL        reduce using rule 91 (control -> IF comparation statements END .)
    FLOAT           reduce using rule 91 (control -> IF comparation statements END .)
    INTEGER         reduce using rule 91 (control -> IF comparation statements END .)
    $end            reduce using rule 91 (control -> IF comparation statements END .)
    END             reduce using rule 91 (control -> IF comparation statements END .)
    RETURN          reduce using rule 91 (control -> IF comparation statements END .)
    ELSE            reduce using rule 91 (control -> IF comparation statements END .)
    ELSIF           reduce using rule 91 (control -> IF comparation statements END .)


state 152

    (94) control -> IF comparation statements elses . END

    END             shift and go to state 226


state 153

    (46) comparations -> comparation AND comparation .
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 46 (comparations -> comparation AND comparation .)
    DEF             reduce using rule 46 (comparations -> comparation AND comparation .)
    IF              reduce using rule 46 (comparations -> comparation AND comparation .)
    UNLESS          reduce using rule 46 (comparations -> comparation AND comparation .)
    CASE            reduce using rule 46 (comparations -> comparation AND comparation .)
    WHILE           reduce using rule 46 (comparations -> comparation AND comparation .)
    COMPLEX         reduce using rule 46 (comparations -> comparation AND comparation .)
    RATIONAL        reduce using rule 46 (comparations -> comparation AND comparation .)
    FLOAT           reduce using rule 46 (comparations -> comparation AND comparation .)
    INTEGER         reduce using rule 46 (comparations -> comparation AND comparation .)
    COLON           reduce using rule 46 (comparations -> comparation AND comparation .)
    DO              reduce using rule 46 (comparations -> comparation AND comparation .)
    WHEN            reduce using rule 46 (comparations -> comparation AND comparation .)
    END             reduce using rule 46 (comparations -> comparation AND comparation .)
    ELSE            reduce using rule 46 (comparations -> comparation AND comparation .)
    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98


state 154

    (48) comparations -> comparation AND comparations .

    ID              reduce using rule 48 (comparations -> comparation AND comparations .)
    DEF             reduce using rule 48 (comparations -> comparation AND comparations .)
    IF              reduce using rule 48 (comparations -> comparation AND comparations .)
    UNLESS          reduce using rule 48 (comparations -> comparation AND comparations .)
    CASE            reduce using rule 48 (comparations -> comparation AND comparations .)
    WHILE           reduce using rule 48 (comparations -> comparation AND comparations .)
    COMPLEX         reduce using rule 48 (comparations -> comparation AND comparations .)
    RATIONAL        reduce using rule 48 (comparations -> comparation AND comparations .)
    FLOAT           reduce using rule 48 (comparations -> comparation AND comparations .)
    INTEGER         reduce using rule 48 (comparations -> comparation AND comparations .)
    COLON           reduce using rule 48 (comparations -> comparation AND comparations .)
    DO              reduce using rule 48 (comparations -> comparation AND comparations .)
    WHEN            reduce using rule 48 (comparations -> comparation AND comparations .)
    END             reduce using rule 48 (comparations -> comparation AND comparations .)
    ELSE            reduce using rule 48 (comparations -> comparation AND comparations .)


state 155

    (54) comparations -> boolean . AND boolean
    (55) comparations -> boolean . LOGIC_AND boolean
    (56) comparations -> boolean . OR boolean
    (57) comparations -> boolean . LOGIC_OR boolean
    (11) literal -> boolean .

    AND             shift and go to state 90
    LOGIC_AND       shift and go to state 91
    OR              shift and go to state 92
    LOGIC_OR        shift and go to state 93
    EQUAL           reduce using rule 11 (literal -> boolean .)
    NOT_EQ          reduce using rule 11 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    LESS_THAN       reduce using rule 11 (literal -> boolean .)
    GREATER_THAN    reduce using rule 11 (literal -> boolean .)


state 156

    (47) comparations -> comparation LOGIC_AND comparation .
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    DEF             reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    IF              reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    UNLESS          reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    CASE            reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    WHILE           reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    COMPLEX         reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    RATIONAL        reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    FLOAT           reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    INTEGER         reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    COLON           reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    DO              reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    WHEN            reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    END             reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    ELSE            reduce using rule 47 (comparations -> comparation LOGIC_AND comparation .)
    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98


state 157

    (49) comparations -> comparation LOGIC_AND comparations .

    ID              reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    DEF             reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    IF              reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    UNLESS          reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    CASE            reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    WHILE           reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    COMPLEX         reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    RATIONAL        reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    FLOAT           reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    INTEGER         reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    COLON           reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    DO              reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    WHEN            reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    END             reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)
    ELSE            reduce using rule 49 (comparations -> comparation LOGIC_AND comparations .)


state 158

    (50) comparations -> comparation OR comparation .
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 50 (comparations -> comparation OR comparation .)
    DEF             reduce using rule 50 (comparations -> comparation OR comparation .)
    IF              reduce using rule 50 (comparations -> comparation OR comparation .)
    UNLESS          reduce using rule 50 (comparations -> comparation OR comparation .)
    CASE            reduce using rule 50 (comparations -> comparation OR comparation .)
    WHILE           reduce using rule 50 (comparations -> comparation OR comparation .)
    COMPLEX         reduce using rule 50 (comparations -> comparation OR comparation .)
    RATIONAL        reduce using rule 50 (comparations -> comparation OR comparation .)
    FLOAT           reduce using rule 50 (comparations -> comparation OR comparation .)
    INTEGER         reduce using rule 50 (comparations -> comparation OR comparation .)
    COLON           reduce using rule 50 (comparations -> comparation OR comparation .)
    DO              reduce using rule 50 (comparations -> comparation OR comparation .)
    WHEN            reduce using rule 50 (comparations -> comparation OR comparation .)
    END             reduce using rule 50 (comparations -> comparation OR comparation .)
    ELSE            reduce using rule 50 (comparations -> comparation OR comparation .)
    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98


state 159

    (52) comparations -> comparation OR comparations .

    ID              reduce using rule 52 (comparations -> comparation OR comparations .)
    DEF             reduce using rule 52 (comparations -> comparation OR comparations .)
    IF              reduce using rule 52 (comparations -> comparation OR comparations .)
    UNLESS          reduce using rule 52 (comparations -> comparation OR comparations .)
    CASE            reduce using rule 52 (comparations -> comparation OR comparations .)
    WHILE           reduce using rule 52 (comparations -> comparation OR comparations .)
    COMPLEX         reduce using rule 52 (comparations -> comparation OR comparations .)
    RATIONAL        reduce using rule 52 (comparations -> comparation OR comparations .)
    FLOAT           reduce using rule 52 (comparations -> comparation OR comparations .)
    INTEGER         reduce using rule 52 (comparations -> comparation OR comparations .)
    COLON           reduce using rule 52 (comparations -> comparation OR comparations .)
    DO              reduce using rule 52 (comparations -> comparation OR comparations .)
    WHEN            reduce using rule 52 (comparations -> comparation OR comparations .)
    END             reduce using rule 52 (comparations -> comparation OR comparations .)
    ELSE            reduce using rule 52 (comparations -> comparation OR comparations .)


state 160

    (51) comparations -> comparation LOGIC_OR comparation .
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations

    ID              reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    DEF             reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    IF              reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    UNLESS          reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    CASE            reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    WHILE           reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    COMPLEX         reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    RATIONAL        reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    FLOAT           reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    INTEGER         reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    COLON           reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    DO              reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    WHEN            reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    END             reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    ELSE            reduce using rule 51 (comparations -> comparation LOGIC_OR comparation .)
    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98


state 161

    (53) comparations -> comparation LOGIC_OR comparations .

    ID              reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    DEF             reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    IF              reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    UNLESS          reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    CASE            reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    WHILE           reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    COMPLEX         reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    RATIONAL        reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    FLOAT           reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    INTEGER         reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    COLON           reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    DO              reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    WHEN            reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    END             reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)
    ELSE            reduce using rule 53 (comparations -> comparation LOGIC_OR comparations .)


state 162

    (92) control -> IF comparations statements END .

    ID              reduce using rule 92 (control -> IF comparations statements END .)
    DEF             reduce using rule 92 (control -> IF comparations statements END .)
    IF              reduce using rule 92 (control -> IF comparations statements END .)
    UNLESS          reduce using rule 92 (control -> IF comparations statements END .)
    CASE            reduce using rule 92 (control -> IF comparations statements END .)
    WHILE           reduce using rule 92 (control -> IF comparations statements END .)
    COMPLEX         reduce using rule 92 (control -> IF comparations statements END .)
    RATIONAL        reduce using rule 92 (control -> IF comparations statements END .)
    FLOAT           reduce using rule 92 (control -> IF comparations statements END .)
    INTEGER         reduce using rule 92 (control -> IF comparations statements END .)
    $end            reduce using rule 92 (control -> IF comparations statements END .)
    END             reduce using rule 92 (control -> IF comparations statements END .)
    RETURN          reduce using rule 92 (control -> IF comparations statements END .)
    ELSE            reduce using rule 92 (control -> IF comparations statements END .)
    ELSIF           reduce using rule 92 (control -> IF comparations statements END .)


state 163

    (95) control -> IF comparations statements elses . END

    END             shift and go to state 227


state 164

    (34) comparation -> literal EQUAL literal .

    AND             reduce using rule 34 (comparation -> literal EQUAL literal .)
    LOGIC_AND       reduce using rule 34 (comparation -> literal EQUAL literal .)
    OR              reduce using rule 34 (comparation -> literal EQUAL literal .)
    LOGIC_OR        reduce using rule 34 (comparation -> literal EQUAL literal .)
    ID              reduce using rule 34 (comparation -> literal EQUAL literal .)
    DEF             reduce using rule 34 (comparation -> literal EQUAL literal .)
    IF              reduce using rule 34 (comparation -> literal EQUAL literal .)
    UNLESS          reduce using rule 34 (comparation -> literal EQUAL literal .)
    CASE            reduce using rule 34 (comparation -> literal EQUAL literal .)
    WHILE           reduce using rule 34 (comparation -> literal EQUAL literal .)
    COMPLEX         reduce using rule 34 (comparation -> literal EQUAL literal .)
    RATIONAL        reduce using rule 34 (comparation -> literal EQUAL literal .)
    FLOAT           reduce using rule 34 (comparation -> literal EQUAL literal .)
    INTEGER         reduce using rule 34 (comparation -> literal EQUAL literal .)
    COLON           reduce using rule 34 (comparation -> literal EQUAL literal .)
    DO              reduce using rule 34 (comparation -> literal EQUAL literal .)
    WHEN            reduce using rule 34 (comparation -> literal EQUAL literal .)
    END             reduce using rule 34 (comparation -> literal EQUAL literal .)
    ELSE            reduce using rule 34 (comparation -> literal EQUAL literal .)


state 165

    (36) comparation -> literal NOT_EQ literal .

    AND             reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    LOGIC_AND       reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    OR              reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    LOGIC_OR        reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    ID              reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    DEF             reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    IF              reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    UNLESS          reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    CASE            reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    WHILE           reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    COMPLEX         reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    RATIONAL        reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    FLOAT           reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    INTEGER         reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    COLON           reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    DO              reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    WHEN            reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    END             reduce using rule 36 (comparation -> literal NOT_EQ literal .)
    ELSE            reduce using rule 36 (comparation -> literal NOT_EQ literal .)


state 166

    (38) comparation -> literal LT_OR_EQ literal .

    AND             reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    OR              reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    ID              reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    DEF             reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    IF              reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    UNLESS          reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    CASE            reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    WHILE           reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    COMPLEX         reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    RATIONAL        reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    FLOAT           reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    INTEGER         reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    COLON           reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    DO              reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    WHEN            reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    END             reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)
    ELSE            reduce using rule 38 (comparation -> literal LT_OR_EQ literal .)


state 167

    (40) comparation -> literal GT_OR_EQ literal .

    AND             reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    LOGIC_AND       reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    OR              reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    LOGIC_OR        reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    ID              reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    DEF             reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    IF              reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    UNLESS          reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    CASE            reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    WHILE           reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    COMPLEX         reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    RATIONAL        reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    FLOAT           reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    INTEGER         reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    COLON           reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    DO              reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    WHEN            reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    END             reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)
    ELSE            reduce using rule 40 (comparation -> literal GT_OR_EQ literal .)


state 168

    (42) comparation -> literal LESS_THAN literal .

    AND             reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    LOGIC_AND       reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    OR              reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    LOGIC_OR        reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    ID              reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    DEF             reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    IF              reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    UNLESS          reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    CASE            reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    WHILE           reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    COMPLEX         reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    RATIONAL        reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    FLOAT           reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    INTEGER         reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    COLON           reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    DO              reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    WHEN            reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    END             reduce using rule 42 (comparation -> literal LESS_THAN literal .)
    ELSE            reduce using rule 42 (comparation -> literal LESS_THAN literal .)


state 169

    (44) comparation -> literal GREATER_THAN literal .

    AND             reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    LOGIC_AND       reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    OR              reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    LOGIC_OR        reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    ID              reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    DEF             reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    IF              reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    UNLESS          reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    CASE            reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    WHILE           reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    COMPLEX         reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    RATIONAL        reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    FLOAT           reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    INTEGER         reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    COLON           reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    DO              reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    WHEN            reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    END             reduce using rule 44 (comparation -> literal GREATER_THAN literal .)
    ELSE            reduce using rule 44 (comparation -> literal GREATER_THAN literal .)


state 170

    (35) comparation -> ID EQUAL ID .

    AND             reduce using rule 35 (comparation -> ID EQUAL ID .)
    LOGIC_AND       reduce using rule 35 (comparation -> ID EQUAL ID .)
    OR              reduce using rule 35 (comparation -> ID EQUAL ID .)
    LOGIC_OR        reduce using rule 35 (comparation -> ID EQUAL ID .)
    ID              reduce using rule 35 (comparation -> ID EQUAL ID .)
    DEF             reduce using rule 35 (comparation -> ID EQUAL ID .)
    IF              reduce using rule 35 (comparation -> ID EQUAL ID .)
    UNLESS          reduce using rule 35 (comparation -> ID EQUAL ID .)
    CASE            reduce using rule 35 (comparation -> ID EQUAL ID .)
    WHILE           reduce using rule 35 (comparation -> ID EQUAL ID .)
    COMPLEX         reduce using rule 35 (comparation -> ID EQUAL ID .)
    RATIONAL        reduce using rule 35 (comparation -> ID EQUAL ID .)
    FLOAT           reduce using rule 35 (comparation -> ID EQUAL ID .)
    INTEGER         reduce using rule 35 (comparation -> ID EQUAL ID .)
    COLON           reduce using rule 35 (comparation -> ID EQUAL ID .)
    DO              reduce using rule 35 (comparation -> ID EQUAL ID .)
    WHEN            reduce using rule 35 (comparation -> ID EQUAL ID .)
    END             reduce using rule 35 (comparation -> ID EQUAL ID .)
    ELSE            reduce using rule 35 (comparation -> ID EQUAL ID .)


state 171

    (37) comparation -> ID NOT_EQ ID .

    AND             reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    LOGIC_AND       reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    OR              reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    LOGIC_OR        reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    ID              reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    DEF             reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    IF              reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    UNLESS          reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    CASE            reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    WHILE           reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    COMPLEX         reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    RATIONAL        reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    FLOAT           reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    INTEGER         reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    COLON           reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    DO              reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    WHEN            reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    END             reduce using rule 37 (comparation -> ID NOT_EQ ID .)
    ELSE            reduce using rule 37 (comparation -> ID NOT_EQ ID .)


state 172

    (39) comparation -> ID LT_OR_EQ ID .

    AND             reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    LOGIC_AND       reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    OR              reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    LOGIC_OR        reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    ID              reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    DEF             reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    IF              reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    UNLESS          reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    CASE            reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    WHILE           reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    COMPLEX         reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    RATIONAL        reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    FLOAT           reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    INTEGER         reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    COLON           reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    DO              reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    WHEN            reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    END             reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)
    ELSE            reduce using rule 39 (comparation -> ID LT_OR_EQ ID .)


state 173

    (41) comparation -> ID GT_OR_EQ ID .

    AND             reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    LOGIC_AND       reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    OR              reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    LOGIC_OR        reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    ID              reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    DEF             reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    IF              reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    UNLESS          reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    CASE            reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    WHILE           reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    COMPLEX         reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    RATIONAL        reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    FLOAT           reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    INTEGER         reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    COLON           reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    DO              reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    WHEN            reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    END             reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)
    ELSE            reduce using rule 41 (comparation -> ID GT_OR_EQ ID .)


state 174

    (43) comparation -> ID LESS_THAN ID .

    AND             reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    LOGIC_AND       reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    OR              reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    LOGIC_OR        reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    ID              reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    DEF             reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    IF              reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    UNLESS          reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    CASE            reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    WHILE           reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    COMPLEX         reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    RATIONAL        reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    FLOAT           reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    INTEGER         reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    COLON           reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    DO              reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    WHEN            reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    END             reduce using rule 43 (comparation -> ID LESS_THAN ID .)
    ELSE            reduce using rule 43 (comparation -> ID LESS_THAN ID .)


state 175

    (45) comparation -> ID GREATER_THAN ID .

    AND             reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    LOGIC_AND       reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    OR              reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    LOGIC_OR        reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    ID              reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    DEF             reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    IF              reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    UNLESS          reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    CASE            reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    WHILE           reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    COMPLEX         reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    RATIONAL        reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    FLOAT           reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    INTEGER         reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    COLON           reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    DO              reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    WHEN            reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    END             reduce using rule 45 (comparation -> ID GREATER_THAN ID .)
    ELSE            reduce using rule 45 (comparation -> ID GREATER_THAN ID .)


state 176

    (148) range -> STRING ELLIPSIS STRING .

    EQUAL           reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    NOT_EQ          reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    LT_OR_EQ        reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    GT_OR_EQ        reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    LESS_THAN       reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    GREATER_THAN    reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    ID              reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    DEF             reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    IF              reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    UNLESS          reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    CASE            reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    WHILE           reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    COMPLEX         reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    RATIONAL        reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    FLOAT           reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    INTEGER         reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    $end            reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    END             reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    RETURN          reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    ELSE            reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    ELSIF           reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    COMMA           reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    R_PAREN         reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    AND             reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    LOGIC_AND       reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    OR              reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    LOGIC_OR        reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    COLON           reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    DO              reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    WHEN            reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    THEN            reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    R_BRACKET       reduce using rule 148 (range -> STRING ELLIPSIS STRING .)
    R_BRACE         reduce using rule 148 (range -> STRING ELLIPSIS STRING .)


state 177

    (149) range -> STRING DOUBLE_PERIOD STRING .

    EQUAL           reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    NOT_EQ          reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    LT_OR_EQ        reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    GT_OR_EQ        reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    LESS_THAN       reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    GREATER_THAN    reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    ID              reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    DEF             reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    IF              reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    UNLESS          reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    CASE            reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    WHILE           reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    COMPLEX         reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    RATIONAL        reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    FLOAT           reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    INTEGER         reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    $end            reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    END             reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    RETURN          reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    ELSE            reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    ELSIF           reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    COMMA           reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    R_PAREN         reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    AND             reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    LOGIC_AND       reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    OR              reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    LOGIC_OR        reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    COLON           reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    DO              reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    WHEN            reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    THEN            reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    R_BRACKET       reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)
    R_BRACE         reduce using rule 149 (range -> STRING DOUBLE_PERIOD STRING .)


state 178

    (144) range -> INTEGER ELLIPSIS INTEGER .

    EQUAL           reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    NOT_EQ          reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    LT_OR_EQ        reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    GT_OR_EQ        reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    LESS_THAN       reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    GREATER_THAN    reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    ID              reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    DEF             reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    IF              reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    UNLESS          reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    CASE            reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    WHILE           reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    COMPLEX         reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    RATIONAL        reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    FLOAT           reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    INTEGER         reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    $end            reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    END             reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    RETURN          reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    ELSE            reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    ELSIF           reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    COMMA           reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    R_PAREN         reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    AND             reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    LOGIC_AND       reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    OR              reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    LOGIC_OR        reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    COLON           reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    DO              reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    WHEN            reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    THEN            reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    R_BRACKET       reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)
    R_BRACE         reduce using rule 144 (range -> INTEGER ELLIPSIS INTEGER .)


state 179

    (145) range -> INTEGER DOUBLE_PERIOD INTEGER .

    EQUAL           reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    NOT_EQ          reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LT_OR_EQ        reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    GT_OR_EQ        reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LESS_THAN       reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    GREATER_THAN    reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ID              reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    DEF             reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    IF              reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    UNLESS          reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    CASE            reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    WHILE           reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COMPLEX         reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    RATIONAL        reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    FLOAT           reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    INTEGER         reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    $end            reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    END             reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    RETURN          reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ELSE            reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    ELSIF           reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COMMA           reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_PAREN         reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    AND             reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LOGIC_AND       reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    OR              reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    LOGIC_OR        reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    COLON           reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    DO              reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    WHEN            reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    THEN            reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_BRACKET       reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)
    R_BRACE         reduce using rule 145 (range -> INTEGER DOUBLE_PERIOD INTEGER .)


state 180

    (142) range -> L_PAREN INTEGER ELLIPSIS . INTEGER R_PAREN

    INTEGER         shift and go to state 228


state 181

    (143) range -> L_PAREN INTEGER DOUBLE_PERIOD . INTEGER R_PAREN

    INTEGER         shift and go to state 229


state 182

    (146) range -> L_PAREN STRING ELLIPSIS . STRING

    STRING          shift and go to state 230


state 183

    (147) range -> L_PAREN STRING DOUBLE_PERIOD . STRING

    STRING          shift and go to state 231


state 184

    (96) control -> UNLESS boolean COLON statements . END

    END             shift and go to state 232


state 185

    (99) control -> UNLESS boolean statements elses . END

    END             shift and go to state 233


state 186

    (97) control -> UNLESS comparation COLON statements . END

    END             shift and go to state 234


state 187

    (100) control -> UNLESS comparation statements elses . END

    END             shift and go to state 235


state 188

    (98) control -> UNLESS comparations COLON statements . END

    END             shift and go to state 236


state 189

    (101) control -> UNLESS comparations statements elses . END

    END             shift and go to state 237


state 190

    (108) control -> CASE ID whens else . END

    END             shift and go to state 238


state 191

    (109) control -> CASE ID whens END .

    ID              reduce using rule 109 (control -> CASE ID whens END .)
    DEF             reduce using rule 109 (control -> CASE ID whens END .)
    IF              reduce using rule 109 (control -> CASE ID whens END .)
    UNLESS          reduce using rule 109 (control -> CASE ID whens END .)
    CASE            reduce using rule 109 (control -> CASE ID whens END .)
    WHILE           reduce using rule 109 (control -> CASE ID whens END .)
    COMPLEX         reduce using rule 109 (control -> CASE ID whens END .)
    RATIONAL        reduce using rule 109 (control -> CASE ID whens END .)
    FLOAT           reduce using rule 109 (control -> CASE ID whens END .)
    INTEGER         reduce using rule 109 (control -> CASE ID whens END .)
    $end            reduce using rule 109 (control -> CASE ID whens END .)
    END             reduce using rule 109 (control -> CASE ID whens END .)
    RETURN          reduce using rule 109 (control -> CASE ID whens END .)
    ELSE            reduce using rule 109 (control -> CASE ID whens END .)
    ELSIF           reduce using rule 109 (control -> CASE ID whens END .)


state 192

    (107) whens -> when whens .

    END             reduce using rule 107 (whens -> when whens .)
    ELSE            reduce using rule 107 (whens -> when whens .)


state 193

    (102) when -> WHEN literal .
    (103) when -> WHEN literal . THEN
    (34) comparation -> literal . EQUAL literal
    (36) comparation -> literal . NOT_EQ literal
    (38) comparation -> literal . LT_OR_EQ literal
    (40) comparation -> literal . GT_OR_EQ literal
    (42) comparation -> literal . LESS_THAN literal
    (44) comparation -> literal . GREATER_THAN literal

    WHEN            reduce using rule 102 (when -> WHEN literal .)
    END             reduce using rule 102 (when -> WHEN literal .)
    ELSE            reduce using rule 102 (when -> WHEN literal .)
    THEN            shift and go to state 239
    EQUAL           shift and go to state 100
    NOT_EQ          shift and go to state 101
    LT_OR_EQ        shift and go to state 102
    GT_OR_EQ        shift and go to state 103
    LESS_THAN       shift and go to state 104
    GREATER_THAN    shift and go to state 105


state 194

    (104) when -> WHEN comparation .
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations

    WHEN            reduce using rule 104 (when -> WHEN comparation .)
    END             reduce using rule 104 (when -> WHEN comparation .)
    ELSE            reduce using rule 104 (when -> WHEN comparation .)
    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98


state 195

    (105) when -> WHEN comparations .

    WHEN            reduce using rule 105 (when -> WHEN comparations .)
    END             reduce using rule 105 (when -> WHEN comparations .)
    ELSE            reduce using rule 105 (when -> WHEN comparations .)


state 196

    (11) literal -> boolean .
    (54) comparations -> boolean . AND boolean
    (55) comparations -> boolean . LOGIC_AND boolean
    (56) comparations -> boolean . OR boolean
    (57) comparations -> boolean . LOGIC_OR boolean

    THEN            reduce using rule 11 (literal -> boolean .)
    EQUAL           reduce using rule 11 (literal -> boolean .)
    NOT_EQ          reduce using rule 11 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    LESS_THAN       reduce using rule 11 (literal -> boolean .)
    GREATER_THAN    reduce using rule 11 (literal -> boolean .)
    WHEN            reduce using rule 11 (literal -> boolean .)
    END             reduce using rule 11 (literal -> boolean .)
    ELSE            reduce using rule 11 (literal -> boolean .)
    AND             shift and go to state 90
    LOGIC_AND       shift and go to state 91
    OR              shift and go to state 92
    LOGIC_OR        shift and go to state 93


state 197

    (110) control -> WHILE boolean DO statements . END

    END             shift and go to state 240


state 198

    (111) control -> WHILE comparation DO statements . END

    END             shift and go to state 241


state 199

    (112) control -> WHILE comparations DO statements . END

    END             shift and go to state 242


state 200

    (128) strucMatrix -> MATRIX L_BRACKET arrays . R_BRACKET

    R_BRACKET       shift and go to state 243


state 201

    (123) arrays -> array .
    (124) arrays -> array . COMMA arrays

    R_BRACKET       reduce using rule 123 (arrays -> array .)
    COMMA           shift and go to state 244


state 202

    (129) strucSet -> SET PERIOD NEW .
    (130) strucSet -> SET PERIOD NEW . L_PAREN R_PAREN
    (131) strucSet -> SET PERIOD NEW . L_PAREN array R_PAREN

    ID              reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    DEF             reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    IF              reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    UNLESS          reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    CASE            reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    WHILE           reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    COMPLEX         reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    RATIONAL        reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    FLOAT           reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    INTEGER         reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    $end            reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    END             reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    RETURN          reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    ELSE            reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    ELSIF           reduce using rule 129 (strucSet -> SET PERIOD NEW .)
    L_PAREN         shift and go to state 245


state 203

    (120) array -> L_BRACKET literals . R_BRACKET

    R_BRACKET       shift and go to state 246


state 204

    (121) array -> L_BRACKET ids . R_BRACKET

    R_BRACKET       shift and go to state 247


state 205

    (122) array -> L_BRACKET elements . R_BRACKET

    R_BRACKET       shift and go to state 248


state 206

    (8) ids -> ID .
    (9) ids -> ID . COMMA ids
    (113) element -> ID .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for R_BRACKET resolved using rule 8 (ids -> ID .)
    R_BRACKET       reduce using rule 8 (ids -> ID .)
    COMMA           shift and go to state 249

  ! COMMA           [ reduce using rule 113 (element -> ID .) ]
  ! R_BRACKET       [ reduce using rule 113 (element -> ID .) ]


state 207

    (118) elements -> element .
    (119) elements -> element . COMMA elements

    R_BRACKET       reduce using rule 118 (elements -> element .)
    COMMA           shift and go to state 250


state 208

    (10) literal -> STRING .
    (114) element -> STRING .
    (148) range -> STRING . ELLIPSIS STRING
    (149) range -> STRING . DOUBLE_PERIOD STRING

  ! reduce/reduce conflict for COMMA resolved using rule 10 (literal -> STRING .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 10 (literal -> STRING .)
    COMMA           reduce using rule 10 (literal -> STRING .)
    R_BRACKET       reduce using rule 10 (literal -> STRING .)
    ELLIPSIS        shift and go to state 112
    DOUBLE_PERIOD   shift and go to state 113

  ! COMMA           [ reduce using rule 114 (element -> STRING .) ]
  ! R_BRACKET       [ reduce using rule 114 (element -> STRING .) ]


state 209

    (11) literal -> boolean .
    (115) element -> boolean .

  ! reduce/reduce conflict for COMMA resolved using rule 11 (literal -> boolean .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 11 (literal -> boolean .)
    COMMA           reduce using rule 11 (literal -> boolean .)
    R_BRACKET       reduce using rule 11 (literal -> boolean .)

  ! COMMA           [ reduce using rule 115 (element -> boolean .) ]
  ! R_BRACKET       [ reduce using rule 115 (element -> boolean .) ]


state 210

    (12) literal -> numeric .
    (116) element -> numeric .

  ! reduce/reduce conflict for COMMA resolved using rule 12 (literal -> numeric .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 12 (literal -> numeric .)
    COMMA           reduce using rule 12 (literal -> numeric .)
    R_BRACKET       reduce using rule 12 (literal -> numeric .)

  ! COMMA           [ reduce using rule 116 (element -> numeric .) ]
  ! R_BRACKET       [ reduce using rule 116 (element -> numeric .) ]


state 211

    (13) literal -> range .
    (117) element -> range .

  ! reduce/reduce conflict for COMMA resolved using rule 13 (literal -> range .)
  ! reduce/reduce conflict for R_BRACKET resolved using rule 13 (literal -> range .)
    COMMA           reduce using rule 13 (literal -> range .)
    R_BRACKET       reduce using rule 13 (literal -> range .)

  ! COMMA           [ reduce using rule 117 (element -> range .) ]
  ! R_BRACKET       [ reduce using rule 117 (element -> range .) ]


state 212

    (133) strucHash -> HASH PERIOD NEW .
    (134) strucHash -> HASH PERIOD NEW . L_BRACE R_BRACE
    (135) strucHash -> HASH PERIOD NEW . L_BRACE hashelems R_BRACE

    ID              reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    DEF             reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    IF              reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    UNLESS          reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    CASE            reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    WHILE           reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    COMPLEX         reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    RATIONAL        reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    FLOAT           reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    INTEGER         reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    $end            reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    END             reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    RETURN          reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    ELSE            reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    ELSIF           reduce using rule 133 (strucHash -> HASH PERIOD NEW .)
    L_BRACE         shift and go to state 251


state 213

    (73) function -> DEF ID L_PAREN literals R_PAREN . statements END
    (76) function -> DEF ID L_PAREN literals R_PAREN . statements RETURN ID END
    (79) function -> DEF ID L_PAREN literals R_PAREN . statements RETURN literal END
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 252
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 214

    (74) function -> DEF ID L_PAREN R_PAREN statements . END
    (77) function -> DEF ID L_PAREN R_PAREN statements . RETURN ID END
    (80) function -> DEF ID L_PAREN R_PAREN statements . RETURN literal END

    END             shift and go to state 253
    RETURN          shift and go to state 254


state 215

    (15) literals -> literal COMMA . literals
    (14) literals -> . literal
    (15) literals -> . literal COMMA literals
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 138
    literals                       shift and go to state 255
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 216

    (78) function -> DEF ID statements RETURN ID . END

    END             shift and go to state 256


state 217

    (81) function -> DEF ID statements RETURN literal . END

    END             shift and go to state 257


state 218

    (93) control -> IF boolean statements elses END .

    ID              reduce using rule 93 (control -> IF boolean statements elses END .)
    DEF             reduce using rule 93 (control -> IF boolean statements elses END .)
    IF              reduce using rule 93 (control -> IF boolean statements elses END .)
    UNLESS          reduce using rule 93 (control -> IF boolean statements elses END .)
    CASE            reduce using rule 93 (control -> IF boolean statements elses END .)
    WHILE           reduce using rule 93 (control -> IF boolean statements elses END .)
    COMPLEX         reduce using rule 93 (control -> IF boolean statements elses END .)
    RATIONAL        reduce using rule 93 (control -> IF boolean statements elses END .)
    FLOAT           reduce using rule 93 (control -> IF boolean statements elses END .)
    INTEGER         reduce using rule 93 (control -> IF boolean statements elses END .)
    $end            reduce using rule 93 (control -> IF boolean statements elses END .)
    END             reduce using rule 93 (control -> IF boolean statements elses END .)
    RETURN          reduce using rule 93 (control -> IF boolean statements elses END .)
    ELSE            reduce using rule 93 (control -> IF boolean statements elses END .)
    ELSIF           reduce using rule 93 (control -> IF boolean statements elses END .)


state 219

    (89) elses -> elsif elses .

    END             reduce using rule 89 (elses -> elsif elses .)


state 220

    (82) else -> ELSE boolean . statements
    (54) comparations -> boolean . AND boolean
    (55) comparations -> boolean . LOGIC_AND boolean
    (56) comparations -> boolean . OR boolean
    (57) comparations -> boolean . LOGIC_OR boolean
    (11) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    AND             shift and go to state 90
    LOGIC_AND       shift and go to state 91
    OR              shift and go to state 92
    LOGIC_OR        shift and go to state 93
    EQUAL           reduce using rule 11 (literal -> boolean .)
    NOT_EQ          reduce using rule 11 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    LESS_THAN       reduce using rule 11 (literal -> boolean .)
    GREATER_THAN    reduce using rule 11 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 258
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 221

    (83) else -> ELSE comparation . statements
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 259
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 222

    (84) else -> ELSE comparations . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 260
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 223

    (85) elsif -> ELSIF boolean . statements
    (54) comparations -> boolean . AND boolean
    (55) comparations -> boolean . LOGIC_AND boolean
    (56) comparations -> boolean . OR boolean
    (57) comparations -> boolean . LOGIC_OR boolean
    (11) literal -> boolean .
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    AND             shift and go to state 90
    LOGIC_AND       shift and go to state 91
    OR              shift and go to state 92
    LOGIC_OR        shift and go to state 93
    EQUAL           reduce using rule 11 (literal -> boolean .)
    NOT_EQ          reduce using rule 11 (literal -> boolean .)
    LT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    GT_OR_EQ        reduce using rule 11 (literal -> boolean .)
    LESS_THAN       reduce using rule 11 (literal -> boolean .)
    GREATER_THAN    reduce using rule 11 (literal -> boolean .)
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 261
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 224

    (86) elsif -> ELSIF comparation . statements
    (46) comparations -> comparation . AND comparation
    (47) comparations -> comparation . LOGIC_AND comparation
    (48) comparations -> comparation . AND comparations
    (49) comparations -> comparation . LOGIC_AND comparations
    (50) comparations -> comparation . OR comparation
    (51) comparations -> comparation . LOGIC_OR comparation
    (52) comparations -> comparation . OR comparations
    (53) comparations -> comparation . LOGIC_OR comparations
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    AND             shift and go to state 95
    LOGIC_AND       shift and go to state 96
    OR              shift and go to state 97
    LOGIC_OR        shift and go to state 98
    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 262
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 225

    (87) elsif -> ELSIF comparations . statements
    (6) statements -> . statement
    (7) statements -> . statement statements
    (2) statement -> . assignment
    (3) statement -> . function
    (4) statement -> . control
    (5) statement -> . arithmetic
    (58) assignment -> . ID ASSIGN ID
    (59) assignment -> . ID ASSIGN NIL
    (60) assignment -> . ID ASSIGN struc
    (61) assignment -> . ID ASSIGN literal
    (62) assignment -> . ID ASSIGN arithmetic
    (63) assignment -> . ID ADD_ASSIGN ID
    (64) assignment -> . ID ADD_ASSIGN numeric
    (65) assignment -> . ID SUBS_ASSIGN ID
    (66) assignment -> . ID SUBS_ASSIGN numeric
    (67) assignment -> . ID MULT_ASSIGN ID
    (68) assignment -> . ID MULT_ASSIGN numeric
    (69) assignment -> . ID DIV_ASSIGN ID
    (70) assignment -> . ID DIV_ASSIGN numeric
    (71) assignment -> . ID MOD_ASSIGN ID
    (72) assignment -> . ID MOD_ASSIGN numeric
    (73) function -> . DEF ID L_PAREN literals R_PAREN statements END
    (74) function -> . DEF ID L_PAREN R_PAREN statements END
    (75) function -> . DEF ID statements END
    (76) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN ID END
    (77) function -> . DEF ID L_PAREN R_PAREN statements RETURN ID END
    (78) function -> . DEF ID statements RETURN ID END
    (79) function -> . DEF ID L_PAREN literals R_PAREN statements RETURN literal END
    (80) function -> . DEF ID L_PAREN R_PAREN statements RETURN literal END
    (81) function -> . DEF ID statements RETURN literal END
    (90) control -> . IF boolean statements END
    (91) control -> . IF comparation statements END
    (92) control -> . IF comparations statements END
    (93) control -> . IF boolean statements elses END
    (94) control -> . IF comparation statements elses END
    (95) control -> . IF comparations statements elses END
    (96) control -> . UNLESS boolean COLON statements END
    (97) control -> . UNLESS comparation COLON statements END
    (98) control -> . UNLESS comparations COLON statements END
    (99) control -> . UNLESS boolean statements elses END
    (100) control -> . UNLESS comparation statements elses END
    (101) control -> . UNLESS comparations statements elses END
    (108) control -> . CASE ID whens else END
    (109) control -> . CASE ID whens END
    (110) control -> . WHILE boolean DO statements END
    (111) control -> . WHILE comparation DO statements END
    (112) control -> . WHILE comparations DO statements END
    (22) arithmetic -> . numeric PLUS numeric
    (23) arithmetic -> . numeric PLUS arithmetic
    (24) arithmetic -> . numeric MINUS numeric
    (25) arithmetic -> . numeric MINUS arithmetic
    (26) arithmetic -> . numeric EXPO numeric
    (27) arithmetic -> . numeric EXPO arithmetic
    (28) arithmetic -> . numeric MULT numeric
    (29) arithmetic -> . numeric MULT arithmetic
    (30) arithmetic -> . numeric DIV numeric
    (31) arithmetic -> . numeric DIV arithmetic
    (32) arithmetic -> . numeric MODULO numeric
    (33) arithmetic -> . numeric MODULO arithmetic
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER

    ID              shift and go to state 8
    DEF             shift and go to state 10
    IF              shift and go to state 11
    UNLESS          shift and go to state 12
    CASE            shift and go to state 13
    WHILE           shift and go to state 14
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    statements                     shift and go to state 263
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    function                       shift and go to state 5
    control                        shift and go to state 6
    arithmetic                     shift and go to state 7
    numeric                        shift and go to state 9

state 226

    (94) control -> IF comparation statements elses END .

    ID              reduce using rule 94 (control -> IF comparation statements elses END .)
    DEF             reduce using rule 94 (control -> IF comparation statements elses END .)
    IF              reduce using rule 94 (control -> IF comparation statements elses END .)
    UNLESS          reduce using rule 94 (control -> IF comparation statements elses END .)
    CASE            reduce using rule 94 (control -> IF comparation statements elses END .)
    WHILE           reduce using rule 94 (control -> IF comparation statements elses END .)
    COMPLEX         reduce using rule 94 (control -> IF comparation statements elses END .)
    RATIONAL        reduce using rule 94 (control -> IF comparation statements elses END .)
    FLOAT           reduce using rule 94 (control -> IF comparation statements elses END .)
    INTEGER         reduce using rule 94 (control -> IF comparation statements elses END .)
    $end            reduce using rule 94 (control -> IF comparation statements elses END .)
    END             reduce using rule 94 (control -> IF comparation statements elses END .)
    RETURN          reduce using rule 94 (control -> IF comparation statements elses END .)
    ELSE            reduce using rule 94 (control -> IF comparation statements elses END .)
    ELSIF           reduce using rule 94 (control -> IF comparation statements elses END .)


state 227

    (95) control -> IF comparations statements elses END .

    ID              reduce using rule 95 (control -> IF comparations statements elses END .)
    DEF             reduce using rule 95 (control -> IF comparations statements elses END .)
    IF              reduce using rule 95 (control -> IF comparations statements elses END .)
    UNLESS          reduce using rule 95 (control -> IF comparations statements elses END .)
    CASE            reduce using rule 95 (control -> IF comparations statements elses END .)
    WHILE           reduce using rule 95 (control -> IF comparations statements elses END .)
    COMPLEX         reduce using rule 95 (control -> IF comparations statements elses END .)
    RATIONAL        reduce using rule 95 (control -> IF comparations statements elses END .)
    FLOAT           reduce using rule 95 (control -> IF comparations statements elses END .)
    INTEGER         reduce using rule 95 (control -> IF comparations statements elses END .)
    $end            reduce using rule 95 (control -> IF comparations statements elses END .)
    END             reduce using rule 95 (control -> IF comparations statements elses END .)
    RETURN          reduce using rule 95 (control -> IF comparations statements elses END .)
    ELSE            reduce using rule 95 (control -> IF comparations statements elses END .)
    ELSIF           reduce using rule 95 (control -> IF comparations statements elses END .)


state 228

    (142) range -> L_PAREN INTEGER ELLIPSIS INTEGER . R_PAREN

    R_PAREN         shift and go to state 264


state 229

    (143) range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER . R_PAREN

    R_PAREN         shift and go to state 265


state 230

    (146) range -> L_PAREN STRING ELLIPSIS STRING .

    EQUAL           reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    NOT_EQ          reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LT_OR_EQ        reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    GT_OR_EQ        reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LESS_THAN       reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    GREATER_THAN    reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ID              reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    DEF             reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    IF              reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    UNLESS          reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    CASE            reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    WHILE           reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COMPLEX         reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    RATIONAL        reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    FLOAT           reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    INTEGER         reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    $end            reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    END             reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    RETURN          reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ELSE            reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    ELSIF           reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COMMA           reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_PAREN         reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    AND             reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LOGIC_AND       reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    OR              reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    LOGIC_OR        reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    COLON           reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    DO              reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    WHEN            reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    THEN            reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_BRACKET       reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)
    R_BRACE         reduce using rule 146 (range -> L_PAREN STRING ELLIPSIS STRING .)


state 231

    (147) range -> L_PAREN STRING DOUBLE_PERIOD STRING .

    EQUAL           reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    NOT_EQ          reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LT_OR_EQ        reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    GT_OR_EQ        reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LESS_THAN       reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    GREATER_THAN    reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ID              reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    DEF             reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    IF              reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    UNLESS          reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    CASE            reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    WHILE           reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COMPLEX         reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    RATIONAL        reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    FLOAT           reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    INTEGER         reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    $end            reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    END             reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    RETURN          reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ELSE            reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    ELSIF           reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COMMA           reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_PAREN         reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    AND             reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LOGIC_AND       reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    OR              reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    LOGIC_OR        reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    COLON           reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    DO              reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    WHEN            reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    THEN            reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_BRACKET       reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)
    R_BRACE         reduce using rule 147 (range -> L_PAREN STRING DOUBLE_PERIOD STRING .)


state 232

    (96) control -> UNLESS boolean COLON statements END .

    ID              reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    DEF             reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    IF              reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    UNLESS          reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    CASE            reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    WHILE           reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    COMPLEX         reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    RATIONAL        reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    FLOAT           reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    INTEGER         reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    $end            reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    END             reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    RETURN          reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    ELSE            reduce using rule 96 (control -> UNLESS boolean COLON statements END .)
    ELSIF           reduce using rule 96 (control -> UNLESS boolean COLON statements END .)


state 233

    (99) control -> UNLESS boolean statements elses END .

    ID              reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    DEF             reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    IF              reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    UNLESS          reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    CASE            reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    WHILE           reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    COMPLEX         reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    RATIONAL        reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    FLOAT           reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    INTEGER         reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    $end            reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    END             reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    RETURN          reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    ELSE            reduce using rule 99 (control -> UNLESS boolean statements elses END .)
    ELSIF           reduce using rule 99 (control -> UNLESS boolean statements elses END .)


state 234

    (97) control -> UNLESS comparation COLON statements END .

    ID              reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    DEF             reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    IF              reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    UNLESS          reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    CASE            reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    WHILE           reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    COMPLEX         reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    RATIONAL        reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    FLOAT           reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    INTEGER         reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    $end            reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    END             reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    RETURN          reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    ELSE            reduce using rule 97 (control -> UNLESS comparation COLON statements END .)
    ELSIF           reduce using rule 97 (control -> UNLESS comparation COLON statements END .)


state 235

    (100) control -> UNLESS comparation statements elses END .

    ID              reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    DEF             reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    IF              reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    UNLESS          reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    CASE            reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    WHILE           reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    COMPLEX         reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    RATIONAL        reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    FLOAT           reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    INTEGER         reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    $end            reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    END             reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    RETURN          reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    ELSE            reduce using rule 100 (control -> UNLESS comparation statements elses END .)
    ELSIF           reduce using rule 100 (control -> UNLESS comparation statements elses END .)


state 236

    (98) control -> UNLESS comparations COLON statements END .

    ID              reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    DEF             reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    IF              reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    UNLESS          reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    CASE            reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    WHILE           reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    COMPLEX         reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    RATIONAL        reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    FLOAT           reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    INTEGER         reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    $end            reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    END             reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    RETURN          reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    ELSE            reduce using rule 98 (control -> UNLESS comparations COLON statements END .)
    ELSIF           reduce using rule 98 (control -> UNLESS comparations COLON statements END .)


state 237

    (101) control -> UNLESS comparations statements elses END .

    ID              reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    DEF             reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    IF              reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    UNLESS          reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    CASE            reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    WHILE           reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    COMPLEX         reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    RATIONAL        reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    FLOAT           reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    INTEGER         reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    $end            reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    END             reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    RETURN          reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    ELSE            reduce using rule 101 (control -> UNLESS comparations statements elses END .)
    ELSIF           reduce using rule 101 (control -> UNLESS comparations statements elses END .)


state 238

    (108) control -> CASE ID whens else END .

    ID              reduce using rule 108 (control -> CASE ID whens else END .)
    DEF             reduce using rule 108 (control -> CASE ID whens else END .)
    IF              reduce using rule 108 (control -> CASE ID whens else END .)
    UNLESS          reduce using rule 108 (control -> CASE ID whens else END .)
    CASE            reduce using rule 108 (control -> CASE ID whens else END .)
    WHILE           reduce using rule 108 (control -> CASE ID whens else END .)
    COMPLEX         reduce using rule 108 (control -> CASE ID whens else END .)
    RATIONAL        reduce using rule 108 (control -> CASE ID whens else END .)
    FLOAT           reduce using rule 108 (control -> CASE ID whens else END .)
    INTEGER         reduce using rule 108 (control -> CASE ID whens else END .)
    $end            reduce using rule 108 (control -> CASE ID whens else END .)
    END             reduce using rule 108 (control -> CASE ID whens else END .)
    RETURN          reduce using rule 108 (control -> CASE ID whens else END .)
    ELSE            reduce using rule 108 (control -> CASE ID whens else END .)
    ELSIF           reduce using rule 108 (control -> CASE ID whens else END .)


state 239

    (103) when -> WHEN literal THEN .

    WHEN            reduce using rule 103 (when -> WHEN literal THEN .)
    END             reduce using rule 103 (when -> WHEN literal THEN .)
    ELSE            reduce using rule 103 (when -> WHEN literal THEN .)


state 240

    (110) control -> WHILE boolean DO statements END .

    ID              reduce using rule 110 (control -> WHILE boolean DO statements END .)
    DEF             reduce using rule 110 (control -> WHILE boolean DO statements END .)
    IF              reduce using rule 110 (control -> WHILE boolean DO statements END .)
    UNLESS          reduce using rule 110 (control -> WHILE boolean DO statements END .)
    CASE            reduce using rule 110 (control -> WHILE boolean DO statements END .)
    WHILE           reduce using rule 110 (control -> WHILE boolean DO statements END .)
    COMPLEX         reduce using rule 110 (control -> WHILE boolean DO statements END .)
    RATIONAL        reduce using rule 110 (control -> WHILE boolean DO statements END .)
    FLOAT           reduce using rule 110 (control -> WHILE boolean DO statements END .)
    INTEGER         reduce using rule 110 (control -> WHILE boolean DO statements END .)
    $end            reduce using rule 110 (control -> WHILE boolean DO statements END .)
    END             reduce using rule 110 (control -> WHILE boolean DO statements END .)
    RETURN          reduce using rule 110 (control -> WHILE boolean DO statements END .)
    ELSE            reduce using rule 110 (control -> WHILE boolean DO statements END .)
    ELSIF           reduce using rule 110 (control -> WHILE boolean DO statements END .)


state 241

    (111) control -> WHILE comparation DO statements END .

    ID              reduce using rule 111 (control -> WHILE comparation DO statements END .)
    DEF             reduce using rule 111 (control -> WHILE comparation DO statements END .)
    IF              reduce using rule 111 (control -> WHILE comparation DO statements END .)
    UNLESS          reduce using rule 111 (control -> WHILE comparation DO statements END .)
    CASE            reduce using rule 111 (control -> WHILE comparation DO statements END .)
    WHILE           reduce using rule 111 (control -> WHILE comparation DO statements END .)
    COMPLEX         reduce using rule 111 (control -> WHILE comparation DO statements END .)
    RATIONAL        reduce using rule 111 (control -> WHILE comparation DO statements END .)
    FLOAT           reduce using rule 111 (control -> WHILE comparation DO statements END .)
    INTEGER         reduce using rule 111 (control -> WHILE comparation DO statements END .)
    $end            reduce using rule 111 (control -> WHILE comparation DO statements END .)
    END             reduce using rule 111 (control -> WHILE comparation DO statements END .)
    RETURN          reduce using rule 111 (control -> WHILE comparation DO statements END .)
    ELSE            reduce using rule 111 (control -> WHILE comparation DO statements END .)
    ELSIF           reduce using rule 111 (control -> WHILE comparation DO statements END .)


state 242

    (112) control -> WHILE comparations DO statements END .

    ID              reduce using rule 112 (control -> WHILE comparations DO statements END .)
    DEF             reduce using rule 112 (control -> WHILE comparations DO statements END .)
    IF              reduce using rule 112 (control -> WHILE comparations DO statements END .)
    UNLESS          reduce using rule 112 (control -> WHILE comparations DO statements END .)
    CASE            reduce using rule 112 (control -> WHILE comparations DO statements END .)
    WHILE           reduce using rule 112 (control -> WHILE comparations DO statements END .)
    COMPLEX         reduce using rule 112 (control -> WHILE comparations DO statements END .)
    RATIONAL        reduce using rule 112 (control -> WHILE comparations DO statements END .)
    FLOAT           reduce using rule 112 (control -> WHILE comparations DO statements END .)
    INTEGER         reduce using rule 112 (control -> WHILE comparations DO statements END .)
    $end            reduce using rule 112 (control -> WHILE comparations DO statements END .)
    END             reduce using rule 112 (control -> WHILE comparations DO statements END .)
    RETURN          reduce using rule 112 (control -> WHILE comparations DO statements END .)
    ELSE            reduce using rule 112 (control -> WHILE comparations DO statements END .)
    ELSIF           reduce using rule 112 (control -> WHILE comparations DO statements END .)


state 243

    (128) strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .

    ID              reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    DEF             reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    IF              reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    UNLESS          reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    CASE            reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    WHILE           reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    COMPLEX         reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    RATIONAL        reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    FLOAT           reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    INTEGER         reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    $end            reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    END             reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    RETURN          reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    ELSE            reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)
    ELSIF           reduce using rule 128 (strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET .)


state 244

    (124) arrays -> array COMMA . arrays
    (123) arrays -> . array
    (124) arrays -> . array COMMA arrays
    (120) array -> . L_BRACKET literals R_BRACKET
    (121) array -> . L_BRACKET ids R_BRACKET
    (122) array -> . L_BRACKET elements R_BRACKET

    L_BRACKET       shift and go to state 133

    array                          shift and go to state 201
    arrays                         shift and go to state 266

state 245

    (130) strucSet -> SET PERIOD NEW L_PAREN . R_PAREN
    (131) strucSet -> SET PERIOD NEW L_PAREN . array R_PAREN
    (120) array -> . L_BRACKET literals R_BRACKET
    (121) array -> . L_BRACKET ids R_BRACKET
    (122) array -> . L_BRACKET elements R_BRACKET

    R_PAREN         shift and go to state 267
    L_BRACKET       shift and go to state 133

    array                          shift and go to state 268

state 246

    (120) array -> L_BRACKET literals R_BRACKET .

    ID              reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    DEF             reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    IF              reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    UNLESS          reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    CASE            reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    WHILE           reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    COMPLEX         reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    RATIONAL        reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    FLOAT           reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    INTEGER         reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    $end            reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    END             reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    RETURN          reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    ELSE            reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    ELSIF           reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    COMMA           reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    R_BRACKET       reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)
    R_PAREN         reduce using rule 120 (array -> L_BRACKET literals R_BRACKET .)


state 247

    (121) array -> L_BRACKET ids R_BRACKET .

    ID              reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    DEF             reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    IF              reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    UNLESS          reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    CASE            reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    WHILE           reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    COMPLEX         reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    RATIONAL        reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    FLOAT           reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    INTEGER         reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    $end            reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    END             reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    RETURN          reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    ELSE            reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    ELSIF           reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    COMMA           reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    R_BRACKET       reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)
    R_PAREN         reduce using rule 121 (array -> L_BRACKET ids R_BRACKET .)


state 248

    (122) array -> L_BRACKET elements R_BRACKET .

    ID              reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    DEF             reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    IF              reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    UNLESS          reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    CASE            reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    WHILE           reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    COMPLEX         reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    RATIONAL        reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    FLOAT           reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    INTEGER         reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    $end            reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    END             reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    RETURN          reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    ELSE            reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    ELSIF           reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    COMMA           reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    R_BRACKET       reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)
    R_PAREN         reduce using rule 122 (array -> L_BRACKET elements R_BRACKET .)


state 249

    (9) ids -> ID COMMA . ids
    (8) ids -> . ID
    (9) ids -> . ID COMMA ids

    ID              shift and go to state 269

    ids                            shift and go to state 270

state 250

    (119) elements -> element COMMA . elements
    (118) elements -> . element
    (119) elements -> . element COMMA elements
    (113) element -> . ID
    (114) element -> . STRING
    (115) element -> . boolean
    (116) element -> . numeric
    (117) element -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 272
    STRING          shift and go to state 273
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    element                        shift and go to state 207
    elements                       shift and go to state 271
    boolean                        shift and go to state 274
    numeric                        shift and go to state 275
    range                          shift and go to state 276

state 251

    (134) strucHash -> HASH PERIOD NEW L_BRACE . R_BRACE
    (135) strucHash -> HASH PERIOD NEW L_BRACE . hashelems R_BRACE
    (140) hashelems -> . hashelem COMMA hashelem
    (141) hashelems -> . hashelem COMMA hashelems
    (137) hashelem -> . COLON ID RW_DOUBLE_ARROW literal
    (138) hashelem -> . ID COLON literal
    (139) hashelem -> . STRING COLON literal

    R_BRACE         shift and go to state 277
    COLON           shift and go to state 280
    ID              shift and go to state 281
    STRING          shift and go to state 282

    hashelems                      shift and go to state 278
    hashelem                       shift and go to state 279

state 252

    (73) function -> DEF ID L_PAREN literals R_PAREN statements . END
    (76) function -> DEF ID L_PAREN literals R_PAREN statements . RETURN ID END
    (79) function -> DEF ID L_PAREN literals R_PAREN statements . RETURN literal END

    END             shift and go to state 283
    RETURN          shift and go to state 284


state 253

    (74) function -> DEF ID L_PAREN R_PAREN statements END .

    ID              reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    DEF             reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    IF              reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    UNLESS          reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    CASE            reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    WHILE           reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    COMPLEX         reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    RATIONAL        reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    FLOAT           reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    INTEGER         reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    $end            reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    END             reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    RETURN          reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    ELSE            reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)
    ELSIF           reduce using rule 74 (function -> DEF ID L_PAREN R_PAREN statements END .)


state 254

    (77) function -> DEF ID L_PAREN R_PAREN statements RETURN . ID END
    (80) function -> DEF ID L_PAREN R_PAREN statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 285
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 286
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 255

    (15) literals -> literal COMMA literals .

    R_PAREN         reduce using rule 15 (literals -> literal COMMA literals .)
    R_BRACKET       reduce using rule 15 (literals -> literal COMMA literals .)


state 256

    (78) function -> DEF ID statements RETURN ID END .

    ID              reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    DEF             reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    IF              reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    UNLESS          reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    CASE            reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    WHILE           reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    COMPLEX         reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    RATIONAL        reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    FLOAT           reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    INTEGER         reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    $end            reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    END             reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    RETURN          reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    ELSE            reduce using rule 78 (function -> DEF ID statements RETURN ID END .)
    ELSIF           reduce using rule 78 (function -> DEF ID statements RETURN ID END .)


state 257

    (81) function -> DEF ID statements RETURN literal END .

    ID              reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    DEF             reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    IF              reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    UNLESS          reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    CASE            reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    WHILE           reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    COMPLEX         reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    RATIONAL        reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    FLOAT           reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    INTEGER         reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    $end            reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    END             reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    RETURN          reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    ELSE            reduce using rule 81 (function -> DEF ID statements RETURN literal END .)
    ELSIF           reduce using rule 81 (function -> DEF ID statements RETURN literal END .)


state 258

    (82) else -> ELSE boolean statements .

    END             reduce using rule 82 (else -> ELSE boolean statements .)


state 259

    (83) else -> ELSE comparation statements .

    END             reduce using rule 83 (else -> ELSE comparation statements .)


state 260

    (84) else -> ELSE comparations statements .

    END             reduce using rule 84 (else -> ELSE comparations statements .)


state 261

    (85) elsif -> ELSIF boolean statements .

    ELSE            reduce using rule 85 (elsif -> ELSIF boolean statements .)
    ELSIF           reduce using rule 85 (elsif -> ELSIF boolean statements .)


state 262

    (86) elsif -> ELSIF comparation statements .

    ELSE            reduce using rule 86 (elsif -> ELSIF comparation statements .)
    ELSIF           reduce using rule 86 (elsif -> ELSIF comparation statements .)


state 263

    (87) elsif -> ELSIF comparations statements .

    ELSE            reduce using rule 87 (elsif -> ELSIF comparations statements .)
    ELSIF           reduce using rule 87 (elsif -> ELSIF comparations statements .)


state 264

    (142) range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .

    EQUAL           reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    NOT_EQ          reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LT_OR_EQ        reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    GT_OR_EQ        reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LESS_THAN       reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    GREATER_THAN    reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ID              reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    DEF             reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    IF              reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    UNLESS          reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    CASE            reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    WHILE           reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COMPLEX         reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    RATIONAL        reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    FLOAT           reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    INTEGER         reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    $end            reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    END             reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    RETURN          reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ELSE            reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    ELSIF           reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COMMA           reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_PAREN         reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    AND             reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LOGIC_AND       reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    OR              reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    LOGIC_OR        reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    COLON           reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    DO              reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    WHEN            reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    THEN            reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_BRACKET       reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)
    R_BRACE         reduce using rule 142 (range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN .)


state 265

    (143) range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .

    EQUAL           reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    NOT_EQ          reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LT_OR_EQ        reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    GT_OR_EQ        reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LESS_THAN       reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    GREATER_THAN    reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ID              reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    DEF             reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    IF              reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    UNLESS          reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    CASE            reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    WHILE           reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COMPLEX         reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    RATIONAL        reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    FLOAT           reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    INTEGER         reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    $end            reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    END             reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    RETURN          reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ELSE            reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    ELSIF           reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COMMA           reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_PAREN         reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    AND             reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LOGIC_AND       reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    OR              reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    LOGIC_OR        reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    COLON           reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    DO              reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    WHEN            reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    THEN            reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_BRACKET       reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)
    R_BRACE         reduce using rule 143 (range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN .)


state 266

    (124) arrays -> array COMMA arrays .

    R_BRACKET       reduce using rule 124 (arrays -> array COMMA arrays .)


state 267

    (130) strucSet -> SET PERIOD NEW L_PAREN R_PAREN .

    ID              reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    DEF             reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    IF              reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    UNLESS          reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    CASE            reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    WHILE           reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    COMPLEX         reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    RATIONAL        reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    FLOAT           reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    INTEGER         reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    $end            reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    END             reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    RETURN          reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    ELSE            reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)
    ELSIF           reduce using rule 130 (strucSet -> SET PERIOD NEW L_PAREN R_PAREN .)


state 268

    (131) strucSet -> SET PERIOD NEW L_PAREN array . R_PAREN

    R_PAREN         shift and go to state 287


state 269

    (8) ids -> ID .
    (9) ids -> ID . COMMA ids

    R_BRACKET       reduce using rule 8 (ids -> ID .)
    COMMA           shift and go to state 249


state 270

    (9) ids -> ID COMMA ids .

    R_BRACKET       reduce using rule 9 (ids -> ID COMMA ids .)


state 271

    (119) elements -> element COMMA elements .

    R_BRACKET       reduce using rule 119 (elements -> element COMMA elements .)


state 272

    (113) element -> ID .

    COMMA           reduce using rule 113 (element -> ID .)
    R_BRACKET       reduce using rule 113 (element -> ID .)


state 273

    (114) element -> STRING .
    (148) range -> STRING . ELLIPSIS STRING
    (149) range -> STRING . DOUBLE_PERIOD STRING

    COMMA           reduce using rule 114 (element -> STRING .)
    R_BRACKET       reduce using rule 114 (element -> STRING .)
    ELLIPSIS        shift and go to state 112
    DOUBLE_PERIOD   shift and go to state 113


state 274

    (115) element -> boolean .

    COMMA           reduce using rule 115 (element -> boolean .)
    R_BRACKET       reduce using rule 115 (element -> boolean .)


state 275

    (116) element -> numeric .

    COMMA           reduce using rule 116 (element -> numeric .)
    R_BRACKET       reduce using rule 116 (element -> numeric .)


state 276

    (117) element -> range .

    COMMA           reduce using rule 117 (element -> range .)
    R_BRACKET       reduce using rule 117 (element -> range .)


state 277

    (134) strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .

    ID              reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    DEF             reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    IF              reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    UNLESS          reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    CASE            reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    WHILE           reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    COMPLEX         reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    RATIONAL        reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    FLOAT           reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    INTEGER         reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    $end            reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    END             reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    RETURN          reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    ELSE            reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)
    ELSIF           reduce using rule 134 (strucHash -> HASH PERIOD NEW L_BRACE R_BRACE .)


state 278

    (135) strucHash -> HASH PERIOD NEW L_BRACE hashelems . R_BRACE

    R_BRACE         shift and go to state 288


state 279

    (140) hashelems -> hashelem . COMMA hashelem
    (141) hashelems -> hashelem . COMMA hashelems

    COMMA           shift and go to state 289


state 280

    (137) hashelem -> COLON . ID RW_DOUBLE_ARROW literal

    ID              shift and go to state 290


state 281

    (138) hashelem -> ID . COLON literal

    COLON           shift and go to state 291


state 282

    (139) hashelem -> STRING . COLON literal

    COLON           shift and go to state 292


state 283

    (73) function -> DEF ID L_PAREN literals R_PAREN statements END .

    ID              reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    DEF             reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    IF              reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    UNLESS          reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    CASE            reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    WHILE           reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    COMPLEX         reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    RATIONAL        reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    FLOAT           reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    INTEGER         reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    $end            reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    END             reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    RETURN          reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    ELSE            reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)
    ELSIF           reduce using rule 73 (function -> DEF ID L_PAREN literals R_PAREN statements END .)


state 284

    (76) function -> DEF ID L_PAREN literals R_PAREN statements RETURN . ID END
    (79) function -> DEF ID L_PAREN literals R_PAREN statements RETURN . literal END
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    ID              shift and go to state 293
    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 294
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 285

    (77) function -> DEF ID L_PAREN R_PAREN statements RETURN ID . END

    END             shift and go to state 295


state 286

    (80) function -> DEF ID L_PAREN R_PAREN statements RETURN literal . END

    END             shift and go to state 296


state 287

    (131) strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .

    ID              reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    DEF             reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    IF              reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    UNLESS          reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    CASE            reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    WHILE           reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    COMPLEX         reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    RATIONAL        reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    FLOAT           reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    INTEGER         reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    $end            reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    END             reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    RETURN          reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    ELSE            reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)
    ELSIF           reduce using rule 131 (strucSet -> SET PERIOD NEW L_PAREN array R_PAREN .)


state 288

    (135) strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .

    ID              reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    DEF             reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    IF              reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    UNLESS          reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    CASE            reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    WHILE           reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    COMPLEX         reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    RATIONAL        reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    FLOAT           reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    INTEGER         reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    $end            reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    END             reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    RETURN          reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    ELSE            reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)
    ELSIF           reduce using rule 135 (strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE .)


state 289

    (140) hashelems -> hashelem COMMA . hashelem
    (141) hashelems -> hashelem COMMA . hashelems
    (137) hashelem -> . COLON ID RW_DOUBLE_ARROW literal
    (138) hashelem -> . ID COLON literal
    (139) hashelem -> . STRING COLON literal
    (140) hashelems -> . hashelem COMMA hashelem
    (141) hashelems -> . hashelem COMMA hashelems

    COLON           shift and go to state 280
    ID              shift and go to state 281
    STRING          shift and go to state 282

    hashelem                       shift and go to state 297
    hashelems                      shift and go to state 298

state 290

    (137) hashelem -> COLON ID . RW_DOUBLE_ARROW literal

    RW_DOUBLE_ARROW shift and go to state 299


state 291

    (138) hashelem -> ID COLON . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 300
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 292

    (139) hashelem -> STRING COLON . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 301
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 293

    (76) function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID . END

    END             shift and go to state 302


state 294

    (79) function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal . END

    END             shift and go to state 303


state 295

    (77) function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .

    ID              reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    DEF             reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    IF              reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    UNLESS          reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    CASE            reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    WHILE           reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    COMPLEX         reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    RATIONAL        reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    FLOAT           reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    INTEGER         reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    $end            reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    END             reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    RETURN          reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    ELSE            reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)
    ELSIF           reduce using rule 77 (function -> DEF ID L_PAREN R_PAREN statements RETURN ID END .)


state 296

    (80) function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .

    ID              reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    DEF             reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    IF              reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    UNLESS          reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    CASE            reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    WHILE           reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    COMPLEX         reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    RATIONAL        reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    FLOAT           reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    INTEGER         reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    $end            reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    END             reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    RETURN          reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    ELSE            reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)
    ELSIF           reduce using rule 80 (function -> DEF ID L_PAREN R_PAREN statements RETURN literal END .)


state 297

    (140) hashelems -> hashelem COMMA hashelem .
    (140) hashelems -> hashelem . COMMA hashelem
    (141) hashelems -> hashelem . COMMA hashelems

    R_BRACE         reduce using rule 140 (hashelems -> hashelem COMMA hashelem .)
    COMMA           shift and go to state 289


state 298

    (141) hashelems -> hashelem COMMA hashelems .

    R_BRACE         reduce using rule 141 (hashelems -> hashelem COMMA hashelems .)


state 299

    (137) hashelem -> COLON ID RW_DOUBLE_ARROW . literal
    (10) literal -> . STRING
    (11) literal -> . boolean
    (12) literal -> . numeric
    (13) literal -> . range
    (16) boolean -> . TRUE
    (17) boolean -> . FALSE
    (18) numeric -> . COMPLEX
    (19) numeric -> . RATIONAL
    (20) numeric -> . FLOAT
    (21) numeric -> . INTEGER
    (142) range -> . L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN
    (143) range -> . L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN
    (144) range -> . INTEGER ELLIPSIS INTEGER
    (145) range -> . INTEGER DOUBLE_PERIOD INTEGER
    (146) range -> . L_PAREN STRING ELLIPSIS STRING
    (147) range -> . L_PAREN STRING DOUBLE_PERIOD STRING
    (148) range -> . STRING ELLIPSIS STRING
    (149) range -> . STRING DOUBLE_PERIOD STRING

    STRING          shift and go to state 40
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    COMPLEX         shift and go to state 15
    RATIONAL        shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 43
    L_PAREN         shift and go to state 44

    literal                        shift and go to state 304
    boolean                        shift and go to state 60
    numeric                        shift and go to state 41
    range                          shift and go to state 42

state 300

    (138) hashelem -> ID COLON literal .

    COMMA           reduce using rule 138 (hashelem -> ID COLON literal .)
    R_BRACE         reduce using rule 138 (hashelem -> ID COLON literal .)


state 301

    (139) hashelem -> STRING COLON literal .

    COMMA           reduce using rule 139 (hashelem -> STRING COLON literal .)
    R_BRACE         reduce using rule 139 (hashelem -> STRING COLON literal .)


state 302

    (76) function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .

    ID              reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    DEF             reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    IF              reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    UNLESS          reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    CASE            reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    WHILE           reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    COMPLEX         reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    RATIONAL        reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    FLOAT           reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    INTEGER         reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    $end            reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    END             reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    RETURN          reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    ELSE            reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)
    ELSIF           reduce using rule 76 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END .)


state 303

    (79) function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .

    ID              reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    DEF             reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    IF              reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    UNLESS          reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    CASE            reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    WHILE           reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    COMPLEX         reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    RATIONAL        reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    FLOAT           reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    INTEGER         reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    $end            reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    END             reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    RETURN          reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    ELSE            reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)
    ELSIF           reduce using rule 79 (function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END .)


state 304

    (137) hashelem -> COLON ID RW_DOUBLE_ARROW literal .

    COMMA           reduce using rule 137 (hashelem -> COLON ID RW_DOUBLE_ARROW literal .)
    R_BRACE         reduce using rule 137 (hashelem -> COLON ID RW_DOUBLE_ARROW literal .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 206 resolved as shift
WARNING: reduce/reduce conflict in state 206 resolved using rule (ids -> ID)
WARNING: rejected rule (element -> ID) in state 206
WARNING: reduce/reduce conflict in state 208 resolved using rule (literal -> STRING)
WARNING: rejected rule (element -> STRING) in state 208
WARNING: reduce/reduce conflict in state 209 resolved using rule (literal -> boolean)
WARNING: rejected rule (element -> boolean) in state 209
WARNING: reduce/reduce conflict in state 210 resolved using rule (literal -> numeric)
WARNING: rejected rule (element -> numeric) in state 210
WARNING: reduce/reduce conflict in state 211 resolved using rule (literal -> range)
WARNING: rejected rule (element -> range) in state 211
