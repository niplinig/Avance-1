
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_ASSIGN AMPERSAND AND ARRAY ASSIGN AT_SIGN BEGIN BLOCK_COMMENT BREAK CASE CLASS COLON COMMA COMPLEX DEF DIV DIV_ASSIGN DO DOLLAR_SIGN DOUBLE_PERIOD ELLIPSIS ELSE ELSIF END ENSURE EQUAL EXPO FALSE FLOAT FOR GREATER_THAN GT_OR_EQ HASH ID IF IN INTEGER LESS_THAN LINE_COMMENT LOGIC_AND LOGIC_NOT LOGIC_OR LT_OR_EQ L_BRACE L_BRACKET L_PAREN MATRIX MINUS MODULO MOD_ASSIGN MULT MULT_ASSIGN NEW NEXT NIL NOT NOT_EQ OR PERIOD PLUS RATIONAL RETRY RETURN RW_ARROW RW_DOUBLE_ARROW R_BRACE R_BRACKET R_PAREN SELF SEMICOLON SET STRING SUBS_ASSIGN SUPER THEN TILDE TRUE UNDERSCORE UNLESS UNTIL VERTICAL_BAR WHEN WHILEinit : statementsstatement : assignment\n    | function\n    | control\n    | arithmetic\n    statements : statement\n    | statement statements\n    ids : ID\n    | ID COMMA ids\n    literal : STRING\n    | boolean\n    | numeric\n    | range\n    literals : literal\n    | literal COMMA literals\n    boolean : TRUE\n    | FALSE\n    numeric : COMPLEX\n    | RATIONAL\n    | FLOAT\n    | INTEGER\n    arithmetic : numeric PLUS numeric\n    | numeric PLUS arithmetic\n    | numeric MINUS numeric\n    | numeric MINUS arithmetic\n    | numeric EXPO numeric\n    | numeric EXPO arithmetic\n    | numeric MULT numeric\n    | numeric MULT arithmetic\n    | numeric DIV numeric\n    | numeric DIV arithmetic\n    | numeric MODULO numeric\n    | numeric MODULO arithmetic\n    comparation : literal EQUAL literal\n    | ID EQUAL ID\n    | literal NOT_EQ literal\n    | ID NOT_EQ ID\n    | literal LT_OR_EQ literal\n    | ID LT_OR_EQ ID\n    | literal GT_OR_EQ literal\n    | ID GT_OR_EQ ID\n    | literal LESS_THAN literal\n    | ID LESS_THAN ID\n    | literal GREATER_THAN literal\n    | ID GREATER_THAN ID\n    comparations : comparation AND comparation\n    | comparation LOGIC_AND comparation\n    | comparation AND comparations\n    | comparation LOGIC_AND comparations\n    | comparation OR comparation\n    | comparation LOGIC_OR comparation\n    | comparation OR comparations\n    | comparation LOGIC_OR comparations\n    | boolean AND boolean\n    | boolean LOGIC_AND boolean\n    | boolean OR boolean\n    | boolean LOGIC_OR boolean\n    assignment : ID ASSIGN ID\n    | ID ASSIGN NIL\n    | ID ASSIGN struc\n    | ID ASSIGN literal\n    | ID ASSIGN arithmetic\n    assignment : ID ADD_ASSIGN ID\n    | ID ADD_ASSIGN numeric\n    | ID SUBS_ASSIGN ID\n    | ID SUBS_ASSIGN numeric\n    | ID MULT_ASSIGN ID\n    | ID MULT_ASSIGN numeric\n    | ID DIV_ASSIGN ID\n    | ID DIV_ASSIGN numeric\n    | ID MOD_ASSIGN ID\n    | ID MOD_ASSIGN numeric\n    function : DEF ID L_PAREN literals R_PAREN statements END\n    | DEF ID L_PAREN R_PAREN statements END\n    | DEF ID statements END\n    | DEF ID L_PAREN literals R_PAREN statements RETURN ID END\n    | DEF ID L_PAREN R_PAREN statements RETURN ID END\n    | DEF ID statements RETURN ID END\n    | DEF ID L_PAREN literals R_PAREN statements RETURN literal END\n    | DEF ID L_PAREN R_PAREN statements RETURN literal END\n    | DEF ID statements RETURN literal END\n    else : ELSE boolean statements\n    | ELSE comparation statements\n    | ELSE comparations statements\n    elsif : ELSIF boolean statements\n    | ELSIF comparation statements\n    | ELSIF comparations statements\n    elses : else\n    | elsif elses\n    control : IF boolean statements END\n    | IF comparation statements END\n    | IF comparations statements END\n    | IF boolean statements elses END\n    | IF comparation statements elses END\n    | IF comparations statements elses END\n    control : UNLESS boolean COLON statements END\n    | UNLESS comparation COLON statements END\n    | UNLESS comparations COLON statements END\n    | UNLESS boolean statements elses END\n    | UNLESS comparation statements elses END\n    | UNLESS comparations statements elses END\n    when : WHEN literal\n    | WHEN literal THEN\n    | WHEN comparation\n    | WHEN comparations\n    whens : when\n    | when whens\n    control : CASE ID whens else END\n    | CASE ID whens END\n    control : WHILE boolean DO statements END\n    | WHILE comparation DO statements END\n    | WHILE comparations DO statements END\n    element : ID\n    | STRING\n    | boolean\n    | numeric\n    | range\n    elements : element\n    | element COMMA elements\n    array : L_BRACKET literals R_BRACKET\n    | L_BRACKET ids R_BRACKET\n    | L_BRACKET elements R_BRACKET\n    arrays : array\n    | array COMMA arrays\n    struc : strucMatrix\n    | strucSet\n    | strucHash\n    strucMatrix : MATRIX L_BRACKET arrays R_BRACKETstrucSet : SET PERIOD NEW\n    | SET PERIOD NEW L_PAREN R_PAREN\n    | SET PERIOD NEW L_PAREN array R_PAREN\n    | SET array\n    strucHash : HASH PERIOD NEW\n    | HASH PERIOD NEW L_BRACE R_BRACE\n    | HASH PERIOD NEW L_BRACE hashelems R_BRACE\n    | HASH array\n    hashelem : COLON ID RW_DOUBLE_ARROW literal\n    | ID COLON literal\n    | STRING COLON literal\n    hashelems : hashelem COMMA hashelem\n    | hashelem COMMA hashelems\n    range : L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN\n    | L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN\n    | INTEGER ELLIPSIS INTEGER\n    | INTEGER DOUBLE_PERIOD INTEGER\n    | L_PAREN STRING ELLIPSIS STRING\n    | L_PAREN STRING DOUBLE_PERIOD STRING\n    | STRING ELLIPSIS STRING\n    | STRING DOUBLE_PERIOD STRING\n    '
    
_lr_action_items = {'ID':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,97,98,106,107,108,109,110,111,118,120,122,126,127,128,129,132,133,135,137,139,140,141,145,146,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,249,250,251,253,254,256,257,264,265,267,277,280,283,284,287,288,289,295,296,302,303,],[8,8,-2,-3,-4,-5,32,39,39,48,39,-18,-19,-20,-21,52,65,67,69,71,73,8,8,8,8,-16,-17,-10,-12,-13,-21,8,8,8,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,39,39,39,39,170,171,172,173,174,175,8,8,8,39,8,8,8,-132,206,-136,8,-75,216,-90,39,39,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,8,-93,8,8,8,8,8,8,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,269,272,281,-74,285,-78,-81,-142,-143,-130,-134,290,-73,293,-131,-135,281,-77,-80,-76,-79,]),'DEF':([0,3,4,5,6,7,15,16,17,18,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,120,122,127,128,129,132,135,137,139,141,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,253,256,257,264,265,267,277,283,287,288,295,296,302,303,],[10,10,-2,-3,-4,-5,-18,-19,-20,-21,10,10,10,10,-16,-17,-10,-12,-13,-21,10,10,10,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,10,10,10,10,10,10,-132,-136,10,-75,-90,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,10,-93,10,10,10,10,10,10,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'IF':([0,3,4,5,6,7,15,16,17,18,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,120,122,127,128,129,132,135,137,139,141,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,253,256,257,264,265,267,277,283,287,288,295,296,302,303,],[11,11,-2,-3,-4,-5,-18,-19,-20,-21,11,11,11,11,-16,-17,-10,-12,-13,-21,11,11,11,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,11,11,11,11,11,11,-132,-136,11,-75,-90,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,11,-93,11,11,11,11,11,11,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'UNLESS':([0,3,4,5,6,7,15,16,17,18,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,120,122,127,128,129,132,135,137,139,141,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,253,256,257,264,265,267,277,283,287,288,295,296,302,303,],[12,12,-2,-3,-4,-5,-18,-19,-20,-21,12,12,12,12,-16,-17,-10,-12,-13,-21,12,12,12,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,12,12,12,12,12,12,-132,-136,12,-75,-90,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,12,-93,12,12,12,12,12,12,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'CASE':([0,3,4,5,6,7,15,16,17,18,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,120,122,127,128,129,132,135,137,139,141,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,253,256,257,264,265,267,277,283,287,288,295,296,302,303,],[13,13,-2,-3,-4,-5,-18,-19,-20,-21,13,13,13,13,-16,-17,-10,-12,-13,-21,13,13,13,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,13,13,13,13,13,13,-132,-136,13,-75,-90,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,13,-93,13,13,13,13,13,13,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'WHILE':([0,3,4,5,6,7,15,16,17,18,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,120,122,127,128,129,132,135,137,139,141,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,253,256,257,264,265,267,277,283,287,288,295,296,302,303,],[14,14,-2,-3,-4,-5,-18,-19,-20,-21,14,14,14,14,-16,-17,-10,-12,-13,-21,14,14,14,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,14,14,14,14,14,14,-132,-136,14,-75,-90,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,14,-93,14,14,14,14,14,14,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'COMPLEX':([0,3,4,5,6,7,11,12,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,95,96,97,98,100,101,102,103,104,105,118,120,122,126,127,128,129,132,133,135,137,139,140,141,145,146,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,215,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,250,253,254,256,257,264,265,267,277,283,284,287,288,291,292,295,296,299,302,303,],[15,15,-2,-3,-4,-5,15,15,15,-18,-19,-20,-21,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-16,-17,-10,-12,-13,-21,15,15,15,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-132,15,-136,15,-75,15,-90,15,15,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,15,15,-93,15,15,15,15,15,15,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,15,-74,15,-78,-81,-142,-143,-130,-134,-73,15,-131,-135,15,15,-77,-80,15,-76,-79,]),'RATIONAL':([0,3,4,5,6,7,11,12,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,95,96,97,98,100,101,102,103,104,105,118,120,122,126,127,128,129,132,133,135,137,139,140,141,145,146,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,215,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,250,253,254,256,257,264,265,267,277,283,284,287,288,291,292,295,296,299,302,303,],[16,16,-2,-3,-4,-5,16,16,16,-18,-19,-20,-21,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-16,-17,-10,-12,-13,-21,16,16,16,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-132,16,-136,16,-75,16,-90,16,16,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,16,16,-93,16,16,16,16,16,16,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,16,-74,16,-78,-81,-142,-143,-130,-134,-73,16,-131,-135,16,16,-77,-80,16,-76,-79,]),'FLOAT':([0,3,4,5,6,7,11,12,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,40,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,95,96,97,98,100,101,102,103,104,105,118,120,122,126,127,128,129,132,133,135,137,139,140,141,145,146,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,202,212,213,215,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,250,253,254,256,257,264,265,267,277,283,284,287,288,291,292,295,296,299,302,303,],[17,17,-2,-3,-4,-5,17,17,17,-18,-19,-20,-21,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-16,-17,-10,-12,-13,-21,17,17,17,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-132,17,-136,17,-75,17,-90,17,17,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-129,-133,17,17,-93,17,17,17,17,17,17,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,17,-74,17,-78,-81,-142,-143,-130,-134,-73,17,-131,-135,17,17,-77,-80,17,-76,-79,]),'INTEGER':([0,3,4,5,6,7,11,12,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,40,41,42,43,44,45,46,47,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,95,96,97,98,100,101,102,103,104,105,114,115,118,120,122,126,127,128,129,132,133,135,137,139,140,141,145,146,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,191,202,212,213,215,218,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,250,253,254,256,257,264,265,267,277,283,284,287,288,291,292,295,296,299,302,303,],[18,18,-2,-3,-4,-5,43,43,43,-18,-19,-20,-21,43,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-16,-17,-10,-12,-13,-21,116,18,18,18,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,43,43,43,43,43,43,43,43,43,43,43,178,179,18,18,18,43,18,18,18,-132,43,-136,18,-75,43,-90,43,43,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,228,229,-109,-129,-133,18,43,-93,18,18,18,18,18,18,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,43,-74,43,-78,-81,-142,-143,-130,-134,-73,43,-131,-135,43,43,-77,-80,43,-76,-79,]),'$end':([1,2,3,4,5,6,7,15,16,17,18,19,36,37,40,42,43,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,132,135,139,141,151,162,176,177,178,179,191,202,212,218,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,253,256,257,264,265,267,277,283,287,288,295,296,302,303,],[0,-1,-6,-2,-3,-4,-5,-18,-19,-20,-21,-7,-16,-17,-10,-13,-21,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-132,-136,-75,-90,-91,-92,-148,-149,-144,-145,-109,-129,-133,-93,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'END':([3,4,5,6,7,15,16,17,18,19,36,37,40,41,42,43,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,94,99,124,125,132,135,139,141,142,143,147,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,212,214,216,217,218,219,226,227,230,231,232,233,234,235,236,237,238,239,240,241,242,243,246,247,248,252,253,256,257,258,259,260,264,265,267,277,283,285,286,287,288,293,294,295,296,302,303,],[-6,-2,-3,-4,-5,-18,-19,-20,-21,-7,-16,-17,-10,-12,-13,-21,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,139,141,151,162,191,-106,-132,-136,-75,-90,218,-88,-54,-55,-56,-57,-91,226,-46,-48,-47,-49,-50,-52,-51,-53,-92,227,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,232,233,234,235,236,237,238,-109,-107,-102,-104,-105,-11,240,241,242,-129,-133,253,256,257,-93,-89,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-103,-110,-111,-112,-128,-120,-121,-122,283,-74,-78,-81,-82,-83,-84,-142,-143,-130,-134,-73,295,296,-131,-135,302,303,-77,-80,-76,-79,]),'RETURN':([3,4,5,6,7,15,16,17,18,19,36,37,40,42,43,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,132,135,139,141,151,162,176,177,178,179,191,202,212,214,218,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,252,253,256,257,264,265,267,277,283,287,288,295,296,302,303,],[-6,-2,-3,-4,-5,-18,-19,-20,-21,-7,-16,-17,-10,-13,-21,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,140,-132,-136,-75,-90,-91,-92,-148,-149,-144,-145,-109,-129,-133,254,-93,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,284,-74,-78,-81,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'ELSE':([3,4,5,6,7,15,16,17,18,19,36,37,40,41,42,43,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,89,94,99,119,121,123,124,125,132,135,139,141,144,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,191,192,193,194,195,196,202,212,218,226,227,230,231,232,233,234,235,236,237,238,239,240,241,242,243,246,247,248,253,256,257,261,262,263,264,265,267,277,283,287,288,295,296,302,303,],[-6,-2,-3,-4,-5,-18,-19,-20,-21,-7,-16,-17,-10,-12,-13,-21,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,145,145,145,145,145,145,145,-106,-132,-136,-75,-90,145,-54,-55,-56,-57,-91,-46,-48,-47,-49,-50,-52,-51,-53,-92,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-109,-107,-102,-104,-105,-11,-129,-133,-93,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-103,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-85,-86,-87,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'ELSIF':([3,4,5,6,7,15,16,17,18,19,36,37,40,42,43,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,89,94,99,119,121,123,132,135,139,141,144,151,162,176,177,178,179,191,202,212,218,226,227,230,231,232,233,234,235,236,237,238,240,241,242,243,246,247,248,253,256,257,261,262,263,264,265,267,277,283,287,288,295,296,302,303,],[-6,-2,-3,-4,-5,-18,-19,-20,-21,-7,-16,-17,-10,-13,-21,-58,-59,-60,-61,-62,-125,-126,-127,-11,-12,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,146,146,146,146,146,146,-132,-136,-75,-90,146,-91,-92,-148,-149,-144,-145,-109,-129,-133,-93,-94,-95,-146,-147,-96,-99,-97,-100,-98,-101,-108,-110,-111,-112,-128,-120,-121,-122,-74,-78,-81,-85,-86,-87,-142,-143,-130,-134,-73,-131,-135,-77,-80,-76,-79,]),'ASSIGN':([8,],[20,]),'ADD_ASSIGN':([8,],[21,]),'SUBS_ASSIGN':([8,],[22,]),'MULT_ASSIGN':([8,],[23,]),'DIV_ASSIGN':([8,],[24,]),'MOD_ASSIGN':([8,],[25,]),'PLUS':([9,15,16,17,18,43,61,75,77,79,81,83,85,],[26,-18,-19,-20,-21,-21,26,26,26,26,26,26,26,]),'MINUS':([9,15,16,17,18,43,61,75,77,79,81,83,85,],[27,-18,-19,-20,-21,-21,27,27,27,27,27,27,27,]),'EXPO':([9,15,16,17,18,43,61,75,77,79,81,83,85,],[28,-18,-19,-20,-21,-21,28,28,28,28,28,28,28,]),'MULT':([9,15,16,17,18,43,61,75,77,79,81,83,85,],[29,-18,-19,-20,-21,-21,29,29,29,29,29,29,29,]),'DIV':([9,15,16,17,18,43,61,75,77,79,81,83,85,],[30,-18,-19,-20,-21,-21,30,30,30,30,30,30,30,]),'MODULO':([9,15,16,17,18,43,61,75,77,79,81,83,85,],[31,-18,-19,-20,-21,-21,31,31,31,31,31,31,31,]),'TRUE':([11,12,14,20,87,90,91,92,93,95,96,97,98,100,101,102,103,104,105,126,133,140,145,146,215,250,254,284,291,292,299,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'FALSE':([11,12,14,20,87,90,91,92,93,95,96,97,98,100,101,102,103,104,105,126,133,140,145,146,215,250,254,284,291,292,299,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'STRING':([11,12,14,20,44,87,95,96,97,98,100,101,102,103,104,105,112,113,126,133,140,145,146,182,183,215,250,251,254,284,289,291,292,299,],[40,40,40,40,117,40,40,40,40,40,40,40,40,40,40,40,176,177,40,208,40,40,40,230,231,40,273,282,40,40,282,40,40,40,]),'L_PAREN':([11,12,14,20,32,87,95,96,97,98,100,101,102,103,104,105,126,133,140,145,146,202,215,250,254,284,291,292,299,],[44,44,44,44,87,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,245,44,44,44,44,44,44,44,]),'EQUAL':([15,16,17,33,36,37,38,39,40,41,42,43,45,49,155,176,177,178,179,193,196,220,223,230,231,264,265,],[-18,-19,-20,-11,-16,-17,100,106,-10,-12,-13,-21,-11,-11,-11,-148,-149,-144,-145,100,-11,-11,-11,-146,-147,-142,-143,]),'NOT_EQ':([15,16,17,33,36,37,38,39,40,41,42,43,45,49,155,176,177,178,179,193,196,220,223,230,231,264,265,],[-18,-19,-20,-11,-16,-17,101,107,-10,-12,-13,-21,-11,-11,-11,-148,-149,-144,-145,101,-11,-11,-11,-146,-147,-142,-143,]),'LT_OR_EQ':([15,16,17,33,36,37,38,39,40,41,42,43,45,49,155,176,177,178,179,193,196,220,223,230,231,264,265,],[-18,-19,-20,-11,-16,-17,102,108,-10,-12,-13,-21,-11,-11,-11,-148,-149,-144,-145,102,-11,-11,-11,-146,-147,-142,-143,]),'GT_OR_EQ':([15,16,17,33,36,37,38,39,40,41,42,43,45,49,155,176,177,178,179,193,196,220,223,230,231,264,265,],[-18,-19,-20,-11,-16,-17,103,109,-10,-12,-13,-21,-11,-11,-11,-148,-149,-144,-145,103,-11,-11,-11,-146,-147,-142,-143,]),'LESS_THAN':([15,16,17,33,36,37,38,39,40,41,42,43,45,49,155,176,177,178,179,193,196,220,223,230,231,264,265,],[-18,-19,-20,-11,-16,-17,104,110,-10,-12,-13,-21,-11,-11,-11,-148,-149,-144,-145,104,-11,-11,-11,-146,-147,-142,-143,]),'GREATER_THAN':([15,16,17,33,36,37,38,39,40,41,42,43,45,49,155,176,177,178,179,193,196,220,223,230,231,264,265,],[-18,-19,-20,-11,-16,-17,105,111,-10,-12,-13,-21,-11,-11,-11,-148,-149,-144,-145,105,-11,-11,-11,-146,-147,-142,-143,]),'COMMA':([15,16,17,36,37,40,41,42,43,60,138,176,177,178,179,201,206,207,208,209,210,211,230,231,246,247,248,264,265,269,272,273,274,275,276,279,297,300,301,304,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,-11,215,-148,-149,-144,-145,244,249,250,-10,-11,-12,-13,-146,-147,-120,-121,-122,-142,-143,249,-113,-114,-115,-116,-117,289,289,-138,-139,-137,]),'R_PAREN':([15,16,17,36,37,40,41,42,43,60,87,136,138,176,177,178,179,228,229,230,231,245,246,247,248,255,264,265,268,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,-11,137,213,-14,-148,-149,-144,-145,264,265,-146,-147,267,-120,-121,-122,-15,-142,-143,287,]),'AND':([15,16,17,33,34,36,37,40,41,42,43,45,46,49,50,60,153,155,156,158,160,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,194,196,220,221,223,224,230,231,264,265,],[-18,-19,-20,90,95,-16,-17,-10,-12,-13,-21,90,95,90,95,-11,95,90,95,95,95,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,95,90,90,95,90,95,-146,-147,-142,-143,]),'LOGIC_AND':([15,16,17,33,34,36,37,40,41,42,43,45,46,49,50,60,153,155,156,158,160,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,194,196,220,221,223,224,230,231,264,265,],[-18,-19,-20,91,96,-16,-17,-10,-12,-13,-21,91,96,91,96,-11,96,91,96,96,96,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,96,91,91,96,91,96,-146,-147,-142,-143,]),'OR':([15,16,17,33,34,36,37,40,41,42,43,45,46,49,50,60,153,155,156,158,160,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,194,196,220,221,223,224,230,231,264,265,],[-18,-19,-20,92,97,-16,-17,-10,-12,-13,-21,92,97,92,97,-11,97,92,97,97,97,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,97,92,92,97,92,97,-146,-147,-142,-143,]),'LOGIC_OR':([15,16,17,33,34,36,37,40,41,42,43,45,46,49,50,60,153,155,156,158,160,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,194,196,220,221,223,224,230,231,264,265,],[-18,-19,-20,93,98,-16,-17,-10,-12,-13,-21,93,98,93,98,-11,98,93,98,98,98,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,98,93,93,98,93,98,-146,-147,-142,-143,]),'COLON':([15,16,17,36,37,40,41,42,43,45,46,47,60,147,148,149,150,153,154,156,157,158,159,160,161,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,230,231,251,264,265,281,282,289,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,118,120,122,-11,-54,-55,-56,-57,-46,-48,-47,-49,-50,-52,-51,-53,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-146,-147,280,-142,-143,291,292,280,]),'DO':([15,16,17,36,37,40,41,42,43,49,50,51,60,147,148,149,150,153,154,156,157,158,159,160,161,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,230,231,264,265,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,127,128,129,-11,-54,-55,-56,-57,-46,-48,-47,-49,-50,-52,-51,-53,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-146,-147,-142,-143,]),'WHEN':([15,16,17,36,37,40,41,42,43,48,60,125,147,148,149,150,153,154,156,157,158,159,160,161,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,193,194,195,196,230,231,239,264,265,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,126,-11,126,-54,-55,-56,-57,-46,-48,-47,-49,-50,-52,-51,-53,-34,-36,-38,-40,-42,-44,-35,-37,-39,-41,-43,-45,-148,-149,-144,-145,-102,-104,-105,-11,-146,-147,-103,-142,-143,]),'THEN':([15,16,17,36,37,40,41,42,43,176,177,178,179,193,196,230,231,264,265,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,-148,-149,-144,-145,239,-11,-146,-147,-142,-143,]),'R_BRACKET':([15,16,17,36,37,40,41,42,43,60,138,176,177,178,179,200,201,203,204,205,206,207,208,209,210,211,230,231,246,247,248,255,264,265,266,269,270,271,272,273,274,275,276,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,-11,-14,-148,-149,-144,-145,243,-123,246,247,248,-8,-118,-10,-11,-12,-13,-146,-147,-120,-121,-122,-15,-142,-143,-124,-8,-9,-119,-113,-114,-115,-116,-117,]),'R_BRACE':([15,16,17,36,37,40,41,42,43,60,176,177,178,179,230,231,251,264,265,278,297,298,300,301,304,],[-18,-19,-20,-16,-17,-10,-12,-13,-21,-11,-148,-149,-144,-145,-146,-147,277,-142,-143,288,-140,-141,-138,-139,-137,]),'NIL':([20,],[53,]),'MATRIX':([20,],[62,]),'SET':([20,],[63,]),'HASH':([20,],[64,]),'ELLIPSIS':([40,43,116,117,208,273,],[112,114,180,182,112,112,]),'DOUBLE_PERIOD':([40,43,116,117,208,273,],[113,115,181,183,113,113,]),'L_BRACKET':([62,63,64,130,244,245,],[130,133,133,133,133,133,]),'PERIOD':([63,64,],[131,134,]),'NEW':([131,134,],[202,212,]),'L_BRACE':([212,],[251,]),'RW_DOUBLE_ARROW':([290,],[299,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'statements':([0,3,32,33,34,35,45,46,47,118,120,122,127,128,129,137,213,220,221,222,223,224,225,],[2,19,88,89,94,99,119,121,123,184,186,188,197,198,199,214,252,258,259,260,261,262,263,]),'statement':([0,3,32,33,34,35,45,46,47,118,120,122,127,128,129,137,213,220,221,222,223,224,225,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignment':([0,3,32,33,34,35,45,46,47,118,120,122,127,128,129,137,213,220,221,222,223,224,225,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'function':([0,3,32,33,34,35,45,46,47,118,120,122,127,128,129,137,213,220,221,222,223,224,225,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'control':([0,3,32,33,34,35,45,46,47,118,120,122,127,128,129,137,213,220,221,222,223,224,225,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'arithmetic':([0,3,20,26,27,28,29,30,31,32,33,34,35,45,46,47,118,120,122,127,128,129,137,213,220,221,222,223,224,225,],[7,7,56,76,78,80,82,84,86,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'numeric':([0,3,11,12,14,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,87,95,96,97,98,100,101,102,103,104,105,118,120,122,126,127,128,129,133,137,140,145,146,213,215,220,221,222,223,224,225,250,254,284,291,292,299,],[9,9,41,41,41,61,66,68,70,72,74,75,77,79,81,83,85,9,9,9,9,9,9,9,41,41,41,41,41,41,41,41,41,41,41,9,9,9,41,9,9,9,210,9,41,41,41,9,41,9,9,9,9,9,9,275,41,41,41,41,41,]),'boolean':([11,12,14,20,87,90,91,92,93,95,96,97,98,100,101,102,103,104,105,126,133,140,145,146,215,250,254,284,291,292,299,],[33,45,49,60,60,147,148,149,150,155,155,155,155,60,60,60,60,60,60,196,209,60,220,223,60,274,60,60,60,60,60,]),'comparation':([11,12,14,95,96,97,98,126,145,146,],[34,46,50,153,156,158,160,194,221,224,]),'comparations':([11,12,14,95,96,97,98,126,145,146,],[35,47,51,154,157,159,161,195,222,225,]),'literal':([11,12,14,20,87,95,96,97,98,100,101,102,103,104,105,126,133,140,145,146,215,254,284,291,292,299,],[38,38,38,55,138,38,38,38,38,164,165,166,167,168,169,193,138,217,38,38,138,286,294,300,301,304,]),'range':([11,12,14,20,87,95,96,97,98,100,101,102,103,104,105,126,133,140,145,146,215,250,254,284,291,292,299,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,211,42,42,42,42,276,42,42,42,42,42,]),'struc':([20,],[54,]),'strucMatrix':([20,],[57,]),'strucSet':([20,],[58,]),'strucHash':([20,],[59,]),'whens':([48,125,],[124,192,]),'when':([48,125,],[125,125,]),'array':([63,64,130,244,245,],[132,135,201,201,268,]),'literals':([87,133,215,],[136,203,255,]),'elses':([89,94,99,119,121,123,144,],[142,152,163,185,187,189,219,]),'else':([89,94,99,119,121,123,124,144,],[143,143,143,143,143,143,190,143,]),'elsif':([89,94,99,119,121,123,144,],[144,144,144,144,144,144,144,]),'arrays':([130,244,],[200,266,]),'ids':([133,249,],[204,270,]),'elements':([133,250,],[205,271,]),'element':([133,250,],[207,207,]),'hashelems':([251,289,],[278,298,]),'hashelem':([251,289,],[279,297,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> statements','init',1,'p_init','semantic.py',24),
  ('statement -> assignment','statement',1,'p_statement','semantic.py',28),
  ('statement -> function','statement',1,'p_statement','semantic.py',29),
  ('statement -> control','statement',1,'p_statement','semantic.py',30),
  ('statement -> arithmetic','statement',1,'p_statement','semantic.py',31),
  ('statements -> statement','statements',1,'p_statements','semantic.py',36),
  ('statements -> statement statements','statements',2,'p_statements','semantic.py',37),
  ('ids -> ID','ids',1,'p_ids','semantic.py',42),
  ('ids -> ID COMMA ids','ids',3,'p_ids','semantic.py',43),
  ('literal -> STRING','literal',1,'p_literal','semantic.py',48),
  ('literal -> boolean','literal',1,'p_literal','semantic.py',49),
  ('literal -> numeric','literal',1,'p_literal','semantic.py',50),
  ('literal -> range','literal',1,'p_literal','semantic.py',51),
  ('literals -> literal','literals',1,'p_literals','semantic.py',56),
  ('literals -> literal COMMA literals','literals',3,'p_literals','semantic.py',57),
  ('boolean -> TRUE','boolean',1,'p_boolean','semantic.py',62),
  ('boolean -> FALSE','boolean',1,'p_boolean','semantic.py',63),
  ('numeric -> COMPLEX','numeric',1,'p_numeric','semantic.py',68),
  ('numeric -> RATIONAL','numeric',1,'p_numeric','semantic.py',69),
  ('numeric -> FLOAT','numeric',1,'p_numeric','semantic.py',70),
  ('numeric -> INTEGER','numeric',1,'p_numeric','semantic.py',71),
  ('arithmetic -> numeric PLUS numeric','arithmetic',3,'p_arithmetic','semantic.py',75),
  ('arithmetic -> numeric PLUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',76),
  ('arithmetic -> numeric MINUS numeric','arithmetic',3,'p_arithmetic','semantic.py',77),
  ('arithmetic -> numeric MINUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',78),
  ('arithmetic -> numeric EXPO numeric','arithmetic',3,'p_arithmetic','semantic.py',79),
  ('arithmetic -> numeric EXPO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',80),
  ('arithmetic -> numeric MULT numeric','arithmetic',3,'p_arithmetic','semantic.py',81),
  ('arithmetic -> numeric MULT arithmetic','arithmetic',3,'p_arithmetic','semantic.py',82),
  ('arithmetic -> numeric DIV numeric','arithmetic',3,'p_arithmetic','semantic.py',83),
  ('arithmetic -> numeric DIV arithmetic','arithmetic',3,'p_arithmetic','semantic.py',84),
  ('arithmetic -> numeric MODULO numeric','arithmetic',3,'p_arithmetic','semantic.py',85),
  ('arithmetic -> numeric MODULO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',86),
  ('comparation -> literal EQUAL literal','comparation',3,'p_comparation','semantic.py',91),
  ('comparation -> ID EQUAL ID','comparation',3,'p_comparation','semantic.py',92),
  ('comparation -> literal NOT_EQ literal','comparation',3,'p_comparation','semantic.py',93),
  ('comparation -> ID NOT_EQ ID','comparation',3,'p_comparation','semantic.py',94),
  ('comparation -> literal LT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',95),
  ('comparation -> ID LT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',96),
  ('comparation -> literal GT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',97),
  ('comparation -> ID GT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',98),
  ('comparation -> literal LESS_THAN literal','comparation',3,'p_comparation','semantic.py',99),
  ('comparation -> ID LESS_THAN ID','comparation',3,'p_comparation','semantic.py',100),
  ('comparation -> literal GREATER_THAN literal','comparation',3,'p_comparation','semantic.py',101),
  ('comparation -> ID GREATER_THAN ID','comparation',3,'p_comparation','semantic.py',102),
  ('comparations -> comparation AND comparation','comparations',3,'p_comparations','semantic.py',107),
  ('comparations -> comparation LOGIC_AND comparation','comparations',3,'p_comparations','semantic.py',108),
  ('comparations -> comparation AND comparations','comparations',3,'p_comparations','semantic.py',109),
  ('comparations -> comparation LOGIC_AND comparations','comparations',3,'p_comparations','semantic.py',110),
  ('comparations -> comparation OR comparation','comparations',3,'p_comparations','semantic.py',111),
  ('comparations -> comparation LOGIC_OR comparation','comparations',3,'p_comparations','semantic.py',112),
  ('comparations -> comparation OR comparations','comparations',3,'p_comparations','semantic.py',113),
  ('comparations -> comparation LOGIC_OR comparations','comparations',3,'p_comparations','semantic.py',114),
  ('comparations -> boolean AND boolean','comparations',3,'p_comparations','semantic.py',115),
  ('comparations -> boolean LOGIC_AND boolean','comparations',3,'p_comparations','semantic.py',116),
  ('comparations -> boolean OR boolean','comparations',3,'p_comparations','semantic.py',117),
  ('comparations -> boolean LOGIC_OR boolean','comparations',3,'p_comparations','semantic.py',118),
  ('assignment -> ID ASSIGN ID','assignment',3,'p_assignment','semantic.py',123),
  ('assignment -> ID ASSIGN NIL','assignment',3,'p_assignment','semantic.py',124),
  ('assignment -> ID ASSIGN struc','assignment',3,'p_assignment','semantic.py',125),
  ('assignment -> ID ASSIGN literal','assignment',3,'p_assignment','semantic.py',126),
  ('assignment -> ID ASSIGN arithmetic','assignment',3,'p_assignment','semantic.py',127),
  ('assignment -> ID ADD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',132),
  ('assignment -> ID ADD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',133),
  ('assignment -> ID SUBS_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',134),
  ('assignment -> ID SUBS_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',135),
  ('assignment -> ID MULT_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',136),
  ('assignment -> ID MULT_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',137),
  ('assignment -> ID DIV_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',138),
  ('assignment -> ID DIV_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',139),
  ('assignment -> ID MOD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',140),
  ('assignment -> ID MOD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',141),
  ('function -> DEF ID L_PAREN literals R_PAREN statements END','function',7,'p_func','semantic.py',146),
  ('function -> DEF ID L_PAREN R_PAREN statements END','function',6,'p_func','semantic.py',147),
  ('function -> DEF ID statements END','function',4,'p_func','semantic.py',148),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END','function',9,'p_func','semantic.py',149),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN ID END','function',8,'p_func','semantic.py',150),
  ('function -> DEF ID statements RETURN ID END','function',6,'p_func','semantic.py',151),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END','function',9,'p_func','semantic.py',152),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN literal END','function',8,'p_func','semantic.py',153),
  ('function -> DEF ID statements RETURN literal END','function',6,'p_func','semantic.py',154),
  ('else -> ELSE boolean statements','else',3,'p_else','semantic.py',159),
  ('else -> ELSE comparation statements','else',3,'p_else','semantic.py',160),
  ('else -> ELSE comparations statements','else',3,'p_else','semantic.py',161),
  ('elsif -> ELSIF boolean statements','elsif',3,'p_elsif','semantic.py',166),
  ('elsif -> ELSIF comparation statements','elsif',3,'p_elsif','semantic.py',167),
  ('elsif -> ELSIF comparations statements','elsif',3,'p_elsif','semantic.py',168),
  ('elses -> else','elses',1,'p_elses','semantic.py',173),
  ('elses -> elsif elses','elses',2,'p_elses','semantic.py',174),
  ('control -> IF boolean statements END','control',4,'p_contol_if','semantic.py',179),
  ('control -> IF comparation statements END','control',4,'p_contol_if','semantic.py',180),
  ('control -> IF comparations statements END','control',4,'p_contol_if','semantic.py',181),
  ('control -> IF boolean statements elses END','control',5,'p_contol_if','semantic.py',182),
  ('control -> IF comparation statements elses END','control',5,'p_contol_if','semantic.py',183),
  ('control -> IF comparations statements elses END','control',5,'p_contol_if','semantic.py',184),
  ('control -> UNLESS boolean COLON statements END','control',5,'p_control_unless','semantic.py',189),
  ('control -> UNLESS comparation COLON statements END','control',5,'p_control_unless','semantic.py',190),
  ('control -> UNLESS comparations COLON statements END','control',5,'p_control_unless','semantic.py',191),
  ('control -> UNLESS boolean statements elses END','control',5,'p_control_unless','semantic.py',192),
  ('control -> UNLESS comparation statements elses END','control',5,'p_control_unless','semantic.py',193),
  ('control -> UNLESS comparations statements elses END','control',5,'p_control_unless','semantic.py',194),
  ('when -> WHEN literal','when',2,'p_when','semantic.py',199),
  ('when -> WHEN literal THEN','when',3,'p_when','semantic.py',200),
  ('when -> WHEN comparation','when',2,'p_when','semantic.py',201),
  ('when -> WHEN comparations','when',2,'p_when','semantic.py',202),
  ('whens -> when','whens',1,'p_whens','semantic.py',207),
  ('whens -> when whens','whens',2,'p_whens','semantic.py',208),
  ('control -> CASE ID whens else END','control',5,'p_control_case','semantic.py',213),
  ('control -> CASE ID whens END','control',4,'p_control_case','semantic.py',214),
  ('control -> WHILE boolean DO statements END','control',5,'p_control_while','semantic.py',219),
  ('control -> WHILE comparation DO statements END','control',5,'p_control_while','semantic.py',220),
  ('control -> WHILE comparations DO statements END','control',5,'p_control_while','semantic.py',221),
  ('element -> ID','element',1,'p_element','semantic.py',226),
  ('element -> STRING','element',1,'p_element','semantic.py',227),
  ('element -> boolean','element',1,'p_element','semantic.py',228),
  ('element -> numeric','element',1,'p_element','semantic.py',229),
  ('element -> range','element',1,'p_element','semantic.py',230),
  ('elements -> element','elements',1,'p_elements','semantic.py',235),
  ('elements -> element COMMA elements','elements',3,'p_elements','semantic.py',236),
  ('array -> L_BRACKET literals R_BRACKET','array',3,'p_array','semantic.py',241),
  ('array -> L_BRACKET ids R_BRACKET','array',3,'p_array','semantic.py',242),
  ('array -> L_BRACKET elements R_BRACKET','array',3,'p_array','semantic.py',243),
  ('arrays -> array','arrays',1,'p_arrays','semantic.py',248),
  ('arrays -> array COMMA arrays','arrays',3,'p_arrays','semantic.py',249),
  ('struc -> strucMatrix','struc',1,'p_struc','semantic.py',254),
  ('struc -> strucSet','struc',1,'p_struc','semantic.py',255),
  ('struc -> strucHash','struc',1,'p_struc','semantic.py',256),
  ('strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET','strucMatrix',4,'p_strucMatrix','semantic.py',261),
  ('strucSet -> SET PERIOD NEW','strucSet',3,'p_strucSet','semantic.py',265),
  ('strucSet -> SET PERIOD NEW L_PAREN R_PAREN','strucSet',5,'p_strucSet','semantic.py',266),
  ('strucSet -> SET PERIOD NEW L_PAREN array R_PAREN','strucSet',6,'p_strucSet','semantic.py',267),
  ('strucSet -> SET array','strucSet',2,'p_strucSet','semantic.py',268),
  ('strucHash -> HASH PERIOD NEW','strucHash',3,'p_strucHash','semantic.py',273),
  ('strucHash -> HASH PERIOD NEW L_BRACE R_BRACE','strucHash',5,'p_strucHash','semantic.py',274),
  ('strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE','strucHash',6,'p_strucHash','semantic.py',275),
  ('strucHash -> HASH array','strucHash',2,'p_strucHash','semantic.py',276),
  ('hashelem -> COLON ID RW_DOUBLE_ARROW literal','hashelem',4,'p_hashelem_rocket','semantic.py',281),
  ('hashelem -> ID COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',282),
  ('hashelem -> STRING COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',283),
  ('hashelems -> hashelem COMMA hashelem','hashelems',3,'p_hashelems','semantic.py',288),
  ('hashelems -> hashelem COMMA hashelems','hashelems',3,'p_hashelems','semantic.py',289),
  ('range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN','range',5,'p_range','semantic.py',294),
  ('range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN','range',5,'p_range','semantic.py',295),
  ('range -> INTEGER ELLIPSIS INTEGER','range',3,'p_range','semantic.py',296),
  ('range -> INTEGER DOUBLE_PERIOD INTEGER','range',3,'p_range','semantic.py',297),
  ('range -> L_PAREN STRING ELLIPSIS STRING','range',4,'p_range','semantic.py',298),
  ('range -> L_PAREN STRING DOUBLE_PERIOD STRING','range',4,'p_range','semantic.py',299),
  ('range -> STRING ELLIPSIS STRING','range',3,'p_range','semantic.py',300),
  ('range -> STRING DOUBLE_PERIOD STRING','range',3,'p_range','semantic.py',301),
]
