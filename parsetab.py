
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initADD_ASSIGN AMPERSAND AND ARRAY ASSIGN AT_SIGN BEGIN BREAK CASE CLASS COLON COMMA COMPLEX DEF DIV DIV_ASSIGN DO DOLLAR_SIGN DOUBLE_PERIOD ELLIPSIS ELSE ELSIF END ENSURE EQUAL EXPO FALSE FLOAT FOR GREATER_THAN GT_OR_EQ HASH ID IF IN INTEGER LESS_THAN LINE_COMMENT LOGIC_AND LOGIC_NOT LOGIC_OR LT_OR_EQ L_BRACE L_BRACKET L_PAREN MATRIX MINUS MODULO MOD_ASSIGN MULT MULT_ASSIGN NEW NEXT NIL NOT NOT_EQ OR PERIOD PLUS RATIONAL RETRY RETURN RW_ARROW RW_DOUBLE_ARROW R_BRACE R_BRACKET R_PAREN SELF SEMICOLON SET STRING SUBS_ASSIGN SUPER THEN TILDE TRUE UNDERSCORE UNLESS UNTIL VERTICAL_BAR WHEN WHILEinit : statementsstatement : assignment\n        | function\n        | control\n        | arithmetic\n        statements : statement\n        | statement statements\n        ids : ID\n        | ID COMMA ids\n        literal : STRING\n        | ID\n        | boolean\n        | numeric\n        | range\n        literals : literal\n        | literal COMMA literals\n        boolean : TRUE\n        | FALSE\n        numeric : COMPLEX\n        | RATIONAL\n        | FLOAT\n        | INTEGER\n        value : numeric\n        | ID\n        arithmetic : value PLUS value\n        | value PLUS arithmetic\n        | value MINUS value\n        | value MINUS arithmetic\n        | value EXPO value\n        | value EXPO arithmetic\n        | value MULT value\n        | value MULT arithmetic\n        | value DIV value\n        | value DIV arithmetic\n        | value MODULO value\n        | value MODULO arithmetic\n        comparation : literal EQUAL literal\n        | ID EQUAL ID\n        | literal NOT_EQ literal\n        | ID NOT_EQ ID\n        | literal LT_OR_EQ literal\n        | ID LT_OR_EQ ID\n        | literal GT_OR_EQ literal\n        | ID GT_OR_EQ ID\n        | literal LESS_THAN literal\n        | ID LESS_THAN ID\n        | literal GREATER_THAN literal\n        | ID GREATER_THAN ID\n        comparations : comparation AND comparation\n        | comparation LOGIC_AND comparation\n        | comparation AND comparations\n        | comparation LOGIC_AND comparations\n        | comparation OR comparation\n        | comparation LOGIC_OR comparation\n        | comparation OR comparations\n        | comparation LOGIC_OR comparations\n        | boolean AND boolean\n        | boolean LOGIC_AND boolean\n        | boolean OR boolean\n        | boolean LOGIC_OR boolean\n        assignment : ID ASSIGN ID\n        | ID ASSIGN NIL\n        | ID ASSIGN struc\n        | ID ASSIGN literal\n        | ID ASSIGN arithmetic\n        assignment : ID ADD_ASSIGN ID\n        | ID ADD_ASSIGN numeric\n        | ID SUBS_ASSIGN ID\n        | ID SUBS_ASSIGN numeric\n        | ID MULT_ASSIGN ID\n        | ID MULT_ASSIGN numeric\n        | ID DIV_ASSIGN ID\n        | ID DIV_ASSIGN numeric\n        | ID MOD_ASSIGN ID\n        | ID MOD_ASSIGN numeric\n        function : DEF ID L_PAREN literals R_PAREN statements END\n        | DEF ID L_PAREN R_PAREN statements END\n        | DEF ID statements END\n        | DEF ID L_PAREN literals R_PAREN statements RETURN ID END\n        | DEF ID L_PAREN R_PAREN statements RETURN ID END\n        | DEF ID statements RETURN ID END\n        | DEF ID L_PAREN literals R_PAREN statements RETURN literal END\n        | DEF ID L_PAREN R_PAREN statements RETURN literal END\n        | DEF ID statements RETURN literal END\n        else : ELSE boolean statements\n        | ELSE comparation statements\n        | ELSE comparations statements\n        elsif : ELSIF boolean statements\n        | ELSIF comparation statements\n        | ELSIF comparations statements\n        elses : else\n        | elsif elses\n        control : IF boolean statements END\n        | IF comparation statements END\n        | IF comparations statements END\n        | IF boolean statements elses END\n        | IF comparation statements elses END\n        | IF comparations statements elses END\n        control : UNLESS boolean COLON statements END\n        | UNLESS comparation COLON statements END\n        | UNLESS comparations COLON statements END\n        | UNLESS boolean statements elses END\n        | UNLESS comparation statements elses END\n        | UNLESS comparations statements elses END\n        when : WHEN literal\n        | WHEN literal THEN\n        | WHEN comparation\n        | WHEN comparations\n        whens : when\n        | when whens\n        control : CASE ID whens else END\n        | CASE ID whens END\n        control : WHILE boolean DO statements END\n        | WHILE comparation DO statements END\n        | WHILE comparations DO statements END\n        element : ID\n        | STRING\n        | boolean\n        | numeric\n        | range\n        elements : element\n        | element COMMA elements\n        array : L_BRACKET literals R_BRACKET\n        | L_BRACKET ids R_BRACKET\n        | L_BRACKET elements R_BRACKET\n        arrays : array\n        | array COMMA arrays\n        struc : strucMatrix\n        | strucSet\n        | strucHash\n        strucMatrix : MATRIX L_BRACKET arrays R_BRACKETstrucSet : SET PERIOD NEW\n        | SET PERIOD NEW L_PAREN R_PAREN\n        | SET PERIOD NEW L_PAREN array R_PAREN\n        | SET array\n        strucHash : HASH PERIOD NEW\n        | HASH PERIOD NEW L_BRACE R_BRACE\n        | HASH PERIOD NEW L_BRACE hashelems R_BRACE\n        | HASH array\n        hashelem : COLON ID RW_DOUBLE_ARROW literal\n        | ID COLON literal\n        | STRING COLON literal\n        hashelems : hashelem COMMA hashelem\n        | hashelem COMMA hashelems\n        range : L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN\n        | L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN\n        | INTEGER ELLIPSIS INTEGER\n        | INTEGER DOUBLE_PERIOD INTEGER\n        | L_PAREN STRING ELLIPSIS STRING\n        | L_PAREN STRING DOUBLE_PERIOD STRING\n        | STRING ELLIPSIS STRING\n        | STRING DOUBLE_PERIOD STRING\n        '
    
_lr_action_items = {'ID':([0,3,4,5,6,7,9,10,11,12,13,14,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,35,36,37,38,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,76,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,107,109,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,138,140,142,143,144,148,149,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,219,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,253,254,255,257,258,260,261,268,269,271,281,284,287,288,291,292,293,295,296,299,300,303,306,307,],[8,8,-2,-3,-4,-5,-23,27,34,34,43,34,-19,-20,-21,-22,53,66,68,70,72,74,8,8,8,8,-17,-18,-10,-13,-14,-22,8,8,8,121,121,121,121,121,121,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,138,34,34,34,34,138,138,138,138,138,138,173,174,175,176,177,178,8,8,8,199,8,8,8,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,210,-139,-11,8,-78,220,-93,34,34,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,8,138,-96,8,8,8,8,8,8,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,273,276,285,-77,289,-81,-84,-145,-146,-133,-137,294,-76,297,-134,-138,285,138,138,-80,-83,138,-79,-82,]),'DEF':([0,3,4,5,6,7,9,16,17,18,19,27,28,29,30,31,32,35,36,37,38,40,41,42,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,107,109,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,138,140,142,144,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,257,260,261,268,269,271,281,287,291,292,299,300,306,307,],[10,10,-2,-3,-4,-5,-23,-19,-20,-21,-22,10,10,10,10,-17,-18,-10,-13,-14,-22,10,10,10,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,10,10,10,10,10,10,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-11,10,-78,-93,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,10,-96,10,10,10,10,10,10,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'IF':([0,3,4,5,6,7,9,16,17,18,19,27,28,29,30,31,32,35,36,37,38,40,41,42,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,107,109,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,138,140,142,144,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,257,260,261,268,269,271,281,287,291,292,299,300,306,307,],[11,11,-2,-3,-4,-5,-23,-19,-20,-21,-22,11,11,11,11,-17,-18,-10,-13,-14,-22,11,11,11,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,11,11,11,11,11,11,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-11,11,-78,-93,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,11,-96,11,11,11,11,11,11,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'UNLESS':([0,3,4,5,6,7,9,16,17,18,19,27,28,29,30,31,32,35,36,37,38,40,41,42,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,107,109,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,138,140,142,144,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,257,260,261,268,269,271,281,287,291,292,299,300,306,307,],[12,12,-2,-3,-4,-5,-23,-19,-20,-21,-22,12,12,12,12,-17,-18,-10,-13,-14,-22,12,12,12,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,12,12,12,12,12,12,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-11,12,-78,-93,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,12,-96,12,12,12,12,12,12,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'CASE':([0,3,4,5,6,7,9,16,17,18,19,27,28,29,30,31,32,35,36,37,38,40,41,42,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,107,109,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,138,140,142,144,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,257,260,261,268,269,271,281,287,291,292,299,300,306,307,],[13,13,-2,-3,-4,-5,-23,-19,-20,-21,-22,13,13,13,13,-17,-18,-10,-13,-14,-22,13,13,13,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,13,13,13,13,13,13,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-11,13,-78,-93,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,13,-96,13,13,13,13,13,13,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'WHILE':([0,3,4,5,6,7,9,16,17,18,19,27,28,29,30,31,32,35,36,37,38,40,41,42,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,107,109,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,138,140,142,144,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,257,260,261,268,269,271,281,287,291,292,299,300,306,307,],[14,14,-2,-3,-4,-5,-23,-19,-20,-21,-22,14,14,14,14,-17,-18,-10,-13,-14,-22,14,14,14,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,14,14,14,14,14,14,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-11,14,-78,-93,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,14,-96,14,14,14,14,14,14,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'COMPLEX':([0,3,4,5,6,7,9,11,12,14,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,35,36,37,38,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,76,84,85,86,87,89,90,91,92,93,94,107,109,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,138,140,142,143,144,148,149,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,219,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,254,257,258,260,261,268,269,271,281,287,288,291,292,295,296,299,300,303,306,307,],[16,16,-2,-3,-4,-5,-23,16,16,16,-19,-20,-21,-22,16,16,16,16,16,16,16,16,16,16,-17,-18,-10,-13,-14,-22,16,16,16,16,16,16,16,16,16,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,16,-139,-11,16,-78,16,-93,16,16,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,16,16,-96,16,16,16,16,16,16,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,16,-77,16,-81,-84,-145,-146,-133,-137,-76,16,-134,-138,16,16,-80,-83,16,-79,-82,]),'RATIONAL':([0,3,4,5,6,7,9,11,12,14,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,35,36,37,38,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,76,84,85,86,87,89,90,91,92,93,94,107,109,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,138,140,142,143,144,148,149,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,219,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,254,257,258,260,261,268,269,271,281,287,288,291,292,295,296,299,300,303,306,307,],[17,17,-2,-3,-4,-5,-23,17,17,17,-19,-20,-21,-22,17,17,17,17,17,17,17,17,17,17,-17,-18,-10,-13,-14,-22,17,17,17,17,17,17,17,17,17,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,17,-139,-11,17,-78,17,-93,17,17,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,17,17,-96,17,17,17,17,17,17,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,17,-77,17,-81,-84,-145,-146,-133,-137,-76,17,-134,-138,17,17,-80,-83,17,-79,-82,]),'FLOAT':([0,3,4,5,6,7,9,11,12,14,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,35,36,37,38,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,76,84,85,86,87,89,90,91,92,93,94,107,109,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,138,140,142,143,144,148,149,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,206,216,217,219,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,254,257,258,260,261,268,269,271,281,287,288,291,292,295,296,299,300,303,306,307,],[18,18,-2,-3,-4,-5,-23,18,18,18,-19,-20,-21,-22,18,18,18,18,18,18,18,18,18,18,-17,-18,-10,-13,-14,-22,18,18,18,18,18,18,18,18,18,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,18,-139,-11,18,-78,18,-93,18,18,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-132,-136,18,18,-96,18,18,18,18,18,18,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,18,-77,18,-81,-84,-145,-146,-133,-137,-76,18,-134,-138,18,18,-80,-83,18,-79,-82,]),'INTEGER':([0,3,4,5,6,7,9,11,12,14,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,35,36,37,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,76,84,85,86,87,89,90,91,92,93,94,103,104,107,109,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,138,140,142,143,144,148,149,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,206,216,217,219,222,224,225,226,227,228,229,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,254,257,258,260,261,268,269,271,281,287,288,291,292,295,296,299,300,303,306,307,],[19,19,-2,-3,-4,-5,-23,38,38,38,-19,-20,-21,-22,38,19,19,19,19,19,19,19,19,19,-17,-18,-10,-13,-14,-22,105,19,19,19,19,19,19,19,19,19,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,38,38,38,38,38,38,38,38,38,38,38,181,182,19,19,19,38,19,19,19,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,38,-139,-11,19,-78,38,-93,38,38,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,232,233,-112,-132,-136,19,38,-96,19,19,19,19,19,19,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,38,-77,38,-81,-84,-145,-146,-133,-137,-76,38,-134,-138,38,38,-80,-83,38,-79,-82,]),'$end':([1,2,3,4,5,6,7,9,16,17,18,19,20,31,32,35,37,38,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,142,144,154,165,179,180,181,182,194,206,216,222,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,257,260,261,268,269,271,281,287,291,292,299,300,306,307,],[0,-1,-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-78,-93,-94,-95,-151,-152,-147,-148,-112,-132,-136,-96,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'END':([3,4,5,6,7,9,16,17,18,19,20,31,32,35,36,37,38,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,77,78,83,88,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,138,142,144,145,146,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,206,216,218,220,221,222,223,230,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,250,251,252,256,257,260,261,262,263,264,268,269,271,281,287,289,290,291,292,297,298,299,300,306,307,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-13,-14,-22,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,142,144,154,165,194,-109,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-11,-78,-93,222,-91,-57,-58,-59,-60,-94,230,-49,-51,-50,-52,-53,-55,-54,-56,-95,231,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,236,237,238,239,240,241,242,-112,-110,-105,-107,-108,-11,-12,244,245,246,-132,-136,257,260,261,-96,-92,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-106,-113,-114,-115,-131,-123,-124,-125,287,-77,-81,-84,-85,-86,-87,-145,-146,-133,-137,-76,299,300,-134,-138,306,307,-80,-83,-79,-82,]),'RETURN':([3,4,5,6,7,9,16,17,18,19,20,31,32,35,37,38,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,77,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,142,144,154,165,179,180,181,182,194,206,216,218,222,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,256,257,260,261,268,269,271,281,287,291,292,299,300,306,307,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,143,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-78,-93,-94,-95,-151,-152,-147,-148,-112,-132,-136,258,-96,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,288,-77,-81,-84,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'ELSE':([3,4,5,6,7,9,16,17,18,19,20,31,32,35,36,37,38,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,78,83,88,108,110,112,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,138,142,144,147,150,151,152,153,154,156,157,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,194,195,196,197,198,199,200,206,216,222,230,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,250,251,252,257,260,261,265,266,267,268,269,271,281,287,291,292,299,300,306,307,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-13,-14,-22,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,148,148,148,148,148,148,148,-109,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-11,-78,-93,148,-57,-58,-59,-60,-94,-49,-51,-50,-52,-53,-55,-54,-56,-95,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-112,-110,-105,-107,-108,-11,-12,-132,-136,-96,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-106,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-88,-89,-90,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'ELSIF':([3,4,5,6,7,9,16,17,18,19,20,31,32,35,37,38,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,78,83,88,108,110,112,119,120,121,122,123,124,125,126,127,128,129,130,131,134,137,142,144,147,154,165,179,180,181,182,194,206,216,222,230,231,234,235,236,237,238,239,240,241,242,244,245,246,247,250,251,252,257,260,261,265,266,267,268,269,271,281,287,291,292,299,300,306,307,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-62,-63,-64,-65,-128,-129,-130,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,149,149,149,149,149,149,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-135,-139,-78,-93,149,-94,-95,-151,-152,-147,-148,-112,-132,-136,-96,-97,-98,-149,-150,-99,-102,-100,-103,-101,-104,-111,-113,-114,-115,-131,-123,-124,-125,-77,-81,-84,-88,-89,-90,-145,-146,-133,-137,-76,-134,-138,-80,-83,-79,-82,]),'ASSIGN':([8,],[21,]),'ADD_ASSIGN':([8,],[22,]),'SUBS_ASSIGN':([8,],[23,]),'MULT_ASSIGN':([8,],[24,]),'DIV_ASSIGN':([8,],[25,]),'MOD_ASSIGN':([8,],[26,]),'PLUS':([8,9,15,16,17,18,19,38,53,62,119,121,122,124,126,128,130,],[-24,-23,47,-19,-20,-21,-22,-22,-24,-23,47,-24,47,47,47,47,47,]),'MINUS':([8,9,15,16,17,18,19,38,53,62,119,121,122,124,126,128,130,],[-24,-23,48,-19,-20,-21,-22,-22,-24,-23,48,-24,48,48,48,48,48,]),'EXPO':([8,9,15,16,17,18,19,38,53,62,119,121,122,124,126,128,130,],[-24,-23,49,-19,-20,-21,-22,-22,-24,-23,49,-24,49,49,49,49,49,]),'MULT':([8,9,15,16,17,18,19,38,53,62,119,121,122,124,126,128,130,],[-24,-23,50,-19,-20,-21,-22,-22,-24,-23,50,-24,50,50,50,50,50,]),'DIV':([8,9,15,16,17,18,19,38,53,62,119,121,122,124,126,128,130,],[-24,-23,51,-19,-20,-21,-22,-22,-24,-23,51,-24,51,51,51,51,51,]),'MODULO':([8,9,15,16,17,18,19,38,53,62,119,121,122,124,126,128,130,],[-24,-23,52,-19,-20,-21,-22,-22,-24,-23,52,-24,52,52,52,52,52,]),'TRUE':([11,12,14,21,76,79,80,81,82,84,85,86,87,89,90,91,92,93,94,115,135,143,148,149,219,254,258,288,295,296,303,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FALSE':([11,12,14,21,76,79,80,81,82,84,85,86,87,89,90,91,92,93,94,115,135,143,148,149,219,254,258,288,295,296,303,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STRING':([11,12,14,21,39,76,84,85,86,87,89,90,91,92,93,94,101,102,115,135,143,148,149,185,186,219,254,255,258,288,293,295,296,303,],[35,35,35,35,106,35,35,35,35,35,35,35,35,35,35,35,179,180,35,212,35,35,35,234,235,35,277,286,35,35,286,35,35,35,]),'L_PAREN':([11,12,14,21,27,76,84,85,86,87,89,90,91,92,93,94,115,135,143,148,149,206,219,254,258,288,295,296,303,],[39,39,39,39,76,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,249,39,39,39,39,39,39,39,]),'EQUAL':([16,17,18,28,31,32,33,34,35,36,37,38,40,44,158,179,180,181,182,196,199,200,224,227,234,235,268,269,],[-19,-20,-21,-12,-17,-18,89,95,-10,-13,-14,-22,-12,-12,-12,-151,-152,-147,-148,89,95,-12,-12,-12,-149,-150,-145,-146,]),'NOT_EQ':([16,17,18,28,31,32,33,34,35,36,37,38,40,44,158,179,180,181,182,196,199,200,224,227,234,235,268,269,],[-19,-20,-21,-12,-17,-18,90,96,-10,-13,-14,-22,-12,-12,-12,-151,-152,-147,-148,90,96,-12,-12,-12,-149,-150,-145,-146,]),'LT_OR_EQ':([16,17,18,28,31,32,33,34,35,36,37,38,40,44,158,179,180,181,182,196,199,200,224,227,234,235,268,269,],[-19,-20,-21,-12,-17,-18,91,97,-10,-13,-14,-22,-12,-12,-12,-151,-152,-147,-148,91,97,-12,-12,-12,-149,-150,-145,-146,]),'GT_OR_EQ':([16,17,18,28,31,32,33,34,35,36,37,38,40,44,158,179,180,181,182,196,199,200,224,227,234,235,268,269,],[-19,-20,-21,-12,-17,-18,92,98,-10,-13,-14,-22,-12,-12,-12,-151,-152,-147,-148,92,98,-12,-12,-12,-149,-150,-145,-146,]),'LESS_THAN':([16,17,18,28,31,32,33,34,35,36,37,38,40,44,158,179,180,181,182,196,199,200,224,227,234,235,268,269,],[-19,-20,-21,-12,-17,-18,93,99,-10,-13,-14,-22,-12,-12,-12,-151,-152,-147,-148,93,99,-12,-12,-12,-149,-150,-145,-146,]),'GREATER_THAN':([16,17,18,28,31,32,33,34,35,36,37,38,40,44,158,179,180,181,182,196,199,200,224,227,234,235,268,269,],[-19,-20,-21,-12,-17,-18,94,100,-10,-13,-14,-22,-12,-12,-12,-151,-152,-147,-148,94,100,-12,-12,-12,-149,-150,-145,-146,]),'COMMA':([16,17,18,31,32,35,36,37,38,61,138,141,179,180,181,182,205,210,211,212,213,214,215,234,235,250,251,252,268,269,273,276,277,278,279,280,283,301,304,305,308,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,219,-151,-152,-147,-148,248,253,254,-10,-12,-13,-14,-149,-150,-123,-124,-125,-145,-146,253,-116,-117,-118,-119,-120,293,293,-141,-142,-140,]),'R_PAREN':([16,17,18,31,32,35,36,37,38,61,76,138,139,141,179,180,181,182,232,233,234,235,249,250,251,252,259,268,269,272,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,140,-11,217,-15,-151,-152,-147,-148,268,269,-149,-150,271,-123,-124,-125,-16,-145,-146,291,]),'AND':([16,17,18,28,29,31,32,35,36,37,38,40,41,44,45,61,138,156,158,159,161,163,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,197,200,224,225,227,228,234,235,268,269,],[-19,-20,-21,79,84,-17,-18,-10,-13,-14,-22,79,84,79,84,-12,-11,84,79,84,84,84,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,84,79,79,84,79,84,-149,-150,-145,-146,]),'LOGIC_AND':([16,17,18,28,29,31,32,35,36,37,38,40,41,44,45,61,138,156,158,159,161,163,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,197,200,224,225,227,228,234,235,268,269,],[-19,-20,-21,80,85,-17,-18,-10,-13,-14,-22,80,85,80,85,-12,-11,85,80,85,85,85,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,85,80,80,85,80,85,-149,-150,-145,-146,]),'OR':([16,17,18,28,29,31,32,35,36,37,38,40,41,44,45,61,138,156,158,159,161,163,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,197,200,224,225,227,228,234,235,268,269,],[-19,-20,-21,81,86,-17,-18,-10,-13,-14,-22,81,86,81,86,-12,-11,86,81,86,86,86,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,86,81,81,86,81,86,-149,-150,-145,-146,]),'LOGIC_OR':([16,17,18,28,29,31,32,35,36,37,38,40,41,44,45,61,138,156,158,159,161,163,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,197,200,224,225,227,228,234,235,268,269,],[-19,-20,-21,82,87,-17,-18,-10,-13,-14,-22,82,87,82,87,-12,-11,87,82,87,87,87,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,87,82,82,87,82,87,-149,-150,-145,-146,]),'COLON':([16,17,18,31,32,35,36,37,38,40,41,42,61,138,150,151,152,153,156,157,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,234,235,255,268,269,285,286,293,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,107,109,111,-12,-11,-57,-58,-59,-60,-49,-51,-50,-52,-53,-55,-54,-56,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-149,-150,284,-145,-146,295,296,284,]),'DO':([16,17,18,31,32,35,36,37,38,44,45,46,61,138,150,151,152,153,156,157,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,234,235,268,269,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,116,117,118,-12,-11,-57,-58,-59,-60,-49,-51,-50,-52,-53,-55,-54,-56,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-149,-150,-145,-146,]),'WHEN':([16,17,18,31,32,35,36,37,38,43,61,114,138,150,151,152,153,156,157,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,196,197,198,199,200,234,235,243,268,269,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,115,-12,115,-11,-57,-58,-59,-60,-49,-51,-50,-52,-53,-55,-54,-56,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-151,-152,-147,-148,-105,-107,-108,-11,-12,-149,-150,-106,-145,-146,]),'THEN':([16,17,18,31,32,35,36,37,38,179,180,181,182,196,199,200,234,235,268,269,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-151,-152,-147,-148,243,-11,-12,-149,-150,-145,-146,]),'R_BRACKET':([16,17,18,31,32,35,36,37,38,61,138,141,179,180,181,182,204,205,207,208,209,210,211,212,213,214,215,234,235,250,251,252,259,268,269,270,273,274,275,276,277,278,279,280,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,-15,-151,-152,-147,-148,247,-126,250,251,252,-8,-121,-10,-12,-13,-14,-149,-150,-123,-124,-125,-16,-145,-146,-127,-8,-9,-122,-116,-117,-118,-119,-120,]),'R_BRACE':([16,17,18,31,32,35,36,37,38,61,138,179,180,181,182,234,235,255,268,269,282,301,302,304,305,308,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,-151,-152,-147,-148,-149,-150,281,-145,-146,292,-143,-144,-141,-142,-140,]),'NIL':([21,],[54,]),'MATRIX':([21,],[63,]),'SET':([21,],[64,]),'HASH':([21,],[65,]),'ELLIPSIS':([35,38,105,106,212,277,],[101,103,183,185,101,101,]),'DOUBLE_PERIOD':([35,38,105,106,212,277,],[102,104,184,186,102,102,]),'L_BRACKET':([63,64,65,132,248,249,],[132,135,135,135,135,135,]),'PERIOD':([64,65,],[133,136,]),'NEW':([133,136,],[206,216,]),'L_BRACE':([216,],[255,]),'RW_DOUBLE_ARROW':([294,],[303,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'statements':([0,3,27,28,29,30,40,41,42,107,109,111,116,117,118,140,217,224,225,226,227,228,229,],[2,20,77,78,83,88,108,110,112,187,189,191,201,202,203,218,256,262,263,264,265,266,267,]),'statement':([0,3,27,28,29,30,40,41,42,107,109,111,116,117,118,140,217,224,225,226,227,228,229,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignment':([0,3,27,28,29,30,40,41,42,107,109,111,116,117,118,140,217,224,225,226,227,228,229,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'function':([0,3,27,28,29,30,40,41,42,107,109,111,116,117,118,140,217,224,225,226,227,228,229,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'control':([0,3,27,28,29,30,40,41,42,107,109,111,116,117,118,140,217,224,225,226,227,228,229,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'arithmetic':([0,3,21,27,28,29,30,40,41,42,47,48,49,50,51,52,107,109,111,116,117,118,140,217,224,225,226,227,228,229,],[7,7,57,7,7,7,7,7,7,7,120,123,125,127,129,131,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'numeric':([0,3,11,12,14,21,22,23,24,25,26,27,28,29,30,40,41,42,47,48,49,50,51,52,76,84,85,86,87,89,90,91,92,93,94,107,109,111,115,116,117,118,135,140,143,148,149,217,219,224,225,226,227,228,229,254,258,288,295,296,303,],[9,9,36,36,36,62,67,69,71,73,75,9,9,9,9,9,9,9,9,9,9,9,9,9,36,36,36,36,36,36,36,36,36,36,36,9,9,9,36,9,9,9,214,9,36,36,36,9,36,9,9,9,9,9,9,279,36,36,36,36,36,]),'value':([0,3,21,27,28,29,30,40,41,42,47,48,49,50,51,52,107,109,111,116,117,118,140,217,224,225,226,227,228,229,],[15,15,15,15,15,15,15,15,15,15,119,122,124,126,128,130,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'boolean':([11,12,14,21,76,79,80,81,82,84,85,86,87,89,90,91,92,93,94,115,135,143,148,149,219,254,258,288,295,296,303,],[28,40,44,61,61,150,151,152,153,158,158,158,158,61,61,61,61,61,61,200,213,61,224,227,61,278,61,61,61,61,61,]),'comparation':([11,12,14,84,85,86,87,115,148,149,],[29,41,45,156,159,161,163,197,225,228,]),'comparations':([11,12,14,84,85,86,87,115,148,149,],[30,42,46,157,160,162,164,198,226,229,]),'literal':([11,12,14,21,76,84,85,86,87,89,90,91,92,93,94,115,135,143,148,149,219,258,288,295,296,303,],[33,33,33,56,141,33,33,33,33,167,168,169,170,171,172,196,141,221,33,33,141,290,298,304,305,308,]),'range':([11,12,14,21,76,84,85,86,87,89,90,91,92,93,94,115,135,143,148,149,219,254,258,288,295,296,303,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,215,37,37,37,37,280,37,37,37,37,37,]),'struc':([21,],[55,]),'strucMatrix':([21,],[58,]),'strucSet':([21,],[59,]),'strucHash':([21,],[60,]),'whens':([43,114,],[113,195,]),'when':([43,114,],[114,114,]),'array':([64,65,132,248,249,],[134,137,205,205,272,]),'literals':([76,135,219,],[139,207,259,]),'elses':([78,83,88,108,110,112,147,],[145,155,166,188,190,192,223,]),'else':([78,83,88,108,110,112,113,147,],[146,146,146,146,146,146,193,146,]),'elsif':([78,83,88,108,110,112,147,],[147,147,147,147,147,147,147,]),'arrays':([132,248,],[204,270,]),'ids':([135,253,],[208,274,]),'elements':([135,254,],[209,275,]),'element':([135,254,],[211,211,]),'hashelems':([255,293,],[282,302,]),'hashelem':([255,293,],[283,301,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> statements','init',1,'p_init','semantic.py',29),
  ('statement -> assignment','statement',1,'p_statement','semantic.py',34),
  ('statement -> function','statement',1,'p_statement','semantic.py',35),
  ('statement -> control','statement',1,'p_statement','semantic.py',36),
  ('statement -> arithmetic','statement',1,'p_statement','semantic.py',37),
  ('statements -> statement','statements',1,'p_statements','semantic.py',43),
  ('statements -> statement statements','statements',2,'p_statements','semantic.py',44),
  ('ids -> ID','ids',1,'p_ids','semantic.py',50),
  ('ids -> ID COMMA ids','ids',3,'p_ids','semantic.py',51),
  ('literal -> STRING','literal',1,'p_literal','semantic.py',57),
  ('literal -> ID','literal',1,'p_literal','semantic.py',58),
  ('literal -> boolean','literal',1,'p_literal','semantic.py',59),
  ('literal -> numeric','literal',1,'p_literal','semantic.py',60),
  ('literal -> range','literal',1,'p_literal','semantic.py',61),
  ('literals -> literal','literals',1,'p_literals','semantic.py',67),
  ('literals -> literal COMMA literals','literals',3,'p_literals','semantic.py',68),
  ('boolean -> TRUE','boolean',1,'p_boolean','semantic.py',74),
  ('boolean -> FALSE','boolean',1,'p_boolean','semantic.py',75),
  ('numeric -> COMPLEX','numeric',1,'p_numeric','semantic.py',81),
  ('numeric -> RATIONAL','numeric',1,'p_numeric','semantic.py',82),
  ('numeric -> FLOAT','numeric',1,'p_numeric','semantic.py',83),
  ('numeric -> INTEGER','numeric',1,'p_numeric','semantic.py',84),
  ('value -> numeric','value',1,'p_value','semantic.py',90),
  ('value -> ID','value',1,'p_value','semantic.py',91),
  ('arithmetic -> value PLUS value','arithmetic',3,'p_arithmetic','semantic.py',97),
  ('arithmetic -> value PLUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',98),
  ('arithmetic -> value MINUS value','arithmetic',3,'p_arithmetic','semantic.py',99),
  ('arithmetic -> value MINUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',100),
  ('arithmetic -> value EXPO value','arithmetic',3,'p_arithmetic','semantic.py',101),
  ('arithmetic -> value EXPO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',102),
  ('arithmetic -> value MULT value','arithmetic',3,'p_arithmetic','semantic.py',103),
  ('arithmetic -> value MULT arithmetic','arithmetic',3,'p_arithmetic','semantic.py',104),
  ('arithmetic -> value DIV value','arithmetic',3,'p_arithmetic','semantic.py',105),
  ('arithmetic -> value DIV arithmetic','arithmetic',3,'p_arithmetic','semantic.py',106),
  ('arithmetic -> value MODULO value','arithmetic',3,'p_arithmetic','semantic.py',107),
  ('arithmetic -> value MODULO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',108),
  ('comparation -> literal EQUAL literal','comparation',3,'p_comparation','semantic.py',114),
  ('comparation -> ID EQUAL ID','comparation',3,'p_comparation','semantic.py',115),
  ('comparation -> literal NOT_EQ literal','comparation',3,'p_comparation','semantic.py',116),
  ('comparation -> ID NOT_EQ ID','comparation',3,'p_comparation','semantic.py',117),
  ('comparation -> literal LT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',118),
  ('comparation -> ID LT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',119),
  ('comparation -> literal GT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',120),
  ('comparation -> ID GT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',121),
  ('comparation -> literal LESS_THAN literal','comparation',3,'p_comparation','semantic.py',122),
  ('comparation -> ID LESS_THAN ID','comparation',3,'p_comparation','semantic.py',123),
  ('comparation -> literal GREATER_THAN literal','comparation',3,'p_comparation','semantic.py',124),
  ('comparation -> ID GREATER_THAN ID','comparation',3,'p_comparation','semantic.py',125),
  ('comparations -> comparation AND comparation','comparations',3,'p_comparations','semantic.py',131),
  ('comparations -> comparation LOGIC_AND comparation','comparations',3,'p_comparations','semantic.py',132),
  ('comparations -> comparation AND comparations','comparations',3,'p_comparations','semantic.py',133),
  ('comparations -> comparation LOGIC_AND comparations','comparations',3,'p_comparations','semantic.py',134),
  ('comparations -> comparation OR comparation','comparations',3,'p_comparations','semantic.py',135),
  ('comparations -> comparation LOGIC_OR comparation','comparations',3,'p_comparations','semantic.py',136),
  ('comparations -> comparation OR comparations','comparations',3,'p_comparations','semantic.py',137),
  ('comparations -> comparation LOGIC_OR comparations','comparations',3,'p_comparations','semantic.py',138),
  ('comparations -> boolean AND boolean','comparations',3,'p_comparations','semantic.py',139),
  ('comparations -> boolean LOGIC_AND boolean','comparations',3,'p_comparations','semantic.py',140),
  ('comparations -> boolean OR boolean','comparations',3,'p_comparations','semantic.py',141),
  ('comparations -> boolean LOGIC_OR boolean','comparations',3,'p_comparations','semantic.py',142),
  ('assignment -> ID ASSIGN ID','assignment',3,'p_assignment','semantic.py',148),
  ('assignment -> ID ASSIGN NIL','assignment',3,'p_assignment','semantic.py',149),
  ('assignment -> ID ASSIGN struc','assignment',3,'p_assignment','semantic.py',150),
  ('assignment -> ID ASSIGN literal','assignment',3,'p_assignment','semantic.py',151),
  ('assignment -> ID ASSIGN arithmetic','assignment',3,'p_assignment','semantic.py',152),
  ('assignment -> ID ADD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',159),
  ('assignment -> ID ADD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',160),
  ('assignment -> ID SUBS_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',161),
  ('assignment -> ID SUBS_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',162),
  ('assignment -> ID MULT_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',163),
  ('assignment -> ID MULT_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',164),
  ('assignment -> ID DIV_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',165),
  ('assignment -> ID DIV_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',166),
  ('assignment -> ID MOD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',167),
  ('assignment -> ID MOD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',168),
  ('function -> DEF ID L_PAREN literals R_PAREN statements END','function',7,'p_func','semantic.py',174),
  ('function -> DEF ID L_PAREN R_PAREN statements END','function',6,'p_func','semantic.py',175),
  ('function -> DEF ID statements END','function',4,'p_func','semantic.py',176),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END','function',9,'p_func','semantic.py',177),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN ID END','function',8,'p_func','semantic.py',178),
  ('function -> DEF ID statements RETURN ID END','function',6,'p_func','semantic.py',179),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END','function',9,'p_func','semantic.py',180),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN literal END','function',8,'p_func','semantic.py',181),
  ('function -> DEF ID statements RETURN literal END','function',6,'p_func','semantic.py',182),
  ('else -> ELSE boolean statements','else',3,'p_else','semantic.py',188),
  ('else -> ELSE comparation statements','else',3,'p_else','semantic.py',189),
  ('else -> ELSE comparations statements','else',3,'p_else','semantic.py',190),
  ('elsif -> ELSIF boolean statements','elsif',3,'p_elsif','semantic.py',196),
  ('elsif -> ELSIF comparation statements','elsif',3,'p_elsif','semantic.py',197),
  ('elsif -> ELSIF comparations statements','elsif',3,'p_elsif','semantic.py',198),
  ('elses -> else','elses',1,'p_elses','semantic.py',204),
  ('elses -> elsif elses','elses',2,'p_elses','semantic.py',205),
  ('control -> IF boolean statements END','control',4,'p_contol_if','semantic.py',211),
  ('control -> IF comparation statements END','control',4,'p_contol_if','semantic.py',212),
  ('control -> IF comparations statements END','control',4,'p_contol_if','semantic.py',213),
  ('control -> IF boolean statements elses END','control',5,'p_contol_if','semantic.py',214),
  ('control -> IF comparation statements elses END','control',5,'p_contol_if','semantic.py',215),
  ('control -> IF comparations statements elses END','control',5,'p_contol_if','semantic.py',216),
  ('control -> UNLESS boolean COLON statements END','control',5,'p_control_unless','semantic.py',222),
  ('control -> UNLESS comparation COLON statements END','control',5,'p_control_unless','semantic.py',223),
  ('control -> UNLESS comparations COLON statements END','control',5,'p_control_unless','semantic.py',224),
  ('control -> UNLESS boolean statements elses END','control',5,'p_control_unless','semantic.py',225),
  ('control -> UNLESS comparation statements elses END','control',5,'p_control_unless','semantic.py',226),
  ('control -> UNLESS comparations statements elses END','control',5,'p_control_unless','semantic.py',227),
  ('when -> WHEN literal','when',2,'p_when','semantic.py',233),
  ('when -> WHEN literal THEN','when',3,'p_when','semantic.py',234),
  ('when -> WHEN comparation','when',2,'p_when','semantic.py',235),
  ('when -> WHEN comparations','when',2,'p_when','semantic.py',236),
  ('whens -> when','whens',1,'p_whens','semantic.py',242),
  ('whens -> when whens','whens',2,'p_whens','semantic.py',243),
  ('control -> CASE ID whens else END','control',5,'p_control_case','semantic.py',249),
  ('control -> CASE ID whens END','control',4,'p_control_case','semantic.py',250),
  ('control -> WHILE boolean DO statements END','control',5,'p_control_while','semantic.py',256),
  ('control -> WHILE comparation DO statements END','control',5,'p_control_while','semantic.py',257),
  ('control -> WHILE comparations DO statements END','control',5,'p_control_while','semantic.py',258),
  ('element -> ID','element',1,'p_element','semantic.py',264),
  ('element -> STRING','element',1,'p_element','semantic.py',265),
  ('element -> boolean','element',1,'p_element','semantic.py',266),
  ('element -> numeric','element',1,'p_element','semantic.py',267),
  ('element -> range','element',1,'p_element','semantic.py',268),
  ('elements -> element','elements',1,'p_elements','semantic.py',274),
  ('elements -> element COMMA elements','elements',3,'p_elements','semantic.py',275),
  ('array -> L_BRACKET literals R_BRACKET','array',3,'p_array','semantic.py',281),
  ('array -> L_BRACKET ids R_BRACKET','array',3,'p_array','semantic.py',282),
  ('array -> L_BRACKET elements R_BRACKET','array',3,'p_array','semantic.py',283),
  ('arrays -> array','arrays',1,'p_arrays','semantic.py',289),
  ('arrays -> array COMMA arrays','arrays',3,'p_arrays','semantic.py',290),
  ('struc -> strucMatrix','struc',1,'p_struc','semantic.py',296),
  ('struc -> strucSet','struc',1,'p_struc','semantic.py',297),
  ('struc -> strucHash','struc',1,'p_struc','semantic.py',298),
  ('strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET','strucMatrix',4,'p_strucMatrix','semantic.py',304),
  ('strucSet -> SET PERIOD NEW','strucSet',3,'p_strucSet','semantic.py',309),
  ('strucSet -> SET PERIOD NEW L_PAREN R_PAREN','strucSet',5,'p_strucSet','semantic.py',310),
  ('strucSet -> SET PERIOD NEW L_PAREN array R_PAREN','strucSet',6,'p_strucSet','semantic.py',311),
  ('strucSet -> SET array','strucSet',2,'p_strucSet','semantic.py',312),
  ('strucHash -> HASH PERIOD NEW','strucHash',3,'p_strucHash','semantic.py',318),
  ('strucHash -> HASH PERIOD NEW L_BRACE R_BRACE','strucHash',5,'p_strucHash','semantic.py',319),
  ('strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE','strucHash',6,'p_strucHash','semantic.py',320),
  ('strucHash -> HASH array','strucHash',2,'p_strucHash','semantic.py',321),
  ('hashelem -> COLON ID RW_DOUBLE_ARROW literal','hashelem',4,'p_hashelem_rocket','semantic.py',327),
  ('hashelem -> ID COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',328),
  ('hashelem -> STRING COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',329),
  ('hashelems -> hashelem COMMA hashelem','hashelems',3,'p_hashelems','semantic.py',335),
  ('hashelems -> hashelem COMMA hashelems','hashelems',3,'p_hashelems','semantic.py',336),
  ('range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN','range',5,'p_range','semantic.py',342),
  ('range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN','range',5,'p_range','semantic.py',343),
  ('range -> INTEGER ELLIPSIS INTEGER','range',3,'p_range','semantic.py',344),
  ('range -> INTEGER DOUBLE_PERIOD INTEGER','range',3,'p_range','semantic.py',345),
  ('range -> L_PAREN STRING ELLIPSIS STRING','range',4,'p_range','semantic.py',346),
  ('range -> L_PAREN STRING DOUBLE_PERIOD STRING','range',4,'p_range','semantic.py',347),
  ('range -> STRING ELLIPSIS STRING','range',3,'p_range','semantic.py',348),
  ('range -> STRING DOUBLE_PERIOD STRING','range',3,'p_range','semantic.py',349),
]
