
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initADD_ASSIGN AMPERSAND AND ARRAY ASSIGN AT_SIGN BEGIN BREAK CASE CLASS COLON COMMA COMPLEX DEF DIV DIV_ASSIGN DO DOLLAR_SIGN DOUBLE_PERIOD ELLIPSIS ELSE ELSIF END ENSURE EQUAL EXPO FALSE FLOAT FOR GREATER_THAN GT_OR_EQ HASH ID IF IN INTEGER LESS_THAN LINE_COMMENT LOGIC_AND LOGIC_NOT LOGIC_OR LT_OR_EQ L_BRACE L_BRACKET L_PAREN MATRIX MINUS MODULO MOD_ASSIGN MULT MULT_ASSIGN NEW NEXT NIL NOT NOT_EQ OR PERIOD PLUS RATIONAL RETRY RETURN RW_ARROW RW_DOUBLE_ARROW R_BRACE R_BRACKET R_PAREN SELF SEMICOLON SET STRING SUBS_ASSIGN SUPER THEN TILDE TRUE UNDERSCORE UNLESS UNTIL VERTICAL_BAR WHEN WHILEinit : statementsstatement : assignment\n        | function\n        | control\n        | arithmetic\n        statements : statement\n        | statement statements\n        ids : ID\n        | ID COMMA ids\n        literal : STRING\n        | ID\n        | boolean\n        | numeric\n        | range\n        literals : literal\n        | literal COMMA literals\n        boolean : TRUE\n        | FALSE\n        numeric : COMPLEX\n        | RATIONAL\n        | FLOAT\n        | INTEGER\n        value : numeric\n        | ID\n        arithmetic : value PLUS value\n        | value PLUS arithmetic\n        | value MINUS value\n        | value MINUS arithmetic\n        | value EXPO value\n        | value EXPO arithmetic\n        | value MULT value\n        | value MULT arithmetic\n        | value DIV value\n        | value DIV arithmetic\n        | value MODULO value\n        | value MODULO arithmetic\n        comparation : literal EQUAL literal\n        | ID EQUAL literal\n        | literal EQUAL ID\n        | ID EQUAL ID\n        | literal NOT_EQ literal\n        | ID NOT_EQ literal\n        | literal NOT_EQ ID\n        | ID NOT_EQ ID\n        | literal LT_OR_EQ literal\n        | ID LT_OR_EQ literal\n        | literal LT_OR_EQ ID\n        | ID LT_OR_EQ ID\n        | literal GT_OR_EQ literal\n        | ID GT_OR_EQ literal\n        | literal GT_OR_EQ ID\n        | ID GT_OR_EQ ID\n        | literal LESS_THAN literal\n        | ID LESS_THAN literal\n        | literal LESS_THAN ID\n        | ID LESS_THAN ID\n        | literal GREATER_THAN literal\n        | ID GREATER_THAN literal\n        | literal GREATER_THAN ID\n        | ID GREATER_THAN ID\n        comparations : comparation AND comparation\n        | comparation LOGIC_AND comparation\n        | comparation AND comparations\n        | comparation LOGIC_AND comparations\n        | comparation OR comparation\n        | comparation LOGIC_OR comparation\n        | comparation OR comparations\n        | comparation LOGIC_OR comparations\n        | boolean AND boolean\n        | boolean LOGIC_AND boolean\n        | boolean OR boolean\n        | boolean LOGIC_OR boolean\n        assignment : ID ASSIGN ID\n        | ID ASSIGN NIL\n        | ID ASSIGN struc\n        | ID ASSIGN literal\n        | ID ASSIGN arithmetic\n        | strucArray ASSIGN ID\n        | strucArray ASSIGN strucArray\n        assignment : ID ADD_ASSIGN ID\n        | ID ADD_ASSIGN numeric\n        | ID SUBS_ASSIGN ID\n        | ID SUBS_ASSIGN numeric\n        | ID MULT_ASSIGN ID\n        | ID MULT_ASSIGN numeric\n        | ID DIV_ASSIGN ID\n        | ID DIV_ASSIGN numeric\n        | ID MOD_ASSIGN ID\n        | ID MOD_ASSIGN numeric\n        function : DEF ID L_PAREN literals R_PAREN statements END\n        | DEF ID L_PAREN R_PAREN statements END\n        | DEF ID statements END\n        | DEF ID L_PAREN literals R_PAREN statements RETURN ID END\n        | DEF ID L_PAREN R_PAREN statements RETURN ID END\n        | DEF ID statements RETURN ID END\n        | DEF ID L_PAREN literals R_PAREN statements RETURN literal END\n        | DEF ID L_PAREN R_PAREN statements RETURN literal END\n        | DEF ID statements RETURN literal END\n        else : ELSE boolean statements\n        | ELSE comparation statements\n        | ELSE comparations statements\n        elsif : ELSIF boolean statements\n        | ELSIF comparation statements\n        | ELSIF comparations statements\n        elses : else\n        | elsif elses\n        control : IF boolean statements END\n        | IF comparation statements END\n        | IF comparations statements END\n        | IF boolean statements elses END\n        | IF comparation statements elses END\n        | IF comparations statements elses END\n        control : UNLESS boolean COLON statements END\n        | UNLESS comparation COLON statements END\n        | UNLESS comparations COLON statements END\n        | UNLESS boolean statements elses END\n        | UNLESS comparation statements elses END\n        | UNLESS comparations statements elses END\n        when : WHEN literal\n        | WHEN literal THEN\n        | WHEN comparation\n        | WHEN comparations\n        whens : when\n        | when whens\n        control : CASE ID whens else END\n        | CASE ID whens END\n        control : WHILE boolean DO statements END\n        | WHILE comparation DO statements END\n        | WHILE comparations DO statements END\n        element : ID\n        | STRING\n        | boolean\n        | numeric\n        | range\n        elements : element\n        | element COMMA elements\n        strucArray : ID L_BRACKET ID R_BRACKET\n        | ID L_BRACKET arithmetic R_BRACKET\n        array : L_BRACKET literals R_BRACKET\n        | L_BRACKET ids R_BRACKET\n        | L_BRACKET elements R_BRACKET\n        arrays : array\n        | array COMMA arrays\n        struc : strucMatrix\n        | strucSet\n        | strucHash\n        | strucArray\n        strucMatrix : MATRIX L_BRACKET arrays R_BRACKETstrucSet : SET PERIOD NEW\n        | SET PERIOD NEW L_PAREN R_PAREN\n        | SET PERIOD NEW L_PAREN array R_PAREN\n        | SET array\n        strucHash : HASH PERIOD NEW\n        | HASH PERIOD NEW L_BRACE R_BRACE\n        | HASH PERIOD NEW L_BRACE hashelems R_BRACE\n        | HASH array\n        hashelem : COLON ID RW_DOUBLE_ARROW literal\n        | ID COLON literal\n        | STRING COLON literal\n        hashelems : hashelem COMMA hashelem\n        | hashelem COMMA hashelems\n        range : L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN\n        | L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN\n        | INTEGER ELLIPSIS INTEGER\n        | INTEGER DOUBLE_PERIOD INTEGER\n        | L_PAREN STRING ELLIPSIS STRING\n        | L_PAREN STRING DOUBLE_PERIOD STRING\n        | STRING ELLIPSIS STRING\n        | STRING DOUBLE_PERIOD STRING\n        '
    
_lr_action_items = {'ID':([0,3,4,5,6,7,10,11,12,13,14,15,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,39,40,41,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,145,146,147,150,152,153,154,158,159,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,241,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,275,276,277,279,280,282,283,290,291,293,303,306,309,310,313,314,315,317,318,321,322,325,328,329,],[8,8,-2,-3,-4,-5,-23,30,37,37,46,37,-19,-20,-21,-22,56,70,72,74,76,78,80,83,8,8,8,8,-17,-18,-10,-13,-14,-22,8,8,8,129,129,129,129,129,129,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,148,37,37,37,37,178,180,182,184,186,188,189,191,193,195,197,199,8,8,8,221,8,8,8,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,232,-156,-137,-138,8,-92,242,-107,37,37,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,8,148,-110,8,8,8,8,8,8,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,295,298,307,-91,311,-95,-98,-162,-163,-150,-154,316,-90,319,-151,-155,307,148,148,-94,-97,148,-93,-96,]),'DEF':([0,3,4,5,6,7,10,17,18,19,20,30,31,32,33,34,35,38,39,40,41,43,44,45,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,115,117,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,150,152,154,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,279,282,283,290,291,293,303,309,313,314,321,322,328,329,],[11,11,-2,-3,-4,-5,-23,-19,-20,-21,-22,11,11,11,11,-17,-18,-10,-13,-14,-22,11,11,11,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,11,11,11,11,11,11,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,11,-92,-107,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,11,-110,11,11,11,11,11,11,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'IF':([0,3,4,5,6,7,10,17,18,19,20,30,31,32,33,34,35,38,39,40,41,43,44,45,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,115,117,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,150,152,154,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,279,282,283,290,291,293,303,309,313,314,321,322,328,329,],[12,12,-2,-3,-4,-5,-23,-19,-20,-21,-22,12,12,12,12,-17,-18,-10,-13,-14,-22,12,12,12,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,12,12,12,12,12,12,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,12,-92,-107,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,12,-110,12,12,12,12,12,12,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'UNLESS':([0,3,4,5,6,7,10,17,18,19,20,30,31,32,33,34,35,38,39,40,41,43,44,45,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,115,117,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,150,152,154,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,279,282,283,290,291,293,303,309,313,314,321,322,328,329,],[13,13,-2,-3,-4,-5,-23,-19,-20,-21,-22,13,13,13,13,-17,-18,-10,-13,-14,-22,13,13,13,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,13,13,13,13,13,13,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,13,-92,-107,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,13,-110,13,13,13,13,13,13,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'CASE':([0,3,4,5,6,7,10,17,18,19,20,30,31,32,33,34,35,38,39,40,41,43,44,45,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,115,117,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,150,152,154,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,279,282,283,290,291,293,303,309,313,314,321,322,328,329,],[14,14,-2,-3,-4,-5,-23,-19,-20,-21,-22,14,14,14,14,-17,-18,-10,-13,-14,-22,14,14,14,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,14,14,14,14,14,14,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,14,-92,-107,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,14,-110,14,14,14,14,14,14,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'WHILE':([0,3,4,5,6,7,10,17,18,19,20,30,31,32,33,34,35,38,39,40,41,43,44,45,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,115,117,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,150,152,154,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,279,282,283,290,291,293,303,309,313,314,321,322,328,329,],[15,15,-2,-3,-4,-5,-23,-19,-20,-21,-22,15,15,15,15,-17,-18,-10,-13,-14,-22,15,15,15,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,15,15,15,15,15,15,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,15,-92,-107,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,15,-110,15,15,15,15,15,15,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'COMPLEX':([0,3,4,5,6,7,10,12,13,15,17,18,19,20,22,23,24,25,26,27,28,30,31,32,33,34,35,38,39,40,41,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,145,146,147,150,152,153,154,158,159,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,241,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,276,279,280,282,283,290,291,293,303,309,310,313,314,317,318,321,322,325,328,329,],[17,17,-2,-3,-4,-5,-23,17,17,17,-19,-20,-21,-22,17,17,17,17,17,17,17,17,17,17,17,-17,-18,-10,-13,-14,-22,17,17,17,17,17,17,17,17,17,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,17,-156,-137,-138,17,-92,17,-107,17,17,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,17,17,-110,17,17,17,17,17,17,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,17,-91,17,-95,-98,-162,-163,-150,-154,-90,17,-151,-155,17,17,-94,-97,17,-93,-96,]),'RATIONAL':([0,3,4,5,6,7,10,12,13,15,17,18,19,20,22,23,24,25,26,27,28,30,31,32,33,34,35,38,39,40,41,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,145,146,147,150,152,153,154,158,159,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,241,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,276,279,280,282,283,290,291,293,303,309,310,313,314,317,318,321,322,325,328,329,],[18,18,-2,-3,-4,-5,-23,18,18,18,-19,-20,-21,-22,18,18,18,18,18,18,18,18,18,18,18,-17,-18,-10,-13,-14,-22,18,18,18,18,18,18,18,18,18,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,18,-156,-137,-138,18,-92,18,-107,18,18,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,18,18,-110,18,18,18,18,18,18,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,18,-91,18,-95,-98,-162,-163,-150,-154,-90,18,-151,-155,18,18,-94,-97,18,-93,-96,]),'FLOAT':([0,3,4,5,6,7,10,12,13,15,17,18,19,20,22,23,24,25,26,27,28,30,31,32,33,34,35,38,39,40,41,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,145,146,147,150,152,153,154,158,159,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,228,238,239,241,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,276,279,280,282,283,290,291,293,303,309,310,313,314,317,318,321,322,325,328,329,],[19,19,-2,-3,-4,-5,-23,19,19,19,-19,-20,-21,-22,19,19,19,19,19,19,19,19,19,19,19,-17,-18,-10,-13,-14,-22,19,19,19,19,19,19,19,19,19,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,19,-156,-137,-138,19,-92,19,-107,19,19,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-149,-153,19,19,-110,19,19,19,19,19,19,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,19,-91,19,-95,-98,-162,-163,-150,-154,-90,19,-151,-155,19,19,-94,-97,19,-93,-96,]),'INTEGER':([0,3,4,5,6,7,10,12,13,15,17,18,19,20,22,23,24,25,26,27,28,30,31,32,33,34,35,38,39,40,41,42,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,111,112,115,117,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,145,146,147,150,152,153,154,158,159,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,216,228,238,239,241,244,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,276,279,280,282,283,290,291,293,303,309,310,313,314,317,318,321,322,325,328,329,],[20,20,-2,-3,-4,-5,-23,41,41,41,-19,-20,-21,-22,41,20,20,20,20,20,20,20,20,20,20,-17,-18,-10,-13,-14,-22,113,20,20,20,20,20,20,20,20,20,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,203,204,20,20,20,41,20,20,20,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,41,-156,-137,-138,20,-92,41,-107,41,41,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,254,255,-126,-149,-153,20,41,-110,20,20,20,20,20,20,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,41,-91,41,-95,-98,-162,-163,-150,-154,-90,41,-151,-155,41,41,-94,-97,41,-93,-96,]),'$end':([1,2,3,4,5,6,7,10,17,18,19,20,21,34,35,38,40,41,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,152,154,164,175,201,202,203,204,216,228,238,244,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,279,282,283,290,291,293,303,309,313,314,321,322,328,329,],[0,-1,-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,-92,-107,-108,-109,-168,-169,-164,-165,-126,-149,-153,-110,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'END':([3,4,5,6,7,10,17,18,19,20,21,34,35,38,39,40,41,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,85,86,91,96,121,122,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,152,154,155,156,160,161,162,163,164,165,166,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,238,240,242,243,244,245,252,253,256,257,258,259,260,261,262,263,264,265,266,267,268,269,272,273,274,278,279,282,283,284,285,286,290,291,293,303,309,311,312,313,314,319,320,321,322,328,329,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-13,-14,-22,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,152,154,164,175,216,-123,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,-92,-107,244,-105,-69,-70,-71,-72,-108,252,-61,-63,-62,-64,-65,-67,-66,-68,-109,253,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,258,259,260,261,262,263,264,-126,-124,-119,-121,-122,-11,-12,266,267,268,-149,-153,279,282,283,-110,-106,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-120,-127,-128,-129,-148,-139,-140,-141,309,-91,-95,-98,-99,-100,-101,-162,-163,-150,-154,-90,321,322,-151,-155,328,329,-94,-97,-93,-96,]),'RETURN':([3,4,5,6,7,10,17,18,19,20,21,34,35,38,40,41,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,85,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,152,154,164,175,201,202,203,204,216,228,238,240,244,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,278,279,282,283,290,291,293,303,309,313,314,321,322,328,329,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,153,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,-92,-107,-108,-109,-168,-169,-164,-165,-126,-149,-153,280,-110,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,310,-91,-95,-98,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'ELSE':([3,4,5,6,7,10,17,18,19,20,21,34,35,38,39,40,41,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,86,91,96,116,118,120,121,122,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,152,154,157,160,161,162,163,164,166,167,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,216,217,218,219,220,221,222,228,238,244,252,253,256,257,258,259,260,261,262,263,264,265,266,267,268,269,272,273,274,279,282,283,287,288,289,290,291,293,303,309,313,314,321,322,328,329,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-13,-14,-22,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,158,158,158,158,158,158,158,-123,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,-92,-107,158,-69,-70,-71,-72,-108,-61,-63,-62,-64,-65,-67,-66,-68,-109,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-126,-124,-119,-121,-122,-11,-12,-149,-153,-110,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-120,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-102,-103,-104,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'ELSIF':([3,4,5,6,7,10,17,18,19,20,21,34,35,38,40,41,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,82,83,86,91,96,116,118,120,127,128,129,130,131,132,133,134,135,136,137,138,139,142,145,146,147,152,154,157,164,175,201,202,203,204,216,228,238,244,252,253,256,257,258,259,260,261,262,263,264,266,267,268,269,272,273,274,279,282,283,287,288,289,290,291,293,303,309,313,314,321,322,328,329,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-74,-75,-76,-77,-144,-145,-146,-147,-12,-13,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-79,-78,159,159,159,159,159,159,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-152,-156,-137,-138,-92,-107,159,-108,-109,-168,-169,-164,-165,-126,-149,-153,-110,-111,-112,-166,-167,-113,-116,-114,-117,-115,-118,-125,-127,-128,-129,-148,-139,-140,-141,-91,-95,-98,-102,-103,-104,-162,-163,-150,-154,-90,-151,-155,-94,-97,-93,-96,]),'ASSIGN':([8,9,146,147,],[22,29,-137,-138,]),'ADD_ASSIGN':([8,],[23,]),'SUBS_ASSIGN':([8,],[24,]),'MULT_ASSIGN':([8,],[25,]),'DIV_ASSIGN':([8,],[26,]),'MOD_ASSIGN':([8,],[27,]),'L_BRACKET':([8,56,67,68,69,83,140,270,271,],[28,28,140,143,143,28,143,143,143,]),'PLUS':([8,10,16,17,18,19,20,41,56,66,80,127,129,130,132,134,136,138,],[-24,-23,50,-19,-20,-21,-22,-22,-24,-23,-24,50,-24,50,50,50,50,50,]),'MINUS':([8,10,16,17,18,19,20,41,56,66,80,127,129,130,132,134,136,138,],[-24,-23,51,-19,-20,-21,-22,-22,-24,-23,-24,51,-24,51,51,51,51,51,]),'EXPO':([8,10,16,17,18,19,20,41,56,66,80,127,129,130,132,134,136,138,],[-24,-23,52,-19,-20,-21,-22,-22,-24,-23,-24,52,-24,52,52,52,52,52,]),'MULT':([8,10,16,17,18,19,20,41,56,66,80,127,129,130,132,134,136,138,],[-24,-23,53,-19,-20,-21,-22,-22,-24,-23,-24,53,-24,53,53,53,53,53,]),'DIV':([8,10,16,17,18,19,20,41,56,66,80,127,129,130,132,134,136,138,],[-24,-23,54,-19,-20,-21,-22,-22,-24,-23,-24,54,-24,54,54,54,54,54,]),'MODULO':([8,10,16,17,18,19,20,41,56,66,80,127,129,130,132,134,136,138,],[-24,-23,55,-19,-20,-21,-22,-22,-24,-23,-24,55,-24,55,55,55,55,55,]),'R_BRACKET':([10,17,18,19,20,34,35,38,39,40,41,65,80,81,127,128,129,130,131,132,133,134,135,136,137,138,139,148,151,201,202,203,204,226,227,229,230,231,232,233,234,235,236,237,256,257,272,273,274,281,290,291,292,295,296,297,298,299,300,301,302,],[-23,-19,-20,-21,-22,-17,-18,-10,-13,-14,-22,-12,146,147,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-11,-15,-168,-169,-164,-165,269,-142,272,273,274,-8,-135,-10,-12,-13,-14,-166,-167,-139,-140,-141,-16,-162,-163,-143,-8,-9,-136,-130,-131,-132,-133,-134,]),'TRUE':([12,13,15,22,84,87,88,89,90,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,123,143,153,158,159,241,276,280,310,317,318,325,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'FALSE':([12,13,15,22,84,87,88,89,90,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,123,143,153,158,159,241,276,280,310,317,318,325,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'STRING':([12,13,15,22,42,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,123,143,153,158,159,207,208,241,276,277,280,310,315,317,318,325,],[38,38,38,38,114,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,201,202,38,234,38,38,38,256,257,38,299,308,38,38,308,38,38,38,]),'L_PAREN':([12,13,15,22,30,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,123,143,153,158,159,228,241,276,280,310,317,318,325,],[42,42,42,42,84,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,271,42,42,42,42,42,42,42,]),'EQUAL':([17,18,19,31,34,35,36,37,38,39,40,41,43,47,168,201,202,203,204,218,221,222,246,249,256,257,290,291,],[-19,-20,-21,-12,-17,-18,97,103,-10,-13,-14,-22,-12,-12,-12,-168,-169,-164,-165,97,103,-12,-12,-12,-166,-167,-162,-163,]),'NOT_EQ':([17,18,19,31,34,35,36,37,38,39,40,41,43,47,168,201,202,203,204,218,221,222,246,249,256,257,290,291,],[-19,-20,-21,-12,-17,-18,98,104,-10,-13,-14,-22,-12,-12,-12,-168,-169,-164,-165,98,104,-12,-12,-12,-166,-167,-162,-163,]),'LT_OR_EQ':([17,18,19,31,34,35,36,37,38,39,40,41,43,47,168,201,202,203,204,218,221,222,246,249,256,257,290,291,],[-19,-20,-21,-12,-17,-18,99,105,-10,-13,-14,-22,-12,-12,-12,-168,-169,-164,-165,99,105,-12,-12,-12,-166,-167,-162,-163,]),'GT_OR_EQ':([17,18,19,31,34,35,36,37,38,39,40,41,43,47,168,201,202,203,204,218,221,222,246,249,256,257,290,291,],[-19,-20,-21,-12,-17,-18,100,106,-10,-13,-14,-22,-12,-12,-12,-168,-169,-164,-165,100,106,-12,-12,-12,-166,-167,-162,-163,]),'LESS_THAN':([17,18,19,31,34,35,36,37,38,39,40,41,43,47,168,201,202,203,204,218,221,222,246,249,256,257,290,291,],[-19,-20,-21,-12,-17,-18,101,107,-10,-13,-14,-22,-12,-12,-12,-168,-169,-164,-165,101,107,-12,-12,-12,-166,-167,-162,-163,]),'GREATER_THAN':([17,18,19,31,34,35,36,37,38,39,40,41,43,47,168,201,202,203,204,218,221,222,246,249,256,257,290,291,],[-19,-20,-21,-12,-17,-18,102,108,-10,-13,-14,-22,-12,-12,-12,-168,-169,-164,-165,102,108,-12,-12,-12,-166,-167,-162,-163,]),'COMMA':([17,18,19,34,35,38,39,40,41,65,148,151,201,202,203,204,227,232,233,234,235,236,237,256,257,272,273,274,290,291,295,298,299,300,301,302,305,323,326,327,330,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,241,-168,-169,-164,-165,270,275,276,-10,-12,-13,-14,-166,-167,-139,-140,-141,-162,-163,275,-130,-131,-132,-133,-134,315,315,-158,-159,-157,]),'R_PAREN':([17,18,19,34,35,38,39,40,41,65,84,148,149,151,201,202,203,204,254,255,256,257,271,272,273,274,281,290,291,294,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,150,-11,239,-15,-168,-169,-164,-165,290,291,-166,-167,293,-139,-140,-141,-16,-162,-163,313,]),'AND':([17,18,19,31,32,34,35,38,39,40,41,43,44,47,48,65,166,168,169,171,173,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,219,222,246,247,249,250,256,257,290,291,],[-19,-20,-21,87,92,-17,-18,-10,-13,-14,-22,87,92,87,92,-12,92,87,92,92,92,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,92,87,87,92,87,92,-166,-167,-162,-163,]),'LOGIC_AND':([17,18,19,31,32,34,35,38,39,40,41,43,44,47,48,65,166,168,169,171,173,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,219,222,246,247,249,250,256,257,290,291,],[-19,-20,-21,88,93,-17,-18,-10,-13,-14,-22,88,93,88,93,-12,93,88,93,93,93,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,93,88,88,93,88,93,-166,-167,-162,-163,]),'OR':([17,18,19,31,32,34,35,38,39,40,41,43,44,47,48,65,166,168,169,171,173,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,219,222,246,247,249,250,256,257,290,291,],[-19,-20,-21,89,94,-17,-18,-10,-13,-14,-22,89,94,89,94,-12,94,89,94,94,94,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,94,89,89,94,89,94,-166,-167,-162,-163,]),'LOGIC_OR':([17,18,19,31,32,34,35,38,39,40,41,43,44,47,48,65,166,168,169,171,173,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,219,222,246,247,249,250,256,257,290,291,],[-19,-20,-21,90,95,-17,-18,-10,-13,-14,-22,90,95,90,95,-12,95,90,95,95,95,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,95,90,90,95,90,95,-166,-167,-162,-163,]),'COLON':([17,18,19,34,35,38,39,40,41,43,44,45,65,160,161,162,163,166,167,169,170,171,172,173,174,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,256,257,277,290,291,307,308,315,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,115,117,119,-12,-69,-70,-71,-72,-61,-63,-62,-64,-65,-67,-66,-68,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-166,-167,306,-162,-163,317,318,306,]),'DO':([17,18,19,34,35,38,39,40,41,47,48,49,65,160,161,162,163,166,167,169,170,171,172,173,174,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,256,257,290,291,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,124,125,126,-12,-69,-70,-71,-72,-61,-63,-62,-64,-65,-67,-66,-68,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-166,-167,-162,-163,]),'WHEN':([17,18,19,34,35,38,39,40,41,46,65,122,160,161,162,163,166,167,169,170,171,172,173,174,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,218,219,220,221,222,256,257,265,290,291,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,123,-12,123,-69,-70,-71,-72,-61,-63,-62,-64,-65,-67,-66,-68,-37,-11,-41,-11,-45,-11,-49,-11,-53,-11,-57,-11,-11,-38,-11,-42,-11,-46,-11,-50,-11,-54,-11,-58,-168,-169,-164,-165,-119,-121,-122,-11,-12,-166,-167,-120,-162,-163,]),'THEN':([17,18,19,34,35,38,39,40,41,201,202,203,204,218,221,222,256,257,290,291,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-168,-169,-164,-165,265,-11,-12,-166,-167,-162,-163,]),'R_BRACE':([17,18,19,34,35,38,39,40,41,65,148,201,202,203,204,256,257,277,290,291,304,323,324,326,327,330,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,-168,-169,-164,-165,-166,-167,303,-162,-163,314,-160,-161,-158,-159,-157,]),'NIL':([22,],[57,]),'MATRIX':([22,],[67,]),'SET':([22,],[68,]),'HASH':([22,],[69,]),'ELLIPSIS':([38,41,113,114,234,299,],[109,111,205,207,109,109,]),'DOUBLE_PERIOD':([38,41,113,114,234,299,],[110,112,206,208,110,110,]),'PERIOD':([68,69,],[141,144,]),'NEW':([141,144,],[228,238,]),'L_BRACE':([238,],[277,]),'RW_DOUBLE_ARROW':([316,],[325,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'statements':([0,3,30,31,32,33,43,44,45,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[2,21,85,86,91,96,116,118,120,209,211,213,223,224,225,240,278,284,285,286,287,288,289,]),'statement':([0,3,30,31,32,33,43,44,45,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignment':([0,3,30,31,32,33,43,44,45,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'function':([0,3,30,31,32,33,43,44,45,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'control':([0,3,30,31,32,33,43,44,45,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'arithmetic':([0,3,22,28,30,31,32,33,43,44,45,50,51,52,53,54,55,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[7,7,60,81,7,7,7,7,7,7,7,128,131,133,135,137,139,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'strucArray':([0,3,22,29,30,31,32,33,43,44,45,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[9,9,64,82,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'numeric':([0,3,12,13,15,22,23,24,25,26,27,28,30,31,32,33,43,44,45,50,51,52,53,54,55,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,123,124,125,126,143,150,153,158,159,239,241,246,247,248,249,250,251,276,280,310,317,318,325,],[10,10,39,39,39,66,71,73,75,77,79,10,10,10,10,10,10,10,10,10,10,10,10,10,10,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,10,10,10,39,10,10,10,236,10,39,39,39,10,39,10,10,10,10,10,10,301,39,39,39,39,39,]),'value':([0,3,22,28,30,31,32,33,43,44,45,50,51,52,53,54,55,115,117,119,124,125,126,150,239,246,247,248,249,250,251,],[16,16,16,16,16,16,16,16,16,16,16,127,130,132,134,136,138,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'boolean':([12,13,15,22,84,87,88,89,90,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,123,143,153,158,159,241,276,280,310,317,318,325,],[31,43,47,65,65,160,161,162,163,168,168,168,168,65,65,65,65,65,65,65,65,65,65,65,65,222,235,65,246,249,65,300,65,65,65,65,65,]),'comparation':([12,13,15,92,93,94,95,123,158,159,],[32,44,48,166,169,171,173,219,247,250,]),'comparations':([12,13,15,92,93,94,95,123,158,159,],[33,45,49,167,170,172,174,220,248,251,]),'literal':([12,13,15,22,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,123,143,153,158,159,241,280,310,317,318,325,],[36,36,36,59,151,36,36,36,36,177,179,181,183,185,187,190,192,194,196,198,200,218,151,243,36,36,151,312,320,326,327,330,]),'range':([12,13,15,22,84,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,123,143,153,158,159,241,276,280,310,317,318,325,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,237,40,40,40,40,302,40,40,40,40,40,]),'struc':([22,],[58,]),'strucMatrix':([22,],[61,]),'strucSet':([22,],[62,]),'strucHash':([22,],[63,]),'whens':([46,122,],[121,217,]),'when':([46,122,],[122,122,]),'array':([68,69,140,270,271,],[142,145,227,227,294,]),'literals':([84,143,241,],[149,229,281,]),'elses':([86,91,96,116,118,120,157,],[155,165,176,210,212,214,245,]),'else':([86,91,96,116,118,120,121,157,],[156,156,156,156,156,156,215,156,]),'elsif':([86,91,96,116,118,120,157,],[157,157,157,157,157,157,157,]),'arrays':([140,270,],[226,292,]),'ids':([143,275,],[230,296,]),'elements':([143,276,],[231,297,]),'element':([143,276,],[233,233,]),'hashelems':([277,315,],[304,324,]),'hashelem':([277,315,],[305,323,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> statements','init',1,'p_init','semantic.py',29),
  ('statement -> assignment','statement',1,'p_statement','semantic.py',33),
  ('statement -> function','statement',1,'p_statement','semantic.py',34),
  ('statement -> control','statement',1,'p_statement','semantic.py',35),
  ('statement -> arithmetic','statement',1,'p_statement','semantic.py',36),
  ('statements -> statement','statements',1,'p_statements','semantic.py',41),
  ('statements -> statement statements','statements',2,'p_statements','semantic.py',42),
  ('ids -> ID','ids',1,'p_ids','semantic.py',47),
  ('ids -> ID COMMA ids','ids',3,'p_ids','semantic.py',48),
  ('literal -> STRING','literal',1,'p_literal','semantic.py',53),
  ('literal -> ID','literal',1,'p_literal','semantic.py',54),
  ('literal -> boolean','literal',1,'p_literal','semantic.py',55),
  ('literal -> numeric','literal',1,'p_literal','semantic.py',56),
  ('literal -> range','literal',1,'p_literal','semantic.py',57),
  ('literals -> literal','literals',1,'p_literals','semantic.py',62),
  ('literals -> literal COMMA literals','literals',3,'p_literals','semantic.py',63),
  ('boolean -> TRUE','boolean',1,'p_boolean','semantic.py',68),
  ('boolean -> FALSE','boolean',1,'p_boolean','semantic.py',69),
  ('numeric -> COMPLEX','numeric',1,'p_numeric','semantic.py',74),
  ('numeric -> RATIONAL','numeric',1,'p_numeric','semantic.py',75),
  ('numeric -> FLOAT','numeric',1,'p_numeric','semantic.py',76),
  ('numeric -> INTEGER','numeric',1,'p_numeric','semantic.py',77),
  ('value -> numeric','value',1,'p_value','semantic.py',82),
  ('value -> ID','value',1,'p_value','semantic.py',83),
  ('arithmetic -> value PLUS value','arithmetic',3,'p_arithmetic','semantic.py',88),
  ('arithmetic -> value PLUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',89),
  ('arithmetic -> value MINUS value','arithmetic',3,'p_arithmetic','semantic.py',90),
  ('arithmetic -> value MINUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',91),
  ('arithmetic -> value EXPO value','arithmetic',3,'p_arithmetic','semantic.py',92),
  ('arithmetic -> value EXPO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',93),
  ('arithmetic -> value MULT value','arithmetic',3,'p_arithmetic','semantic.py',94),
  ('arithmetic -> value MULT arithmetic','arithmetic',3,'p_arithmetic','semantic.py',95),
  ('arithmetic -> value DIV value','arithmetic',3,'p_arithmetic','semantic.py',96),
  ('arithmetic -> value DIV arithmetic','arithmetic',3,'p_arithmetic','semantic.py',97),
  ('arithmetic -> value MODULO value','arithmetic',3,'p_arithmetic','semantic.py',98),
  ('arithmetic -> value MODULO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',99),
  ('comparation -> literal EQUAL literal','comparation',3,'p_comparation','semantic.py',104),
  ('comparation -> ID EQUAL literal','comparation',3,'p_comparation','semantic.py',105),
  ('comparation -> literal EQUAL ID','comparation',3,'p_comparation','semantic.py',106),
  ('comparation -> ID EQUAL ID','comparation',3,'p_comparation','semantic.py',107),
  ('comparation -> literal NOT_EQ literal','comparation',3,'p_comparation','semantic.py',108),
  ('comparation -> ID NOT_EQ literal','comparation',3,'p_comparation','semantic.py',109),
  ('comparation -> literal NOT_EQ ID','comparation',3,'p_comparation','semantic.py',110),
  ('comparation -> ID NOT_EQ ID','comparation',3,'p_comparation','semantic.py',111),
  ('comparation -> literal LT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',112),
  ('comparation -> ID LT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',113),
  ('comparation -> literal LT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',114),
  ('comparation -> ID LT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',115),
  ('comparation -> literal GT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',116),
  ('comparation -> ID GT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',117),
  ('comparation -> literal GT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',118),
  ('comparation -> ID GT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',119),
  ('comparation -> literal LESS_THAN literal','comparation',3,'p_comparation','semantic.py',120),
  ('comparation -> ID LESS_THAN literal','comparation',3,'p_comparation','semantic.py',121),
  ('comparation -> literal LESS_THAN ID','comparation',3,'p_comparation','semantic.py',122),
  ('comparation -> ID LESS_THAN ID','comparation',3,'p_comparation','semantic.py',123),
  ('comparation -> literal GREATER_THAN literal','comparation',3,'p_comparation','semantic.py',124),
  ('comparation -> ID GREATER_THAN literal','comparation',3,'p_comparation','semantic.py',125),
  ('comparation -> literal GREATER_THAN ID','comparation',3,'p_comparation','semantic.py',126),
  ('comparation -> ID GREATER_THAN ID','comparation',3,'p_comparation','semantic.py',127),
  ('comparations -> comparation AND comparation','comparations',3,'p_comparations','semantic.py',132),
  ('comparations -> comparation LOGIC_AND comparation','comparations',3,'p_comparations','semantic.py',133),
  ('comparations -> comparation AND comparations','comparations',3,'p_comparations','semantic.py',134),
  ('comparations -> comparation LOGIC_AND comparations','comparations',3,'p_comparations','semantic.py',135),
  ('comparations -> comparation OR comparation','comparations',3,'p_comparations','semantic.py',136),
  ('comparations -> comparation LOGIC_OR comparation','comparations',3,'p_comparations','semantic.py',137),
  ('comparations -> comparation OR comparations','comparations',3,'p_comparations','semantic.py',138),
  ('comparations -> comparation LOGIC_OR comparations','comparations',3,'p_comparations','semantic.py',139),
  ('comparations -> boolean AND boolean','comparations',3,'p_comparations','semantic.py',140),
  ('comparations -> boolean LOGIC_AND boolean','comparations',3,'p_comparations','semantic.py',141),
  ('comparations -> boolean OR boolean','comparations',3,'p_comparations','semantic.py',142),
  ('comparations -> boolean LOGIC_OR boolean','comparations',3,'p_comparations','semantic.py',143),
  ('assignment -> ID ASSIGN ID','assignment',3,'p_assignment','semantic.py',148),
  ('assignment -> ID ASSIGN NIL','assignment',3,'p_assignment','semantic.py',149),
  ('assignment -> ID ASSIGN struc','assignment',3,'p_assignment','semantic.py',150),
  ('assignment -> ID ASSIGN literal','assignment',3,'p_assignment','semantic.py',151),
  ('assignment -> ID ASSIGN arithmetic','assignment',3,'p_assignment','semantic.py',152),
  ('assignment -> strucArray ASSIGN ID','assignment',3,'p_assignment','semantic.py',153),
  ('assignment -> strucArray ASSIGN strucArray','assignment',3,'p_assignment','semantic.py',154),
  ('assignment -> ID ADD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',159),
  ('assignment -> ID ADD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',160),
  ('assignment -> ID SUBS_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',161),
  ('assignment -> ID SUBS_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',162),
  ('assignment -> ID MULT_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',163),
  ('assignment -> ID MULT_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',164),
  ('assignment -> ID DIV_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',165),
  ('assignment -> ID DIV_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',166),
  ('assignment -> ID MOD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',167),
  ('assignment -> ID MOD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',168),
  ('function -> DEF ID L_PAREN literals R_PAREN statements END','function',7,'p_function','semantic.py',173),
  ('function -> DEF ID L_PAREN R_PAREN statements END','function',6,'p_function','semantic.py',174),
  ('function -> DEF ID statements END','function',4,'p_function','semantic.py',175),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END','function',9,'p_function','semantic.py',176),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN ID END','function',8,'p_function','semantic.py',177),
  ('function -> DEF ID statements RETURN ID END','function',6,'p_function','semantic.py',178),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END','function',9,'p_function','semantic.py',179),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN literal END','function',8,'p_function','semantic.py',180),
  ('function -> DEF ID statements RETURN literal END','function',6,'p_function','semantic.py',181),
  ('else -> ELSE boolean statements','else',3,'p_else','semantic.py',186),
  ('else -> ELSE comparation statements','else',3,'p_else','semantic.py',187),
  ('else -> ELSE comparations statements','else',3,'p_else','semantic.py',188),
  ('elsif -> ELSIF boolean statements','elsif',3,'p_elsif','semantic.py',193),
  ('elsif -> ELSIF comparation statements','elsif',3,'p_elsif','semantic.py',194),
  ('elsif -> ELSIF comparations statements','elsif',3,'p_elsif','semantic.py',195),
  ('elses -> else','elses',1,'p_elses','semantic.py',200),
  ('elses -> elsif elses','elses',2,'p_elses','semantic.py',201),
  ('control -> IF boolean statements END','control',4,'p_contol_if','semantic.py',206),
  ('control -> IF comparation statements END','control',4,'p_contol_if','semantic.py',207),
  ('control -> IF comparations statements END','control',4,'p_contol_if','semantic.py',208),
  ('control -> IF boolean statements elses END','control',5,'p_contol_if','semantic.py',209),
  ('control -> IF comparation statements elses END','control',5,'p_contol_if','semantic.py',210),
  ('control -> IF comparations statements elses END','control',5,'p_contol_if','semantic.py',211),
  ('control -> UNLESS boolean COLON statements END','control',5,'p_control_unless','semantic.py',216),
  ('control -> UNLESS comparation COLON statements END','control',5,'p_control_unless','semantic.py',217),
  ('control -> UNLESS comparations COLON statements END','control',5,'p_control_unless','semantic.py',218),
  ('control -> UNLESS boolean statements elses END','control',5,'p_control_unless','semantic.py',219),
  ('control -> UNLESS comparation statements elses END','control',5,'p_control_unless','semantic.py',220),
  ('control -> UNLESS comparations statements elses END','control',5,'p_control_unless','semantic.py',221),
  ('when -> WHEN literal','when',2,'p_when','semantic.py',226),
  ('when -> WHEN literal THEN','when',3,'p_when','semantic.py',227),
  ('when -> WHEN comparation','when',2,'p_when','semantic.py',228),
  ('when -> WHEN comparations','when',2,'p_when','semantic.py',229),
  ('whens -> when','whens',1,'p_whens','semantic.py',234),
  ('whens -> when whens','whens',2,'p_whens','semantic.py',235),
  ('control -> CASE ID whens else END','control',5,'p_control_case','semantic.py',240),
  ('control -> CASE ID whens END','control',4,'p_control_case','semantic.py',241),
  ('control -> WHILE boolean DO statements END','control',5,'p_control_while','semantic.py',246),
  ('control -> WHILE comparation DO statements END','control',5,'p_control_while','semantic.py',247),
  ('control -> WHILE comparations DO statements END','control',5,'p_control_while','semantic.py',248),
  ('element -> ID','element',1,'p_element','semantic.py',253),
  ('element -> STRING','element',1,'p_element','semantic.py',254),
  ('element -> boolean','element',1,'p_element','semantic.py',255),
  ('element -> numeric','element',1,'p_element','semantic.py',256),
  ('element -> range','element',1,'p_element','semantic.py',257),
  ('elements -> element','elements',1,'p_elements','semantic.py',262),
  ('elements -> element COMMA elements','elements',3,'p_elements','semantic.py',263),
  ('strucArray -> ID L_BRACKET ID R_BRACKET','strucArray',4,'p_strucArray','semantic.py',268),
  ('strucArray -> ID L_BRACKET arithmetic R_BRACKET','strucArray',4,'p_strucArray','semantic.py',269),
  ('array -> L_BRACKET literals R_BRACKET','array',3,'p_array','semantic.py',273),
  ('array -> L_BRACKET ids R_BRACKET','array',3,'p_array','semantic.py',274),
  ('array -> L_BRACKET elements R_BRACKET','array',3,'p_array','semantic.py',275),
  ('arrays -> array','arrays',1,'p_arrays','semantic.py',280),
  ('arrays -> array COMMA arrays','arrays',3,'p_arrays','semantic.py',281),
  ('struc -> strucMatrix','struc',1,'p_struc','semantic.py',286),
  ('struc -> strucSet','struc',1,'p_struc','semantic.py',287),
  ('struc -> strucHash','struc',1,'p_struc','semantic.py',288),
  ('struc -> strucArray','struc',1,'p_struc','semantic.py',289),
  ('strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET','strucMatrix',4,'p_strucMatrix','semantic.py',294),
  ('strucSet -> SET PERIOD NEW','strucSet',3,'p_strucSet','semantic.py',298),
  ('strucSet -> SET PERIOD NEW L_PAREN R_PAREN','strucSet',5,'p_strucSet','semantic.py',299),
  ('strucSet -> SET PERIOD NEW L_PAREN array R_PAREN','strucSet',6,'p_strucSet','semantic.py',300),
  ('strucSet -> SET array','strucSet',2,'p_strucSet','semantic.py',301),
  ('strucHash -> HASH PERIOD NEW','strucHash',3,'p_strucHash','semantic.py',306),
  ('strucHash -> HASH PERIOD NEW L_BRACE R_BRACE','strucHash',5,'p_strucHash','semantic.py',307),
  ('strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE','strucHash',6,'p_strucHash','semantic.py',308),
  ('strucHash -> HASH array','strucHash',2,'p_strucHash','semantic.py',309),
  ('hashelem -> COLON ID RW_DOUBLE_ARROW literal','hashelem',4,'p_hashelem_rocket','semantic.py',314),
  ('hashelem -> ID COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',315),
  ('hashelem -> STRING COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',316),
  ('hashelems -> hashelem COMMA hashelem','hashelems',3,'p_hashelems','semantic.py',321),
  ('hashelems -> hashelem COMMA hashelems','hashelems',3,'p_hashelems','semantic.py',322),
  ('range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN','range',5,'p_range','semantic.py',327),
  ('range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN','range',5,'p_range','semantic.py',328),
  ('range -> INTEGER ELLIPSIS INTEGER','range',3,'p_range','semantic.py',329),
  ('range -> INTEGER DOUBLE_PERIOD INTEGER','range',3,'p_range','semantic.py',330),
  ('range -> L_PAREN STRING ELLIPSIS STRING','range',4,'p_range','semantic.py',331),
  ('range -> L_PAREN STRING DOUBLE_PERIOD STRING','range',4,'p_range','semantic.py',332),
  ('range -> STRING ELLIPSIS STRING','range',3,'p_range','semantic.py',333),
  ('range -> STRING DOUBLE_PERIOD STRING','range',3,'p_range','semantic.py',334),
]
