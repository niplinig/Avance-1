
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initADD_ASSIGN AMPERSAND AND ARRAY ASSIGN AT_SIGN BEGIN BREAK CASE CLASS COLON COMMA COMPLEX DEF DIV DIV_ASSIGN DO DOLLAR_SIGN DOUBLE_PERIOD ELLIPSIS ELSE ELSIF END ENSURE EQUAL EXPO FALSE FLOAT FOR GREATER_THAN GT_OR_EQ HASH ID IF IN INTEGER LESS_THAN LINE_COMMENT LOGIC_AND LOGIC_NOT LOGIC_OR LT_OR_EQ L_BRACE L_BRACKET L_PAREN MATRIX MINUS MODULO MOD_ASSIGN MULT MULT_ASSIGN NEW NEXT NIL NOT NOT_EQ OR PERIOD PLUS RATIONAL RETRY RETURN RW_ARROW RW_DOUBLE_ARROW R_BRACE R_BRACKET R_PAREN SELF SEMICOLON SET STRING SUBS_ASSIGN SUPER THEN TILDE TRUE UNDERSCORE UNLESS UNTIL VERTICAL_BAR WHEN WHILEinit : statementsstatement : assignment\n        | function\n        | control\n        | arithmetic\n        statements : statement\n        | statement statements\n        ids : ID\n        | ID COMMA ids\n        literal : STRING\n        | ID\n        | boolean\n        | numeric\n        | range\n        literals : literal\n        | literal COMMA literals\n        boolean : TRUE\n        | FALSE\n        numeric : COMPLEX\n        | RATIONAL\n        | FLOAT\n        | INTEGER\n        value : numeric\n        | ID\n        arithmetic : value PLUS value\n        | value PLUS arithmetic\n        | value MINUS value\n        | value MINUS arithmetic\n        | value EXPO value\n        | value EXPO arithmetic\n        | value MULT value\n        | value MULT arithmetic\n        | value DIV value\n        | value DIV arithmetic\n        | value MODULO value\n        | value MODULO arithmetic\n        comparation : literal EQUAL literal\n        | ID EQUAL ID\n        | literal NOT_EQ literal\n        | ID NOT_EQ ID\n        | literal LT_OR_EQ literal\n        | ID LT_OR_EQ ID\n        | literal GT_OR_EQ literal\n        | ID GT_OR_EQ ID\n        | literal LESS_THAN literal\n        | ID LESS_THAN ID\n        | literal GREATER_THAN literal\n        | ID GREATER_THAN ID\n        comparations : comparation AND comparation\n        | comparation LOGIC_AND comparation\n        | comparation AND comparations\n        | comparation LOGIC_AND comparations\n        | comparation OR comparation\n        | comparation LOGIC_OR comparation\n        | comparation OR comparations\n        | comparation LOGIC_OR comparations\n        | boolean AND boolean\n        | boolean LOGIC_AND boolean\n        | boolean OR boolean\n        | boolean LOGIC_OR boolean\n        assignment : ID ASSIGN ID\n        | ID ASSIGN NIL\n        | ID ASSIGN struc\n        | ID ASSIGN literal\n        | ID ASSIGN arithmetic\n        assignment : ID ADD_ASSIGN ID\n        | ID ADD_ASSIGN numeric\n        | ID SUBS_ASSIGN ID\n        | ID SUBS_ASSIGN numeric\n        | ID MULT_ASSIGN ID\n        | ID MULT_ASSIGN numeric\n        | ID DIV_ASSIGN ID\n        | ID DIV_ASSIGN numeric\n        | ID MOD_ASSIGN ID\n        | ID MOD_ASSIGN numeric\n        function : DEF ID L_PAREN literals R_PAREN statements END\n        | DEF ID L_PAREN R_PAREN statements END\n        | DEF ID statements END\n        | DEF ID L_PAREN literals R_PAREN statements RETURN ID END\n        | DEF ID L_PAREN R_PAREN statements RETURN ID END\n        | DEF ID statements RETURN ID END\n        | DEF ID L_PAREN literals R_PAREN statements RETURN literal END\n        | DEF ID L_PAREN R_PAREN statements RETURN literal END\n        | DEF ID statements RETURN literal END\n        call_method : ID PERIOD ID\n        | ID PERIOD ID L_PAREN literals R_PAREN\n        | ID PERIOD ID L_PAREN R_PAREN\n        else : ELSE boolean statements\n        | ELSE comparation statements\n        | ELSE comparations statements\n        elsif : ELSIF boolean statements\n        | ELSIF comparation statements\n        | ELSIF comparations statements\n        elses : else\n        | elsif elses\n        control : IF boolean statements END\n        | IF comparation statements END\n        | IF comparations statements END\n        | IF boolean statements elses END\n        | IF comparation statements elses END\n        | IF comparations statements elses END\n        control : UNLESS boolean COLON statements END\n        | UNLESS comparation COLON statements END\n        | UNLESS comparations COLON statements END\n        | UNLESS boolean statements elses END\n        | UNLESS comparation statements elses END\n        | UNLESS comparations statements elses END\n        when : WHEN literal\n        | WHEN literal THEN\n        | WHEN comparation\n        | WHEN comparations\n        whens : when\n        | when whens\n        control : CASE ID whens else END\n        | CASE ID whens END\n        control : WHILE boolean DO statements END\n        | WHILE comparation DO statements END\n        | WHILE comparations DO statements END\n        control : FOR ID IN range DO statements END\n        | FOR ID IN range statements END\n        element : ID\n        | STRING\n        | boolean\n        | numeric\n        | range\n        elements : element\n        | element COMMA elements\n        array : L_BRACKET literals R_BRACKET\n        | L_BRACKET ids R_BRACKET\n        | L_BRACKET elements R_BRACKET\n        arrays : array\n        | array COMMA arrays\n        struc : strucMatrix\n        | strucSet\n        | strucHash\n        strucMatrix : MATRIX L_BRACKET arrays R_BRACKETstrucSet : SET PERIOD NEW\n        | SET PERIOD NEW L_PAREN R_PAREN\n        | SET PERIOD NEW L_PAREN array R_PAREN\n        | SET array\n        strucHash : HASH PERIOD NEW\n        | HASH PERIOD NEW L_BRACE R_BRACE\n        | HASH PERIOD NEW L_BRACE hashelems R_BRACE\n        | HASH array\n        hashelem : COLON ID RW_DOUBLE_ARROW literal\n        | ID COLON literal\n        | STRING COLON literal\n        hashelems : hashelem COMMA hashelem\n        | hashelem COMMA hashelems\n        range : L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN\n        | L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN\n        | INTEGER ELLIPSIS INTEGER\n        | INTEGER DOUBLE_PERIOD INTEGER\n        | INTEGER ELLIPSIS L_PAREN call_method R_PAREN\n        | L_PAREN STRING ELLIPSIS STRING\n        | L_PAREN STRING DOUBLE_PERIOD STRING\n        | STRING ELLIPSIS STRING\n        | STRING DOUBLE_PERIOD STRING\n        '
    
_lr_action_items = {'ID':([0,3,4,5,6,7,9,10,11,12,13,14,15,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,36,37,38,39,41,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,78,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,109,111,113,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,140,141,143,145,146,147,151,152,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,198,208,213,223,224,226,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,264,265,266,268,269,271,272,279,280,281,282,284,286,296,299,302,303,307,308,309,310,312,313,316,317,318,321,324,325,],[8,8,-2,-3,-4,-5,-23,28,35,35,44,35,48,-19,-20,-21,-22,55,68,70,72,74,76,8,8,8,8,-17,-18,-10,-13,-14,-22,8,8,8,124,124,124,124,124,124,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,141,35,35,35,35,141,141,141,141,141,141,176,177,178,179,180,181,8,8,8,203,8,8,8,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,217,-144,-11,8,-78,227,-96,35,35,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,240,-153,-115,8,-137,-141,8,141,-99,8,8,8,8,8,8,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,8,-136,-128,-129,-130,288,291,300,-77,304,-81,-84,-154,306,-150,-151,-120,-138,-142,311,-76,314,-119,-139,-143,300,141,141,-80,-83,141,141,-79,-82,]),'DEF':([0,3,4,5,6,7,9,17,18,19,20,28,29,30,31,32,33,36,37,38,39,41,42,43,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,109,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,143,145,147,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[10,10,-2,-3,-4,-5,-23,-19,-20,-21,-22,10,10,10,10,-17,-18,-10,-13,-14,-22,10,10,10,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,10,10,10,10,10,10,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,10,-78,-96,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,10,-137,-141,10,-99,10,10,10,10,10,10,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,10,-136,-128,-129,-130,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'IF':([0,3,4,5,6,7,9,17,18,19,20,28,29,30,31,32,33,36,37,38,39,41,42,43,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,109,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,143,145,147,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[11,11,-2,-3,-4,-5,-23,-19,-20,-21,-22,11,11,11,11,-17,-18,-10,-13,-14,-22,11,11,11,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,11,11,11,11,11,11,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,11,-78,-96,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,11,-137,-141,11,-99,11,11,11,11,11,11,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,11,-136,-128,-129,-130,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'UNLESS':([0,3,4,5,6,7,9,17,18,19,20,28,29,30,31,32,33,36,37,38,39,41,42,43,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,109,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,143,145,147,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[12,12,-2,-3,-4,-5,-23,-19,-20,-21,-22,12,12,12,12,-17,-18,-10,-13,-14,-22,12,12,12,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,12,12,12,12,12,12,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,12,-78,-96,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,12,-137,-141,12,-99,12,12,12,12,12,12,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,12,-136,-128,-129,-130,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'CASE':([0,3,4,5,6,7,9,17,18,19,20,28,29,30,31,32,33,36,37,38,39,41,42,43,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,109,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,143,145,147,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[13,13,-2,-3,-4,-5,-23,-19,-20,-21,-22,13,13,13,13,-17,-18,-10,-13,-14,-22,13,13,13,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,13,13,13,13,13,13,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,13,-78,-96,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,13,-137,-141,13,-99,13,13,13,13,13,13,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,13,-136,-128,-129,-130,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'WHILE':([0,3,4,5,6,7,9,17,18,19,20,28,29,30,31,32,33,36,37,38,39,41,42,43,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,109,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,143,145,147,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[14,14,-2,-3,-4,-5,-23,-19,-20,-21,-22,14,14,14,14,-17,-18,-10,-13,-14,-22,14,14,14,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,14,14,14,14,14,14,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,14,-78,-96,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,14,-137,-141,14,-99,14,14,14,14,14,14,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,14,-136,-128,-129,-130,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'FOR':([0,3,4,5,6,7,9,17,18,19,20,28,29,30,31,32,33,36,37,38,39,41,42,43,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,109,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,143,145,147,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[15,15,-2,-3,-4,-5,-23,-19,-20,-21,-22,15,15,15,15,-17,-18,-10,-13,-14,-22,15,15,15,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,15,15,15,15,15,15,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,15,-78,-96,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,15,-137,-141,15,-99,15,15,15,15,15,15,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,15,-136,-128,-129,-130,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'COMPLEX':([0,3,4,5,6,7,9,11,12,14,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,36,37,38,39,41,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,78,86,87,88,89,91,92,93,94,95,96,109,111,113,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,140,141,143,145,146,147,151,152,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,226,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,265,268,269,271,272,279,281,282,284,286,296,302,303,307,308,309,312,313,316,317,318,321,324,325,],[17,17,-2,-3,-4,-5,-23,17,17,17,-19,-20,-21,-22,17,17,17,17,17,17,17,17,17,17,-17,-18,-10,-13,-14,-22,17,17,17,17,17,17,17,17,17,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,17,-144,-11,17,-78,17,-96,17,17,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,17,-137,-141,17,17,-99,17,17,17,17,17,17,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,17,-136,-128,-129,-130,17,-77,17,-81,-84,-154,-150,-151,-120,-138,-142,-76,17,-119,-139,-143,17,17,-80,-83,17,17,-79,-82,]),'RATIONAL':([0,3,4,5,6,7,9,11,12,14,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,36,37,38,39,41,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,78,86,87,88,89,91,92,93,94,95,96,109,111,113,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,140,141,143,145,146,147,151,152,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,226,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,265,268,269,271,272,279,281,282,284,286,296,302,303,307,308,309,312,313,316,317,318,321,324,325,],[18,18,-2,-3,-4,-5,-23,18,18,18,-19,-20,-21,-22,18,18,18,18,18,18,18,18,18,18,-17,-18,-10,-13,-14,-22,18,18,18,18,18,18,18,18,18,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,18,-144,-11,18,-78,18,-96,18,18,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,18,-137,-141,18,18,-99,18,18,18,18,18,18,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,18,-136,-128,-129,-130,18,-77,18,-81,-84,-154,-150,-151,-120,-138,-142,-76,18,-119,-139,-143,18,18,-80,-83,18,18,-79,-82,]),'FLOAT':([0,3,4,5,6,7,9,11,12,14,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,36,37,38,39,41,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,78,86,87,88,89,91,92,93,94,95,96,109,111,113,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,140,141,143,145,146,147,151,152,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,208,213,223,224,226,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,265,268,269,271,272,279,281,282,284,286,296,302,303,307,308,309,312,313,316,317,318,321,324,325,],[19,19,-2,-3,-4,-5,-23,19,19,19,-19,-20,-21,-22,19,19,19,19,19,19,19,19,19,19,-17,-18,-10,-13,-14,-22,19,19,19,19,19,19,19,19,19,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,19,-144,-11,19,-78,19,-96,19,19,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,19,-137,-141,19,19,-99,19,19,19,19,19,19,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,19,-136,-128,-129,-130,19,-77,19,-81,-84,-154,-150,-151,-120,-138,-142,-76,19,-119,-139,-143,19,19,-80,-83,19,19,-79,-82,]),'INTEGER':([0,3,4,5,6,7,9,11,12,14,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,36,37,38,39,40,41,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,78,86,87,88,89,91,92,93,94,95,96,105,106,109,111,113,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,140,141,143,145,146,147,151,152,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,188,198,208,213,223,224,226,229,231,232,233,234,235,236,237,238,243,244,245,246,247,248,249,250,251,253,254,255,256,258,261,262,263,265,268,269,271,272,279,281,282,284,286,296,302,303,307,308,309,312,313,316,317,318,321,324,325,],[20,20,-2,-3,-4,-5,-23,39,39,39,-19,-20,-21,-22,39,20,20,20,20,20,20,20,20,20,-17,-18,-10,-13,-14,-22,107,20,20,20,20,20,20,20,20,20,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,39,39,39,39,39,39,39,39,39,39,39,184,186,20,20,20,39,20,20,20,209,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,39,-144,-11,20,-78,39,-96,39,39,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,241,242,-115,20,-137,-141,20,39,-99,20,20,20,20,20,20,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,20,-136,-128,-129,-130,39,-77,39,-81,-84,-154,-150,-151,-120,-138,-142,-76,39,-119,-139,-143,39,39,-80,-83,39,39,-79,-82,]),'$end':([1,2,3,4,5,6,7,9,17,18,19,20,21,32,33,36,38,39,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,145,147,157,168,182,183,184,186,198,213,223,229,237,238,243,244,245,246,247,248,249,250,251,253,254,255,258,261,262,263,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[0,-1,-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-78,-96,-97,-98,-157,-158,-152,-153,-115,-137,-141,-99,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,-136,-128,-129,-130,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'END':([3,4,5,6,7,9,17,18,19,20,21,32,33,36,37,38,39,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,79,80,85,90,115,116,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,145,147,148,149,153,154,155,156,157,158,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,213,223,225,227,228,229,230,237,238,243,244,245,246,247,248,249,250,251,252,253,254,255,257,258,261,262,263,267,268,271,272,273,274,275,279,281,282,283,284,286,296,302,304,305,307,308,309,314,315,316,317,324,325,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-13,-14,-22,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,145,147,157,168,198,-112,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,-78,-96,229,-94,-57,-58,-59,-60,-97,237,-49,-51,-50,-52,-53,-55,-54,-56,-98,238,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,245,246,247,248,249,250,251,-115,-113,-108,-110,-111,-11,-12,253,254,255,-137,-141,268,271,272,-99,-95,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-109,-116,-117,-118,284,-136,-128,-129,-130,302,-77,-81,-84,-88,-89,-90,-154,-150,-151,307,-120,-138,-142,-76,316,317,-119,-139,-143,324,325,-80,-83,-79,-82,]),'RETURN':([3,4,5,6,7,9,17,18,19,20,21,32,33,36,38,39,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,79,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,145,147,157,168,182,183,184,186,198,213,223,225,229,237,238,243,244,245,246,247,248,249,250,251,253,254,255,258,261,262,263,267,268,271,272,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,146,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-78,-96,-97,-98,-157,-158,-152,-153,-115,-137,-141,269,-99,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,-136,-128,-129,-130,303,-77,-81,-84,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'ELSE':([3,4,5,6,7,9,17,18,19,20,21,32,33,36,37,38,39,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,80,85,90,110,112,114,115,116,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,141,145,147,150,153,154,155,156,157,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,198,199,200,201,202,203,204,213,223,229,237,238,243,244,245,246,247,248,249,250,251,252,253,254,255,258,261,262,263,268,271,272,276,277,278,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-13,-14,-22,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,151,151,151,151,151,151,151,-112,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-11,-78,-96,151,-57,-58,-59,-60,-97,-49,-51,-50,-52,-53,-55,-54,-56,-98,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-115,-113,-108,-110,-111,-11,-12,-137,-141,-99,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-109,-116,-117,-118,-136,-128,-129,-130,-77,-81,-84,-91,-92,-93,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'ELSIF':([3,4,5,6,7,9,17,18,19,20,21,32,33,36,38,39,55,56,57,58,59,60,61,62,63,64,68,69,70,71,72,73,74,75,76,77,80,85,90,110,112,114,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,145,147,150,157,168,182,183,184,186,198,213,223,229,237,238,243,244,245,246,247,248,249,250,251,253,254,255,258,261,262,263,268,271,272,276,277,278,279,281,282,284,286,296,302,307,308,309,316,317,324,325,],[-6,-2,-3,-4,-5,-23,-19,-20,-21,-22,-7,-17,-18,-10,-14,-22,-11,-62,-63,-64,-65,-133,-134,-135,-12,-13,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,152,152,152,152,152,152,-25,-26,-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-140,-144,-78,-96,152,-97,-98,-157,-158,-152,-153,-115,-137,-141,-99,-100,-101,-155,-156,-102,-105,-103,-106,-104,-107,-114,-116,-117,-118,-136,-128,-129,-130,-77,-81,-84,-91,-92,-93,-154,-150,-151,-120,-138,-142,-76,-119,-139,-143,-80,-83,-79,-82,]),'ASSIGN':([8,],[22,]),'ADD_ASSIGN':([8,],[23,]),'SUBS_ASSIGN':([8,],[24,]),'MULT_ASSIGN':([8,],[25,]),'DIV_ASSIGN':([8,],[26,]),'MOD_ASSIGN':([8,],[27,]),'PLUS':([8,9,16,17,18,19,20,39,55,64,122,124,125,127,129,131,133,],[-24,-23,49,-19,-20,-21,-22,-22,-24,-23,49,-24,49,49,49,49,49,]),'MINUS':([8,9,16,17,18,19,20,39,55,64,122,124,125,127,129,131,133,],[-24,-23,50,-19,-20,-21,-22,-22,-24,-23,50,-24,50,50,50,50,50,]),'EXPO':([8,9,16,17,18,19,20,39,55,64,122,124,125,127,129,131,133,],[-24,-23,51,-19,-20,-21,-22,-22,-24,-23,51,-24,51,51,51,51,51,]),'MULT':([8,9,16,17,18,19,20,39,55,64,122,124,125,127,129,131,133,],[-24,-23,52,-19,-20,-21,-22,-22,-24,-23,52,-24,52,52,52,52,52,]),'DIV':([8,9,16,17,18,19,20,39,55,64,122,124,125,127,129,131,133,],[-24,-23,53,-19,-20,-21,-22,-22,-24,-23,53,-24,53,53,53,53,53,]),'MODULO':([8,9,16,17,18,19,20,39,55,64,122,124,125,127,129,131,133,],[-24,-23,54,-19,-20,-21,-22,-22,-24,-23,54,-24,54,54,54,54,54,]),'TRUE':([11,12,14,22,78,81,82,83,84,86,87,88,89,91,92,93,94,95,96,117,138,146,151,152,226,265,269,303,312,313,318,321,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FALSE':([11,12,14,22,78,81,82,83,84,86,87,88,89,91,92,93,94,95,96,117,138,146,151,152,226,265,269,303,312,313,318,321,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'STRING':([11,12,14,22,40,78,86,87,88,89,91,92,93,94,95,96,103,104,117,121,138,146,151,152,189,190,226,265,266,269,303,310,312,313,318,321,],[36,36,36,36,108,36,36,36,36,36,36,36,36,36,36,36,182,183,36,210,219,36,36,36,243,244,36,292,301,36,36,301,36,36,36,36,]),'L_PAREN':([11,12,14,22,28,78,86,87,88,89,91,92,93,94,95,96,105,117,121,138,146,151,152,213,226,265,269,303,306,312,313,318,321,],[40,40,40,40,78,40,40,40,40,40,40,40,40,40,40,40,185,40,40,40,40,40,40,260,40,40,40,40,318,40,40,40,40,]),'EQUAL':([17,18,19,29,32,33,34,35,36,37,38,39,41,45,161,182,183,184,186,200,203,204,231,234,243,244,279,281,282,],[-19,-20,-21,-12,-17,-18,91,97,-10,-13,-14,-22,-12,-12,-12,-157,-158,-152,-153,91,97,-12,-12,-12,-155,-156,-154,-150,-151,]),'NOT_EQ':([17,18,19,29,32,33,34,35,36,37,38,39,41,45,161,182,183,184,186,200,203,204,231,234,243,244,279,281,282,],[-19,-20,-21,-12,-17,-18,92,98,-10,-13,-14,-22,-12,-12,-12,-157,-158,-152,-153,92,98,-12,-12,-12,-155,-156,-154,-150,-151,]),'LT_OR_EQ':([17,18,19,29,32,33,34,35,36,37,38,39,41,45,161,182,183,184,186,200,203,204,231,234,243,244,279,281,282,],[-19,-20,-21,-12,-17,-18,93,99,-10,-13,-14,-22,-12,-12,-12,-157,-158,-152,-153,93,99,-12,-12,-12,-155,-156,-154,-150,-151,]),'GT_OR_EQ':([17,18,19,29,32,33,34,35,36,37,38,39,41,45,161,182,183,184,186,200,203,204,231,234,243,244,279,281,282,],[-19,-20,-21,-12,-17,-18,94,100,-10,-13,-14,-22,-12,-12,-12,-157,-158,-152,-153,94,100,-12,-12,-12,-155,-156,-154,-150,-151,]),'LESS_THAN':([17,18,19,29,32,33,34,35,36,37,38,39,41,45,161,182,183,184,186,200,203,204,231,234,243,244,279,281,282,],[-19,-20,-21,-12,-17,-18,95,101,-10,-13,-14,-22,-12,-12,-12,-157,-158,-152,-153,95,101,-12,-12,-12,-155,-156,-154,-150,-151,]),'GREATER_THAN':([17,18,19,29,32,33,34,35,36,37,38,39,41,45,161,182,183,184,186,200,203,204,231,234,243,244,279,281,282,],[-19,-20,-21,-12,-17,-18,96,102,-10,-13,-14,-22,-12,-12,-12,-157,-158,-152,-153,96,102,-12,-12,-12,-155,-156,-154,-150,-151,]),'COMMA':([17,18,19,32,33,36,37,38,39,63,141,144,182,183,184,186,212,217,218,219,220,221,222,243,244,261,262,263,279,281,282,288,291,292,293,294,295,298,319,322,323,328,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,226,-157,-158,-152,-153,259,264,265,-10,-12,-13,-14,-155,-156,-128,-129,-130,-154,-150,-151,264,-121,-122,-123,-124,-125,310,310,-146,-147,-145,]),'R_PAREN':([17,18,19,32,33,36,37,38,39,63,78,141,142,144,182,183,184,186,239,241,242,243,244,260,261,262,263,270,279,281,282,287,306,318,326,327,329,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,143,-11,224,-15,-157,-158,-152,-153,279,281,282,-155,-156,286,-128,-129,-130,-16,-154,-150,-151,308,-85,327,329,-87,-86,]),'AND':([17,18,19,29,30,32,33,36,37,38,39,41,42,45,46,63,141,159,161,162,164,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,201,204,231,232,234,235,243,244,279,281,282,],[-19,-20,-21,81,86,-17,-18,-10,-13,-14,-22,81,86,81,86,-12,-11,86,81,86,86,86,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,86,81,81,86,81,86,-155,-156,-154,-150,-151,]),'LOGIC_AND':([17,18,19,29,30,32,33,36,37,38,39,41,42,45,46,63,141,159,161,162,164,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,201,204,231,232,234,235,243,244,279,281,282,],[-19,-20,-21,82,87,-17,-18,-10,-13,-14,-22,82,87,82,87,-12,-11,87,82,87,87,87,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,87,82,82,87,82,87,-155,-156,-154,-150,-151,]),'OR':([17,18,19,29,30,32,33,36,37,38,39,41,42,45,46,63,141,159,161,162,164,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,201,204,231,232,234,235,243,244,279,281,282,],[-19,-20,-21,83,88,-17,-18,-10,-13,-14,-22,83,88,83,88,-12,-11,88,83,88,88,88,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,88,83,83,88,83,88,-155,-156,-154,-150,-151,]),'LOGIC_OR':([17,18,19,29,30,32,33,36,37,38,39,41,42,45,46,63,141,159,161,162,164,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,201,204,231,232,234,235,243,244,279,281,282,],[-19,-20,-21,84,89,-17,-18,-10,-13,-14,-22,84,89,84,89,-12,-11,89,84,89,89,89,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,89,84,84,89,84,89,-155,-156,-154,-150,-151,]),'COLON':([17,18,19,32,33,36,37,38,39,41,42,43,63,141,153,154,155,156,159,160,162,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,243,244,266,279,281,282,300,301,310,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,109,111,113,-12,-11,-57,-58,-59,-60,-49,-51,-50,-52,-53,-55,-54,-56,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-155,-156,299,-154,-150,-151,312,313,299,]),'DO':([17,18,19,32,33,36,37,38,39,45,46,47,63,141,153,154,155,156,159,160,162,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,208,243,244,279,281,282,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,118,119,120,-12,-11,-57,-58,-59,-60,-49,-51,-50,-52,-53,-55,-54,-56,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,256,-155,-156,-154,-150,-151,]),'WHEN':([17,18,19,32,33,36,37,38,39,44,63,116,141,153,154,155,156,159,160,162,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,200,201,202,203,204,243,244,252,279,281,282,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,117,-12,117,-11,-57,-58,-59,-60,-49,-51,-50,-52,-53,-55,-54,-56,-37,-39,-41,-43,-45,-47,-38,-40,-42,-44,-46,-48,-157,-158,-152,-153,-108,-110,-111,-11,-12,-155,-156,-109,-154,-150,-151,]),'THEN':([17,18,19,32,33,36,37,38,39,182,183,184,186,200,203,204,243,244,279,281,282,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-157,-158,-152,-153,252,-11,-12,-155,-156,-154,-150,-151,]),'R_BRACKET':([17,18,19,32,33,36,37,38,39,63,141,144,182,183,184,186,211,212,214,215,216,217,218,219,220,221,222,243,244,261,262,263,270,279,281,282,285,288,289,290,291,292,293,294,295,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,-15,-157,-158,-152,-153,258,-131,261,262,263,-8,-126,-10,-12,-13,-14,-155,-156,-128,-129,-130,-16,-154,-150,-151,-132,-8,-9,-127,-121,-122,-123,-124,-125,]),'R_BRACE':([17,18,19,32,33,36,37,38,39,63,141,182,183,184,186,243,244,266,279,281,282,297,319,320,322,323,328,],[-19,-20,-21,-17,-18,-10,-13,-14,-22,-12,-11,-157,-158,-152,-153,-155,-156,296,-154,-150,-151,309,-148,-149,-146,-147,-145,]),'NIL':([22,],[56,]),'MATRIX':([22,],[65,]),'SET':([22,],[66,]),'HASH':([22,],[67,]),'ELLIPSIS':([36,39,107,108,209,210,219,292,],[103,105,187,189,105,103,103,103,]),'DOUBLE_PERIOD':([36,39,107,108,209,210,219,292,],[104,106,188,190,106,104,104,104,]),'IN':([48,],[121,]),'L_BRACKET':([65,66,67,135,259,260,],[135,138,138,138,138,138,]),'PERIOD':([66,67,240,],[136,139,280,]),'NEW':([136,139,],[213,223,]),'L_BRACE':([223,],[266,]),'RW_DOUBLE_ARROW':([311,],[321,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'statements':([0,3,28,29,30,31,41,42,43,109,111,113,118,119,120,143,208,224,231,232,233,234,235,236,256,],[2,21,79,80,85,90,110,112,114,191,193,195,205,206,207,225,257,267,273,274,275,276,277,278,283,]),'statement':([0,3,28,29,30,31,41,42,43,109,111,113,118,119,120,143,208,224,231,232,233,234,235,236,256,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'assignment':([0,3,28,29,30,31,41,42,43,109,111,113,118,119,120,143,208,224,231,232,233,234,235,236,256,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'function':([0,3,28,29,30,31,41,42,43,109,111,113,118,119,120,143,208,224,231,232,233,234,235,236,256,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'control':([0,3,28,29,30,31,41,42,43,109,111,113,118,119,120,143,208,224,231,232,233,234,235,236,256,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'arithmetic':([0,3,22,28,29,30,31,41,42,43,49,50,51,52,53,54,109,111,113,118,119,120,143,208,224,231,232,233,234,235,236,256,],[7,7,59,7,7,7,7,7,7,7,123,126,128,130,132,134,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'numeric':([0,3,11,12,14,22,23,24,25,26,27,28,29,30,31,41,42,43,49,50,51,52,53,54,78,86,87,88,89,91,92,93,94,95,96,109,111,113,117,118,119,120,138,143,146,151,152,208,224,226,231,232,233,234,235,236,256,265,269,303,312,313,318,321,],[9,9,37,37,37,64,69,71,73,75,77,9,9,9,9,9,9,9,9,9,9,9,9,9,37,37,37,37,37,37,37,37,37,37,37,9,9,9,37,9,9,9,221,9,37,37,37,9,9,37,9,9,9,9,9,9,9,294,37,37,37,37,37,37,]),'value':([0,3,22,28,29,30,31,41,42,43,49,50,51,52,53,54,109,111,113,118,119,120,143,208,224,231,232,233,234,235,236,256,],[16,16,16,16,16,16,16,16,16,16,122,125,127,129,131,133,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'boolean':([11,12,14,22,78,81,82,83,84,86,87,88,89,91,92,93,94,95,96,117,138,146,151,152,226,265,269,303,312,313,318,321,],[29,41,45,63,63,153,154,155,156,161,161,161,161,63,63,63,63,63,63,204,220,63,231,234,63,293,63,63,63,63,63,63,]),'comparation':([11,12,14,86,87,88,89,117,151,152,],[30,42,46,159,162,164,166,201,232,235,]),'comparations':([11,12,14,86,87,88,89,117,151,152,],[31,43,47,160,163,165,167,202,233,236,]),'literal':([11,12,14,22,78,86,87,88,89,91,92,93,94,95,96,117,138,146,151,152,226,269,303,312,313,318,321,],[34,34,34,58,144,34,34,34,34,170,171,172,173,174,175,200,144,228,34,34,144,305,315,322,323,144,328,]),'range':([11,12,14,22,78,86,87,88,89,91,92,93,94,95,96,117,121,138,146,151,152,226,265,269,303,312,313,318,321,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,208,222,38,38,38,38,295,38,38,38,38,38,38,]),'struc':([22,],[57,]),'strucMatrix':([22,],[60,]),'strucSet':([22,],[61,]),'strucHash':([22,],[62,]),'whens':([44,116,],[115,199,]),'when':([44,116,],[116,116,]),'array':([66,67,135,259,260,],[137,140,212,212,287,]),'literals':([78,138,226,318,],[142,214,270,326,]),'elses':([80,85,90,110,112,114,150,],[148,158,169,192,194,196,230,]),'else':([80,85,90,110,112,114,115,150,],[149,149,149,149,149,149,197,149,]),'elsif':([80,85,90,110,112,114,150,],[150,150,150,150,150,150,150,]),'arrays':([135,259,],[211,285,]),'ids':([138,264,],[215,289,]),'elements':([138,265,],[216,290,]),'element':([138,265,],[218,218,]),'call_method':([185,],[239,]),'hashelems':([266,310,],[297,320,]),'hashelem':([266,310,],[298,319,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> statements','init',1,'p_init','semantic.py',29),
  ('statement -> assignment','statement',1,'p_statement','semantic.py',33),
  ('statement -> function','statement',1,'p_statement','semantic.py',34),
  ('statement -> control','statement',1,'p_statement','semantic.py',35),
  ('statement -> arithmetic','statement',1,'p_statement','semantic.py',36),
  ('statements -> statement','statements',1,'p_statements','semantic.py',41),
  ('statements -> statement statements','statements',2,'p_statements','semantic.py',42),
  ('ids -> ID','ids',1,'p_ids','semantic.py',47),
  ('ids -> ID COMMA ids','ids',3,'p_ids','semantic.py',48),
  ('literal -> STRING','literal',1,'p_literal','semantic.py',53),
  ('literal -> ID','literal',1,'p_literal','semantic.py',54),
  ('literal -> boolean','literal',1,'p_literal','semantic.py',55),
  ('literal -> numeric','literal',1,'p_literal','semantic.py',56),
  ('literal -> range','literal',1,'p_literal','semantic.py',57),
  ('literals -> literal','literals',1,'p_literals','semantic.py',62),
  ('literals -> literal COMMA literals','literals',3,'p_literals','semantic.py',63),
  ('boolean -> TRUE','boolean',1,'p_boolean','semantic.py',68),
  ('boolean -> FALSE','boolean',1,'p_boolean','semantic.py',69),
  ('numeric -> COMPLEX','numeric',1,'p_numeric','semantic.py',74),
  ('numeric -> RATIONAL','numeric',1,'p_numeric','semantic.py',75),
  ('numeric -> FLOAT','numeric',1,'p_numeric','semantic.py',76),
  ('numeric -> INTEGER','numeric',1,'p_numeric','semantic.py',77),
  ('value -> numeric','value',1,'p_value','semantic.py',82),
  ('value -> ID','value',1,'p_value','semantic.py',83),
  ('arithmetic -> value PLUS value','arithmetic',3,'p_arithmetic','semantic.py',88),
  ('arithmetic -> value PLUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',89),
  ('arithmetic -> value MINUS value','arithmetic',3,'p_arithmetic','semantic.py',90),
  ('arithmetic -> value MINUS arithmetic','arithmetic',3,'p_arithmetic','semantic.py',91),
  ('arithmetic -> value EXPO value','arithmetic',3,'p_arithmetic','semantic.py',92),
  ('arithmetic -> value EXPO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',93),
  ('arithmetic -> value MULT value','arithmetic',3,'p_arithmetic','semantic.py',94),
  ('arithmetic -> value MULT arithmetic','arithmetic',3,'p_arithmetic','semantic.py',95),
  ('arithmetic -> value DIV value','arithmetic',3,'p_arithmetic','semantic.py',96),
  ('arithmetic -> value DIV arithmetic','arithmetic',3,'p_arithmetic','semantic.py',97),
  ('arithmetic -> value MODULO value','arithmetic',3,'p_arithmetic','semantic.py',98),
  ('arithmetic -> value MODULO arithmetic','arithmetic',3,'p_arithmetic','semantic.py',99),
  ('comparation -> literal EQUAL literal','comparation',3,'p_comparation','semantic.py',105),
  ('comparation -> ID EQUAL ID','comparation',3,'p_comparation','semantic.py',106),
  ('comparation -> literal NOT_EQ literal','comparation',3,'p_comparation','semantic.py',107),
  ('comparation -> ID NOT_EQ ID','comparation',3,'p_comparation','semantic.py',108),
  ('comparation -> literal LT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',109),
  ('comparation -> ID LT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',110),
  ('comparation -> literal GT_OR_EQ literal','comparation',3,'p_comparation','semantic.py',111),
  ('comparation -> ID GT_OR_EQ ID','comparation',3,'p_comparation','semantic.py',112),
  ('comparation -> literal LESS_THAN literal','comparation',3,'p_comparation','semantic.py',113),
  ('comparation -> ID LESS_THAN ID','comparation',3,'p_comparation','semantic.py',114),
  ('comparation -> literal GREATER_THAN literal','comparation',3,'p_comparation','semantic.py',115),
  ('comparation -> ID GREATER_THAN ID','comparation',3,'p_comparation','semantic.py',116),
  ('comparations -> comparation AND comparation','comparations',3,'p_comparations','semantic.py',122),
  ('comparations -> comparation LOGIC_AND comparation','comparations',3,'p_comparations','semantic.py',123),
  ('comparations -> comparation AND comparations','comparations',3,'p_comparations','semantic.py',124),
  ('comparations -> comparation LOGIC_AND comparations','comparations',3,'p_comparations','semantic.py',125),
  ('comparations -> comparation OR comparation','comparations',3,'p_comparations','semantic.py',126),
  ('comparations -> comparation LOGIC_OR comparation','comparations',3,'p_comparations','semantic.py',127),
  ('comparations -> comparation OR comparations','comparations',3,'p_comparations','semantic.py',128),
  ('comparations -> comparation LOGIC_OR comparations','comparations',3,'p_comparations','semantic.py',129),
  ('comparations -> boolean AND boolean','comparations',3,'p_comparations','semantic.py',130),
  ('comparations -> boolean LOGIC_AND boolean','comparations',3,'p_comparations','semantic.py',131),
  ('comparations -> boolean OR boolean','comparations',3,'p_comparations','semantic.py',132),
  ('comparations -> boolean LOGIC_OR boolean','comparations',3,'p_comparations','semantic.py',133),
  ('assignment -> ID ASSIGN ID','assignment',3,'p_assignment','semantic.py',139),
  ('assignment -> ID ASSIGN NIL','assignment',3,'p_assignment','semantic.py',140),
  ('assignment -> ID ASSIGN struc','assignment',3,'p_assignment','semantic.py',141),
  ('assignment -> ID ASSIGN literal','assignment',3,'p_assignment','semantic.py',142),
  ('assignment -> ID ASSIGN arithmetic','assignment',3,'p_assignment','semantic.py',143),
  ('assignment -> ID ADD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',150),
  ('assignment -> ID ADD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',151),
  ('assignment -> ID SUBS_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',152),
  ('assignment -> ID SUBS_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',153),
  ('assignment -> ID MULT_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',154),
  ('assignment -> ID MULT_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',155),
  ('assignment -> ID DIV_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',156),
  ('assignment -> ID DIV_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',157),
  ('assignment -> ID MOD_ASSIGN ID','assignment',3,'p_assignment_operations','semantic.py',158),
  ('assignment -> ID MOD_ASSIGN numeric','assignment',3,'p_assignment_operations','semantic.py',159),
  ('function -> DEF ID L_PAREN literals R_PAREN statements END','function',7,'p_func','semantic.py',165),
  ('function -> DEF ID L_PAREN R_PAREN statements END','function',6,'p_func','semantic.py',166),
  ('function -> DEF ID statements END','function',4,'p_func','semantic.py',167),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN ID END','function',9,'p_func','semantic.py',168),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN ID END','function',8,'p_func','semantic.py',169),
  ('function -> DEF ID statements RETURN ID END','function',6,'p_func','semantic.py',170),
  ('function -> DEF ID L_PAREN literals R_PAREN statements RETURN literal END','function',9,'p_func','semantic.py',171),
  ('function -> DEF ID L_PAREN R_PAREN statements RETURN literal END','function',8,'p_func','semantic.py',172),
  ('function -> DEF ID statements RETURN literal END','function',6,'p_func','semantic.py',173),
  ('call_method -> ID PERIOD ID','call_method',3,'p_call_method','semantic.py',177),
  ('call_method -> ID PERIOD ID L_PAREN literals R_PAREN','call_method',6,'p_call_method','semantic.py',178),
  ('call_method -> ID PERIOD ID L_PAREN R_PAREN','call_method',5,'p_call_method','semantic.py',179),
  ('else -> ELSE boolean statements','else',3,'p_else','semantic.py',183),
  ('else -> ELSE comparation statements','else',3,'p_else','semantic.py',184),
  ('else -> ELSE comparations statements','else',3,'p_else','semantic.py',185),
  ('elsif -> ELSIF boolean statements','elsif',3,'p_elsif','semantic.py',190),
  ('elsif -> ELSIF comparation statements','elsif',3,'p_elsif','semantic.py',191),
  ('elsif -> ELSIF comparations statements','elsif',3,'p_elsif','semantic.py',192),
  ('elses -> else','elses',1,'p_elses','semantic.py',197),
  ('elses -> elsif elses','elses',2,'p_elses','semantic.py',198),
  ('control -> IF boolean statements END','control',4,'p_contol_if','semantic.py',203),
  ('control -> IF comparation statements END','control',4,'p_contol_if','semantic.py',204),
  ('control -> IF comparations statements END','control',4,'p_contol_if','semantic.py',205),
  ('control -> IF boolean statements elses END','control',5,'p_contol_if','semantic.py',206),
  ('control -> IF comparation statements elses END','control',5,'p_contol_if','semantic.py',207),
  ('control -> IF comparations statements elses END','control',5,'p_contol_if','semantic.py',208),
  ('control -> UNLESS boolean COLON statements END','control',5,'p_control_unless','semantic.py',213),
  ('control -> UNLESS comparation COLON statements END','control',5,'p_control_unless','semantic.py',214),
  ('control -> UNLESS comparations COLON statements END','control',5,'p_control_unless','semantic.py',215),
  ('control -> UNLESS boolean statements elses END','control',5,'p_control_unless','semantic.py',216),
  ('control -> UNLESS comparation statements elses END','control',5,'p_control_unless','semantic.py',217),
  ('control -> UNLESS comparations statements elses END','control',5,'p_control_unless','semantic.py',218),
  ('when -> WHEN literal','when',2,'p_when','semantic.py',223),
  ('when -> WHEN literal THEN','when',3,'p_when','semantic.py',224),
  ('when -> WHEN comparation','when',2,'p_when','semantic.py',225),
  ('when -> WHEN comparations','when',2,'p_when','semantic.py',226),
  ('whens -> when','whens',1,'p_whens','semantic.py',231),
  ('whens -> when whens','whens',2,'p_whens','semantic.py',232),
  ('control -> CASE ID whens else END','control',5,'p_control_case','semantic.py',237),
  ('control -> CASE ID whens END','control',4,'p_control_case','semantic.py',238),
  ('control -> WHILE boolean DO statements END','control',5,'p_control_while','semantic.py',243),
  ('control -> WHILE comparation DO statements END','control',5,'p_control_while','semantic.py',244),
  ('control -> WHILE comparations DO statements END','control',5,'p_control_while','semantic.py',245),
  ('control -> FOR ID IN range DO statements END','control',7,'p_control_for','semantic.py',249),
  ('control -> FOR ID IN range statements END','control',6,'p_control_for','semantic.py',250),
  ('element -> ID','element',1,'p_element','semantic.py',256),
  ('element -> STRING','element',1,'p_element','semantic.py',257),
  ('element -> boolean','element',1,'p_element','semantic.py',258),
  ('element -> numeric','element',1,'p_element','semantic.py',259),
  ('element -> range','element',1,'p_element','semantic.py',260),
  ('elements -> element','elements',1,'p_elements','semantic.py',265),
  ('elements -> element COMMA elements','elements',3,'p_elements','semantic.py',266),
  ('array -> L_BRACKET literals R_BRACKET','array',3,'p_array','semantic.py',271),
  ('array -> L_BRACKET ids R_BRACKET','array',3,'p_array','semantic.py',272),
  ('array -> L_BRACKET elements R_BRACKET','array',3,'p_array','semantic.py',273),
  ('arrays -> array','arrays',1,'p_arrays','semantic.py',278),
  ('arrays -> array COMMA arrays','arrays',3,'p_arrays','semantic.py',279),
  ('struc -> strucMatrix','struc',1,'p_struc','semantic.py',284),
  ('struc -> strucSet','struc',1,'p_struc','semantic.py',285),
  ('struc -> strucHash','struc',1,'p_struc','semantic.py',286),
  ('strucMatrix -> MATRIX L_BRACKET arrays R_BRACKET','strucMatrix',4,'p_strucMatrix','semantic.py',291),
  ('strucSet -> SET PERIOD NEW','strucSet',3,'p_strucSet','semantic.py',295),
  ('strucSet -> SET PERIOD NEW L_PAREN R_PAREN','strucSet',5,'p_strucSet','semantic.py',296),
  ('strucSet -> SET PERIOD NEW L_PAREN array R_PAREN','strucSet',6,'p_strucSet','semantic.py',297),
  ('strucSet -> SET array','strucSet',2,'p_strucSet','semantic.py',298),
  ('strucHash -> HASH PERIOD NEW','strucHash',3,'p_strucHash','semantic.py',303),
  ('strucHash -> HASH PERIOD NEW L_BRACE R_BRACE','strucHash',5,'p_strucHash','semantic.py',304),
  ('strucHash -> HASH PERIOD NEW L_BRACE hashelems R_BRACE','strucHash',6,'p_strucHash','semantic.py',305),
  ('strucHash -> HASH array','strucHash',2,'p_strucHash','semantic.py',306),
  ('hashelem -> COLON ID RW_DOUBLE_ARROW literal','hashelem',4,'p_hashelem_rocket','semantic.py',311),
  ('hashelem -> ID COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',312),
  ('hashelem -> STRING COLON literal','hashelem',3,'p_hashelem_rocket','semantic.py',313),
  ('hashelems -> hashelem COMMA hashelem','hashelems',3,'p_hashelems','semantic.py',318),
  ('hashelems -> hashelem COMMA hashelems','hashelems',3,'p_hashelems','semantic.py',319),
  ('range -> L_PAREN INTEGER ELLIPSIS INTEGER R_PAREN','range',5,'p_range','semantic.py',324),
  ('range -> L_PAREN INTEGER DOUBLE_PERIOD INTEGER R_PAREN','range',5,'p_range','semantic.py',325),
  ('range -> INTEGER ELLIPSIS INTEGER','range',3,'p_range','semantic.py',326),
  ('range -> INTEGER DOUBLE_PERIOD INTEGER','range',3,'p_range','semantic.py',327),
  ('range -> INTEGER ELLIPSIS L_PAREN call_method R_PAREN','range',5,'p_range','semantic.py',328),
  ('range -> L_PAREN STRING ELLIPSIS STRING','range',4,'p_range','semantic.py',329),
  ('range -> L_PAREN STRING DOUBLE_PERIOD STRING','range',4,'p_range','semantic.py',330),
  ('range -> STRING ELLIPSIS STRING','range',3,'p_range','semantic.py',331),
  ('range -> STRING DOUBLE_PERIOD STRING','range',3,'p_range','semantic.py',332),
]
